use modular_bitfield::bitfield;
use modular_bitfield::specifiers::{B1, B2, B3, B6, B8};

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// TYPES tag - 6 top bits of a Lisp objects
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#[repr(u32)]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum QTag {
    //  Headers  special markers and forwarding pointers.
    Null = 0,                     //  00 Unbound variable/function
    MonitorForward = 1,           //  01 This cell being monitored
    HeaderP = 2,                  //  02 Structure header
    HeaderI = 3,                  //  03 Structure header
    ExternalValueCellPointer = 4, //  04 Invisible except for binding
    OneQForward = 5,              //  05 Invisible pointer (forwards one cell)
    HeaderForward = 6,            //  06 Invisible pointer (forwards whole structure)
    ElementForward = 7,           //  07 Invisible pointer in element of structure
    //
    //  Numeric data types. - All have the following bits on/off 000001xxxxxx
    Fixnum = 8,       //  10 Small integer
    SmallRatio = 9,   //  11 Ratio with small numerator and denominator
    SingleFloat = 10, //  12 SinglePrecision floating point
    DoubleFloat = 11, //  13 DoublePrecision floating point
    Bignum = 12,      //  14 Big integer
    BigRatio = 13,    //  15 Ratio with big numerator or denominator
    Complex = 14,     //  16 Complex number
    SpareNumber = 15, //  17 A number to the hardware trap mechanism

    //  Instance data types.
    Instance = 16,       //  20 Ordinary instance
    ListInstance = 17,   //  21 Instance that masquerades as a cons
    ArrayInstance = 18,  //  22 Instance that masquerades as an array
    StringInstance = 19, //  23 Instance that masquerades as a string

    //  Primitive data types.
    NIL = 20,               //  24 The symbol NIL
    List = 21,              //  25 A cons
    Array = 22,             //  26 An array that is not a string
    String = 23,            //  27 A string
    Symbol = 24,            //  30 A symbol other than NIL
    Locative = 25,          //  31 Locative pointer
    LexicalClosure = 26,    //  32 Lexical closure of a function
    DynamicClosure = 27,    //  33 Dynamic closure of a function
    CompiledFunction = 28,  //  34 Compiled code
    GenericFunction = 29,   //  35 Generic function (see later section)
    SparePointer1 = 30,     //  36 Spare
    SparePointer2 = 31,     //  37 Spare
    PhysicalAddress = 32,   //  40 Physical address
    NativeInstruction = 33, //  41 Spare
    BoundLocation = 34,     //  42 Deep bound marker
    Character = 35,         //  43 Common Lisp character object
    LogicVariable = 36,     //  44 Unbound logic variable marker
    GCForward = 37,         //  45 ObjectMoved flag for garbage collector
    EvenPC = 38,            //  46 PC at first instruction in word
    OddPC = 39,             //  47 PC at second instruction in word

    //  FullWord instructions.
    CallCompiledEven = 40,         //  50 Start call
    CallCompiledOdd = 41,          //  51 Start call
    CallIndirect = 42,             //  52 Start call
    CallGeneric = 43,              //  53 Start call
    CallCompiledEvenPrefetch = 44, //  54 Like above
    CallCompiledOddPrefetch = 45,  //  55 Like above
    CallIndirectPrefetch = 46,     //  56 Like above
    CallGenericPrefetch = 47,      //  57 Like above

    //  HalfWord (packed) instructions consume 4 bits of data type field (opcodes 60..77).
    PackedInstruction60 = 48,
    TypePackedInstruction61 = 49,
    TypePackedInstruction62 = 50,
    PackedInstruction63 = 51,
    TypePackedInstruction64 = 52,
    TypePackedInstruction65 = 53,
    PackedInstruction66 = 54,
    TypePackedInstruction67 = 55,
    TypePackedInstruction70 = 56,
    PackedInstruction71 = 57,
    TypePackedInstruction72 = 58,
    TypePackedInstruction73 = 59,
    PackedInstruction74 = 60,
    TypePackedInstruction75 = 61,
    TypePackedInstruction76 = 62,
    PackedInstruction77 = 63,
    TagCdrMask = 0o300,
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// CDR tag
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum CDR {
    Next = 0,
    Nil = 1,
    Normal = 2,
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// ARRAY element
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum ArrayElement {
    Fixnum = 0,
    Character = 1,
    Boole = 2,
    Object = 3,
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// ARRAY bit fields
//
///////////////////////////////////////////////////////////////////////////////////////////////////

pub enum ArrayElementType {
    Fixnum = 0,
    Character = 1,
    Boole = 2,
    Object = 3,
}

// see aihead.h
// The top 6 bits describes the type of array
const ARRAY_TYPE_FIELD_MASK: u32 = 0b11111100_00000000_00000000_00000000;

// Format of those 6 bits
const ARRAY_ELEMENT_TYPE_MASK: u32 = 0b11000000_00000000_00000000_00000000;

const ARRAY_BYTE_PACKING_MASK: u32 = 0b00111000_00000000_00000000_00000000;
const ARRAY_LIST_BIT_MASK: u32 = 0b00000100_00000000_00000000_00000000;
const ARRAY_NAMED_STRUCTURE_BIT_MASK: u32 = 0b00000010_00000000_00000000_00000000;
const ARRAY_SPARE1_MASK: u32 = 0b00000001_00000000_00000000_00000000;
const ARRAY_LONG_PREFIX_BIT_MASK: u32 = 0b00000000_10000000_00000000_00000000;
const ARRAY_LEADER_LENGTH_FIELD_MASK: u32 = 0b00000000_01111111_10000000_00000000;

const ARRAY_LENGTH_MASK: u32 = 0b00000000_00000000_01111111_11111111;
const ARRAY_LONG_DIMENSIONS_FIELD_MASK: u32 = 0b00000000_00000000_00000000_00000111;
const ARRAY_LONG_SPARE_MASK: u32 = 0b00000000_00000000_01111111_11111000;
const ARRAY_DISCONTIGUOUS_BIT_MASK: u32 = 0b00000000_00000000_00100000_00000000;
const ARRAY_DISPLACED_BIT_MASK: u32 = 0b00000000_00000000_01000000_00000000;

const ARRAY_REGISTER_ELEMENT_TYPE_MASK: u32 = 0b11000000_00000000_00000000_00000000;
const ARRAY_REGISTER_BYTE_PACKING_MASK: u32 = 0b00111000_00000000_00000000_00000000;
const ARRAY_REGISTER_BYTE_OFFSET_MASK: u32 = 0b00000111_11000000_00000000_00000000;
const ARRAY_REGISTER_EVENT_COUNT_MASK: u32 = 0b00000000_00111111_11111111_11111111;

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// FIXME What are those?
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum ValueDisposition {
    Effect = 0,
    Value = 1,
    Return = 2,
    Multiple = 3,
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Instructions opcode - FIXME Should be replaced by macros to include string representation, disassembly, code
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum OpCode {
    // List manipulation
    Car = 0o000_000,
    Cdr = 0o000_001,
    SetToCar = 0b0001100000,
    SetToCdr = 0b0001100001,
    SetToCdrPushCar = 0b0001100010,
    Rplaca = 0b0010000000,
    Rplacd = 0b0010000001,
    Rgetf = 0b0010010101,
    Member = 0b0010010110,
    Assoc = 0b0010010111,

    // AI Instructions
    Dereference = 0b0000001011,
    Unify = 0b0010011111,
    PushLocalLogicVariables = 0b0001000011,
    PushGlobalLogicVariable = 0b0000101101,
    LogicTailTest = 0b0000001100,

    // Binary predicates
    Eq = 0b0010111000,
    EqNoPop = 0b0010111100,
    Eql = 0b0010110011,
    EqlNoPop = 0b0010110111,
    EqualNumber = 0b0010110000,
    EqualNumberNoPop = 0b0010110100,
    Greaterp = 0b0010110010,
    GreaterpNoPop = 0b0010110110,
    Lessp = 0b0010110001,
    LesspNoPop = 0b0010110101,
    Logtest = 0b0010111011,
    LogtestNoPop = 0b0010111111,
    TypeMember = 0b0000100000,
    TypeMemberNoPop = 0b0000100100,

    // Unary predicates
    Endp = 0b0000000010,
    Plusp = 0b0000011110,
    Minusp = 0b0000011101,
    Zerop = 0b0000011100,

    // Numeric operations
    Add = 0b0011000000,
    Sub = 0b0011000001,
    UnaryMinus = 0b0001001100,
    Increment = 0b0001100011,
    Decrement = 0b0001100100,
    Multiply = 0b0010000010,
    Quotient = 0b0010000011,
    Ceiling = 0b0010000100,
    Floor = 0b0010000101,
    Truncate = 0b0010000110,
    Round = 0b0010000111,
    RationalQuotient = 0b0010001001,
    Max = 0b0010001011,
    Min = 0b0010001010,
    Logand = 0b0010001101,
    Logior = 0b0010001111,
    Logxor = 0b0010001110,
    Ash = 0b0010011010,
    Rot = 0b0010010000,
    Lsh = 0b0010010001,
    Op32BitPlus = 0b0011000010,
    Op32BitDifference = 0b0011000011,
    MultiplyDouble = 0b0010010010,
    AddBignumStep = 0b0011000100,
    SubBignumStep = 0b0011000101,
    MultiplyBignumStep = 0b0011000110,
    DivideBignumStep = 0b0011000111,
    LshcBignumStep = 0b0010010011,

    // Data movement
    Push = 0b0001000000,
    Pop = 0b0011100000,
    Movem = 0b0011100001,
    PushNNils = 0b0001000001,
    PushAddress = 0b0001101000,
    SetSpToAddress = 0b0001101001,
    SetSpToAddressSaveTos = 0b0001101010,
    PushAddressSpRelative = 0b0001000010,
    StackBlt = 0b0010010100,
    StackBltAddress = 0b0011101010,

    // FieldExtraction instructions
    Ldb = 0b0001111000,
    Dpb = 0b0011111000,
    CharLdb = 0b0001111001,
    CharDpb = 0b0011111001,
    PLdb = 0b0001111010,
    PDpb = 0b0011111010,
    PTagLdb = 0b0001111011,
    PTagDpb = 0b0011111011,

    // Array operations
    Aref1 = 0b0011001010,
    Aset1 = 0b0011001000,
    Aloc1 = 0b0011001011,
    Setup1DArray = 0b0000000011,
    SetupForce1DArray = 0b0000000100,
    FastAref1 = 0b0011101000,
    FastAset1 = 0b0011101001,
    ArrayLeader = 0b0011001110,
    StoreArrayLeader = 0b0011001100,
    AlocLeader = 0b0011001111,

    // Branch instructions
    Branch = 0b0001111100,
    BranchTrue = 0b0000110000,
    BranchTrueElseExtraPop = 0b0000110001,
    BranchTrueAndExtraPop = 0b0000110010,
    BranchTrueExtraPop = 0b0000110011,
    BranchTrueNoPop = 0b0000110100,
    BranchTrueAndNoPop = 0b0000110101,
    BranchTrueElseNoPop = 0b0000110110,
    BranchTrueAndNoPopElseNoPopExtraPop = 0b0000110111,
    BranchFalse = 0b0000111000,
    BranchFalseElseExtraPop = 0b0000111001,
    BranchFalseAndExtraPop = 0b0000111010,
    BranchFalseExtraPop = 0b0000111011,
    BranchFalseNoPop = 0b0000111100,
    BranchFalseAndNoPop = 0b0000111101,
    BranchFalseElseNoPop = 0b0000111110,
    BranchFalseAndNoPopElseNoPopExtraPop = 0b0000111111,
    LoopDecrementTos = 0b0001111101,
    LoopIncrementTosLessThan = 0b0011111101,

    // Block instructions
    Block0Read = 0b0001010000,
    Block1Read = 0b0001010001,
    Block2Read = 0b0001010010,
    Block3Read = 0b0001010011,
    Block0ReadShift = 0b0001010100,
    Block1ReadShift = 0b0001010101,
    Block2ReadShift = 0b0001010110,
    Block3ReadShift = 0b0001010111,
    Block0ReadAlu = 0b0001110000,
    Block1ReadAlu = 0b0001110001,
    Block2ReadAlu = 0b0001110010,
    Block3ReadAlu = 0b0001110011,
    Block0ReadTest = 0b0001011000,
    Block1ReadTest = 0b0001011001,
    Block2ReadTest = 0b0001011010,
    Block3ReadTest = 0b0001011011,
    Block0Write = 0b0000011000,
    Block1Write = 0b0000011001,
    Block2Write = 0b0000011010,
    Block3Write = 0b0000011011,

    // Function calling
    StartCall = 0b0000001000,
    FinishCallN = 0b0001011100,
    FinishCallNApply = 0b0001011101,
    FinishCallTos = 0b0001011110,
    FinishCallTosApply = 0b0001011111,
    EntryRestAccepted = 0b0001111110,
    EntryRestNotAccepted = 0b0001111111,
    LocateLocals = 0b0000101000,
    ReturnSingle = 0b0001001101,
    ReturnMultiple = 0b0001000100,
    ReturnKludge = 0b0001000101,
    TakeValues = 0b0001000110,

    // Binding instructions
    BindLocativeToValue = 0b0010011110,
    BindLocative = 0b0000000101,
    UnbindN = 0b0001000111,
    RestoreBindingStack = 0b0000000110,

    // Catch
    CatchOpen = 0b0011111110,
    CatchClose = 0b0000101001,

    // Lexical variables - Each takes 8 opcodes
    PushLexicalVar = 0b0000010000,
    PopLexicalVar = 0b0010100000,
    MovemLexicalVar = 0b0010101000,

    // Instance variables
    PushInstanceVariable = 0b0001001000,
    PopInstanceVariable = 0b0011010000,
    MovemInstanceVariable = 0b0011010001,
    PushAddressInstanceVariable = 0b0001001001,
    PushInstanceVariableOrdered = 0b0001001010,
    PopInstanceVariableOrdered = 0b0011010010,
    MovemInstanceVariableOrdered = 0b0011010011,
    PushAddressInstanceVariableOrdered = 0b0001001011,
    InstanceRef = 0b0011010100,
    InstanceSet = 0b0011010101,
    InstanceLoc = 0b0011010110,

    // Sub-primitives
    Ephemeralp = 0b0000000111,
    UnsignedLessp = 0b0011011001,
    UnsignedLesspNoPop = 0b0011011101,
    Alu = 0b0010001100,
    AllocateListBlock = 0b0011001001,
    AllocateStructureBlock = 0b0011001101,
    PointerPlus = 0b0010011000,
    PointerDifference = 0b0010011001,
    PointerIncrement = 0b0001100101,

    // Read/Write
    ReadInternalRegister = 0b0001101100,
    WriteInternalRegister = 0b0001101101,
    CoprocessorRead = 0b0001101110,
    CoprocessorWrite = 0b0001101111,
    MemoryRead = 0b0001001110,
    MemoryReadAddress = 0b0001001111,
    Tag = 0b0000001010,
    SetTag = 0b0011010111,
    StoreConditional = 0b0010011011,
    MemoryWrite = 0b0010011100,
    PStoreContents = 0b0010011101,
    SetCdrCode1 = 0b0001100110,
    SetCdrCode2 = 0b0001100111,
    MergeCdrNoPop = 0b0011100010,
    GenericDispatch = 0b0000101010,
    MessageDispatch = 0b0000101011,

    // Other
    Jump = 0b0000001001,
    CheckPreemptRequest = 0b0000101100,
    NoOp = 0b0000101110,
    Halt = 0b0000101111,
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// CPU internal registers
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum InternalRegister {
    EA = 0o0,
    FP = 0o1,
    LP = 0o2,
    SP = 0o3,
    MacroSP = 0o4,
    EPC = 0o10,
    DPC = 0o11,
    //
    StackCacheLowerBound = 0o5,
    StackCacheOverflowLimit = 0o34,
    //
    BAR0 = 0o6,
    BAR1 = 0o206,
    BAR2 = 0o406,
    BAR3 = 0o606,
    //
    PHTHash0 = 0o7,
    PHTHash1 = 0o207,
    PHTHash2 = 0o407,
    PHTHash3 = 0o607,
    PHTBase = 0o1007,
    PHTMask = 0o1010,
    //
    LoadBAR0 = 0o52,
    LoadBAR1 = 0o252,
    LoadBAR2 = 0o452,
    LoadBAR3 = 0o652,
    //
    LoadMap0 = 0o33,
    LoadMap1 = 0o233,
    LoadMap2 = 0o433,
    LoadMap3 = 0o633,
    //
    InvalidateMap0 = 0o32,
    InvalidateMap1 = 0o232,
    InvalidateMap2 = 0o432,
    InvalidateMap3 = 0o632,
    //
    Continuation = 0o12,
    AluAndRotateControl = 0o13,
    ControlRegister = 0o14,
    CRArgumentSize = 0o15,
    EphemeralOldspaceRegister = 0o16,
    ZoneOldspaceRegister = 0o17,
    //
    ChipRevision = 0o20,
    FPCoprocessorPresent = 0o21,
    PreemptRegister = 0o23,
    //
    IcacheControl = 0o24,
    PrefetcherControl = 0o25,
    MapCacheControl = 0o26,
    MemoryControl = 0o27,
    //
    ECCLog = 0o30,
    ECCLogAddress = 0o31,
    //
    UcodeROMContents = 0o35,
    AddressMask = 0o37,
    //
    EntryMaximumArguments = 0o40,
    LexicalVariable = 0o41,
    Instruction = 0o42,
    MemoryData = 0o44,
    DataPins = 0o45,
    ExtensionRegister = 0o46,
    MicrosecondClock = 0o47,
    //
    ArrayHeaderLength = 0o50,
    //
    TOS = 0o1000,
    EventCount = 0o1001,
    BindingStackPointer = 0o1002,
    CatchBlockList = 0o1003,
    ControlStackLimit = 0o1004,
    ControlStackExtraLimit = 0o1005,
    BindingStackLimit = 0o1006,
    CountMapReloads = 0o1011,
    //
    ListCacheArea = 0o1012,
    ListCacheAddress = 0o1013,
    ListCacheLength = 0o1014,
    //
    StructureCacheArea = 0o1015,
    StructureCacheAddress = 0o1016,
    StructureCacheLength = 0o1017,
    //
    DynamicBindingCacheBase = 0o1020,
    DynamicBindingCacheMask = 0o1021,
    //
    ChoicePointer = 0o1022,
    StructureStackChoicePointer = 0o1023,
    FEPModeTrapVectorAddress = 0o1024,
    //
    MappingTableCache = 0o1026,
    MappingTableLength = 0o1027,
    StackFrameMaximumSize = 0o1030,
    StackCacheDumpQuantum = 0o1031,
    //
    ConstantNIL = 0o1040,
    ConstantT = 0o1041,
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Coprocessor registers
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum CoprocessorRegister {
    MicrosecondClock = 0o1_002,
    HostInterrupt = 520,
    VMRegisterCommand = 576,
    VMRegisterAddress = 577,
    VMRegisterExtent = 578,
    VMRegisterAttributes = 579,
    VMRegisterDestination = 580,
    VMRegisterData = 581,
    VMRegisterMaskLow = 582,
    VMRegisterMaskHigh = 583,
    VMRegisterCommandBlock = 584,
    StackSwitch = 640,
    FlushStackCache = 641,
    FlushIDCaches = 642,
    CalendarClock = 643,
    FlushCachesForVMA = 644,
    FlipToStack = 645,
    UnwindStackForRestartOrApply = 646,
    SaveWorld = 647,
    ConsoleInputAvailableP = 648,
    WaitForEvent = 649,
    FlushHiddenArrayRegisters = 650,
    ConsoleIO = 651,
    AttachDiskChannel = 652,
    GrowDiskPartition = 653,
    DetachDiskChannel = 654,
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Arithmetic / logical unit condition constants
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum ALUCondition {
    SignedLessThanOrEqual = 0,
    SignedLessThan = 1,
    Negative = 2,
    SignedOverflow = 3,
    UnsignedLessThanOrEqual = 4,
    UnsignedLessThan = 5,
    Zero = 6,
    High25Zero = 7,
    Eq = 8,
    Op1Ephemeralp = 9,
    Op1TypeAcceptable = 10,
    Op1TypeCondition = 11,
    ResultTypeNil = 12,
    Op2Fixnum = 13,
    False = 14,
    ResultCdrLow = 15,
    CleanupBitsSet = 16,
    AddressInStackCache = 17,
    PendingSequenceBreakEnabled = 18,
    ExtraStackMode = 19,
    FepMode = 20,
    FpCoprocessorPresent = 21,
    Op1Oldspacep = 22,
    StackCacheOverflow = 23,
    OrLogicVariable = 24,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum ALUAdderOP2 {
    Op2 = 0,
    Zero = 1,
    Invert = 2,
    MinusOne = 3,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum ALUByteFunction {
    Dpb = 0,
    Ldb = 1,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum ALUByteBackground {
    Op1 = 0,
    RotateLatch = 1,
    Zero = 2,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum Boole {
    Clear = 0,
    And = 1,
    AndC1 = 2,
    Boole2 = 3,
    AndC2 = 4,
    Boole1 = 5,
    Xor = 6,
    Ior = 7,
    Nor = 8,
    Equiv = 9,
    C1 = 10,
    OrC1 = 11,
    C2 = 12,
    OrC2 = 13,
    Nand = 14,
    Set = 15,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum ALUFunction {
    Boole = 0,
    Byte = 1,
    Adder = 2,
    MultiplyDivide = 3,
}
///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Exceptions
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum TrapReason {
    HighPrioritySequenceBreak = 1,
    LowPrioritySequenceBreak = 2,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum TrapMode {
    Emulator = 0,
    ExtraStack = 1,
    IO = 2,
    FEP = 3,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum TrapVectors {
    ArithmeticInstructionExceptionVector = 0o0,
    InstructionExceptionVector = 0o4_000,          // 2048
    InterpreterFunctionVector = 0o4_400,           // 2304
    GenericDispatchVector = 0o5_000,               // 2560
    ErrorTrapVector = 0o5_100,                     // 2624
    ResetTrapVector = 0o5_101,                     // 2625
    PullApplyArgsTrapVector = 0o5_102,             // 2626
    StackOverflowTrapVector = 0o5_103,             // 2627
    TraceTrapVector = 0o5_104,                     // 2628
    PreemptRequestTrapVector = 0o5_105,            // 2629
    TransportTrapVector = 0o5_106,                 // 2630
    FepModeTrapVector = 0o5_107,                   // 2631
    LowPrioritySequenceBreakTrapVector = 0o5_110,  // 2632
    HighPrioritySequenceBreakTrapVector = 0o5_111, // 2633
    MonitorTrapVector = 0o5_112,                   // 2634
    GenericDispatchTrapVector = 0o5_114,           // 2636
    MessageDispatchTrapVector = 0o5_116,           // 2638
    PageNotResidentTrapVector = 0o5_120,           // 2640
    PageFaultRequestTrapVector = 0o5_121,          // 2641
    PageWriteFaultTrapVector = 0o5_122,            // 2642
    UncorrectableMemoryErrorTrapVector = 0o5_123,  // 2643
    MemoryBusErrorTrapVector = 0o5_124,            // 2644
    DBCacheMissTrapVector = 0o5_125,               // 2645
    DBUnwindFrameTrapVector = 0o5_126,             // 2646
    DBUnwindCatchTrapVector = 0o5_127,             // 2647
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Exceptions
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum ReturnValue {
    Normal = 0,
    Exception = 1,
    IllegalOperand = 2,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum HaltReason {
    IllInstn = 1,
    Halted = 2,
    SpyCalled = 3,
    FatalStackOverflow = 4,
    IllegalTrapVector = 5,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
pub enum DoubleFloatOp {
    Add = 0,
    Sub = 1,
    Multiply = 2,
    Divide = 3,
}

pub enum VMAttribute {
    AccessFault = 0o1,            // 0000_0001
    WriteFault = 0o2,             // 0000_0010
    TransportFault = 0o4,         // 0000_0100
    TransportDisable = 0o10,      // 0000_1000
    Ephemeral = 0o20,             // 0001_0000
    Modified = 0o40,              // 0010_0000
    Exists = 0o100,               // 0100_0000
    CreatedDefault = 0b0100_0101, // AccessFault | TransportFault | Exists,
}

// Common world format format definitions
pub const VERSION_AND_ARCHITECTURE_Q: usize = 0;

// // VLM world file format definitions
pub const VLMWORLD_SUFFIX: &str = ".vlod";

pub const VLMWORLD_FILE_COOKIE: u32 = 0xA3_8A_89_88; // 0o24_342_504_610
pub const VLMWORLD_FILE_COOKIE_SWAPPED: u32 = 0x88_89_8A_A3; // 0o21_042_305_243
pub const VLMPAGE_SIZE_QS: u32 = 0x2_000; // 8192, 0o20_000
pub const VLMBLOCK_SIZE: u32 = 0x2_000; // 8192, 0o20_000
pub const VLMBLOCKS_PER_DATA_PAGE: u32 = 4;
pub const VLMBLOCKS_PER_TAGS_PAGE: u32 = 1;
pub const VLMMAXIMUM_HEADER_BLOCKS: u32 = 14;
pub const VLMDATA_PAGE_SIZE_BYTES: u32 = 4 * VLMPAGE_SIZE_QS;
pub const VLMTAGS_PAGE_SIZE_BYTES: u32 = VLMPAGE_SIZE_QS;

pub const VLMVERSION1_AND_ARCHITECTURE: u32 = 0x80_00_80; // 0o40_000_200
pub const VLMWORLD_FILE_V1_WIRED_COUNT_Q: u32 = 1;
pub const VLMWORLD_FILE_V1_UNWIRED_COUNT_Q: u32 = 0;
pub const VLMWORLD_FILE_V1_PAGE_BASES_Q: u32 = 3;
pub const VLMWORLD_FILE_V1_FIRST_SYSOUT_Q: u32 = 0;
pub const VLMWORLD_FILE_V1_FIRST_MAP_Q: u32 = 8;

pub const VLMVERSION2_AND_ARCHITECTURE: u32 = 0x80_00_81; // 0o40_000_201
pub const VLMWORLD_FILE_V2_WIRED_COUNT_Q: u32 = 1;
pub const VLMWORLD_FILE_V2_UNWIRED_COUNT_Q: u32 = 0;
pub const VLMWORLD_FILE_V2_PAGE_BASES_Q: u32 = 2;
pub const VLMWORLD_FILE_V2_FIRST_SYSOUT_Q: u32 = 3;
pub const VLMWORLD_FILE_V2_FIRST_MAP_Q: u32 = 8;

// // Ivory world file format definitions
pub const IVORY_WORLD_SUFFIX: &str = ".ilod";

// #if BYTE_ORDER == LITTLE_ENDIAN
pub const IVORY_WORLD_FILE_COOKIE: u32 = 0x63_4A_49_48; // 0o14_322_444_510;
                                                        // #else
                                                        // pub const  IvoryWorldFileCookie  : u32 = 0x48_49_4A_63; // 011022245143L
                                                        // #endif
pub const IVORY_PAGE_SIZE_QS: u32 = 0xFF;
pub const IVORY_PAGE_SIZE_BYTES: u32 = 0x500; // 1280
pub const IVORY_WORLD_FILE_WIRED_COUNT_Q: u32 = 1;
pub const IVORY_WORLD_FILE_UNWIRED_COUNT_Q: u32 = 2;
pub const IVORY_WORLD_FILE_FIRST_SYSOUT_Q: u32 = 0;
pub const IVORY_WORLD_FILE_FIRST_MAP_Q: u32 = 8;

// size reflects 'count from 0' array indices
// Memory_TotalSize*: QAddress = bottomMask(0)

// Page size is 13 bits = 0x2000 = 8,192
pub const MEMORY_ADDRESS_PAGE_SHIFT: u32 = 13;
pub const MEMORY_PAGE_SIZE: u32 = 0x2_000;
pub const MEMORY_PAGE_MASK: u32 = MEMORY_PAGE_SIZE - 1;
//  MemoryPage_Total* : QAddress = (2 ^ (VMArchitecture_In_Bits - MemoryPage_AddressShift)).QAddress

pub const ADDRESS_T: u32 = 0xF804_1208;
pub const ADDRESS_NIL: u32 = 0xF804_1200;

pub const PAGE_SIZE: usize = 0x100; // 256
pub const PAGE_NUMBER_MASK: u32 = 0xFF00;
pub const PAGE_OFFSET_MASK: u32 = 0x00FF;
pub const PAGE_ADDRESS_SHIFT: u32 = 8;

pub const ADDRESS_QUANTUM_SHIFT: u32 = 20;
pub const QUANTUM_SIZE: u32 = 2 ^ ADDRESS_QUANTUM_SHIFT;

pub enum MemoryCycleTypes {
    DataRead = 0,
    DataWrite = 1,
    BindRead = 2,
    BindWrite = 3,
    BindReadNoMonitor = 4,
    BindWriteNoMonitor = 5,
    Header = 6,
    StructureOffset = 7,
    Scavenge = 8,
    Cdr = 9,
    GCCopy = 10,
    Raw = 11,
    RawTranslate = 12,
}

pub enum VMOpcode {
    Lookup = 0, // reply is index
    Create = 1,
    Destroy = 2,
    ReadAttributes = 3,  // operand is index
    WriteAttributes = 4, // operand is index
    Fill = 5,            // operand is increment (of fill data)
    Search = 6,          // operand is increment (of address)
    Copy = 7,            // operand is memory-cycle?
    Scan = 8,
    Enable = 9,
}

pub enum VMResultCode {
    Success = 0,
    Failure = 1,
}

pub enum VMRegisterNumber {
    Command = 0o1100,
    Address = 0o1101,
    Extent = 0o1102,
    Attributes = 0o1103,
    Destination = 0o1104,
    Data = 0o1105,
}

#[derive(Debug, Copy, Clone)]
#[repr(C)]
pub enum IvoryDispatch {
    CarFP = 0,
    CarLP,
    CarSP,
    CarImmediate,
    CarPop,
    CdrFP,
    CdrLP,
    CdrSP,
    CdrImmediate,
    CdrPop,
    EndpFP,
    EndpLP,
    EndpSP,
    EndpImmediate,
    EndpPop,
    Setup1dArrayFP,
    Setup1dArrayLP,
    Setup1dArraySP,
    Setup1dArrayImmediate,
    Setup1dArrayPop,
    SetupForce1dArrayFP,
    SetupForce1dArrayLP,
    SetupForce1dArraySP,
    SetupForce1dArrayImmediate,
    SetupForce1dArrayPop,
    BindLocativeFP,
    BindLocativeLP,
    BindLocativeSP,
    BindLocativeImmediate,
    BindLocativePop,
    RestoreBindingStackFP,
    RestoreBindingStackLP,
    RestoreBindingStackSP,
    RestoreBindingStackImmediate,
    RestoreBindingStackPop,
    EphemeralpFP,
    EphemeralpLP,
    EphemeralpSP,
    EphemeralpImmediate,
    EphemeralpPop,
    StartCallFP,
    StartCallLP,
    StartCallSP,
    StartCallImmediate,
    StartCallPop,
    JumpFP,
    JumpLP,
    JumpSP,
    JumpImmediate,
    JumpPop,
    TagFP,
    TagLP,
    TagSP,
    TagImmediate,
    TagPop,
    DereferenceFP,
    DereferenceLP,
    DereferenceSP,
    DereferenceImmediate,
    DereferencePop,
    LogicTailTestFP,
    LogicTailTestLP,
    LogicTailTestSP,
    LogicTailTestImmediate,
    LogicTailTestPop,
    ProcBreakpointFP,
    ProcBreakpointLP,
    ProcBreakpointSP,
    ProcBreakpointImmediate,
    ProcBreakpointPop,
    PushLexicalVarFP,
    PushLexicalVarLP,
    PushLexicalVarSP,
    PushLexicalVarImmediate,
    PushLexicalVarPop,
    Block0WriteFP,
    Block0WriteLP,
    Block0WriteSP,
    Block0WriteImmediate,
    Block0WritePop,
    Block1WriteFP,
    Block1WriteLP,
    Block1WriteSP,
    Block1WriteImmediate,
    Block1WritePop,
    Block2WriteFP,
    Block2WriteLP,
    Block2WriteSP,
    Block2WriteImmediate,
    Block2WritePop,
    Block3WriteFP,
    Block3WriteLP,
    Block3WriteSP,
    Block3WriteImmediate,
    Block3WritePop,
    ZeropFP,
    ZeropLP,
    ZeropSP,
    ZeropImmediate,
    ZeropPop,
    MinuspFP,
    MinuspLP,
    MinuspSP,
    MinuspImmediate,
    MinuspPop,
    PluspFP,
    PluspLP,
    PluspSP,
    PluspImmediate,
    PluspPop,
    TypeMember,
    TypeMemberNoPop,
    LocateLocals,
    CatchClose,
    GenericDispatch,
    MessageDispatch,
    CheckPreemptRequest,
    PushGlobalLogicVariable,
    NoOp,
    Halt,
    BranchTrue,
    BranchTrueElseExtraPop,
    BranchTrueAndExtraPop,
    BranchTrueExtraPop,
    BranchTrueNoPop,
    BranchTrueAndNoPop,
    BranchTrueElseNoPop,
    BranchTrueAndNoPopElseNoPopExtraPop,
    BranchFalse,
    BranchFalseElseExtraPop,
    BranchFalseAndExtraPop,
    BranchFalseExtraPop,
    BranchFalseNoPop,
    BranchFalseAndNoPop,
    BranchFalseElseNoPop,
    BranchFalseAndNoPopElseNoPopExtraPop,
    PushFP,
    PushLP,
    PushSP,
    PushImmediate,
    PushPop,
    PushNNils,
    PushAddressSpRelativeFP,
    PushAddressSpRelativeLP,
    PushAddressSpRelativeSP,
    PushAddressSpRelativeImmediate,
    PushAddressSpRelativePop,
    PushLocalLogicVariablesFP,
    PushLocalLogicVariablesLP,
    PushLocalLogicVariablesSP,
    PushLocalLogicVariablesImmediate,
    PushLocalLogicVariablesPop,
    ReturnMultipleFP,
    ReturnMultipleLP,
    ReturnMultipleSP,
    ReturnMultipleImmediate,
    ReturnMultiplePop,
    ReturnKludgeFP,
    ReturnKludgeLP,
    ReturnKludgeSP,
    ReturnKludgeImmediate,
    ReturnKludgePop,
    TakeValues,
    UnbindNImmediate,
    UnbindNPop,
    PushInstanceVariable,
    PushAddressInstanceVariable,
    PushInstanceVariableOrdered,
    PushAddressInstanceVariableOrdered,
    UnaryMinusFP,
    UnaryMinusLP,
    UnaryMinusSP,
    UnaryMinusImmediate,
    UnaryMinusPop,
    ReturnSingleNIL,
    ReturnSingleT,
    ReturnSingleTOS,
    MemoryRead,
    MemoryReadAddress,
    Block0Read,
    Block1Read,
    Block2Read,
    Block3Read,
    Block0ReadShift,
    Block1ReadShift,
    Block2ReadShift,
    Block3ReadShift,
    Block0ReadTest,
    Block1ReadTest,
    Block2ReadTest,
    Block3ReadTest,
    FinishCallN,
    FinishCallNApply,
    FinishCallTos,
    FinishCallTosApply,
    SetToCarFP,
    SetToCarLP,
    SetToCarSP,
    SetToCarImmediate,
    SetToCarPop,
    SetToCdrFP,
    SetToCdrLP,
    SetToCdrSP,
    SetToCdrImmediate,
    SetToCdrPop,
    SetToCdrPushCarFP,
    SetToCdrPushCarLP,
    SetToCdrPushCarSP,
    SetToCdrPushCarImmediate,
    SetToCdrPushCarPop,
    IncrementFP,
    IncrementLP,
    IncrementSP,
    IncrementImmediate,
    IncrementPop,
    DecrementFP,
    DecrementLP,
    DecrementSP,
    DecrementImmediate,
    DecrementPop,
    PointerIncrementFP,
    PointerIncrementLP,
    PointerIncrementSP,
    PointerIncrementImmediate,
    PointerIncrementPop,
    SetCdrCode1FP,
    SetCdrCode1LP,
    SetCdrCode1SP,
    SetCdrCode1Immediate,
    SetCdrCode1Pop,
    SetCdrCode2FP,
    SetCdrCode2LP,
    SetCdrCode2SP,
    SetCdrCode2Immediate,
    SetCdrCode2Pop,
    PushAddressFP,
    PushAddressLP,
    PushAddressSP,
    PushAddressImmediate,
    PushAddressPop,
    SetSpToAddressFP,
    SetSpToAddressLP,
    SetSpToAddressSP,
    SetSpToAddressImmediate,
    SetSpToAddressPop,
    SetSpToAddressSaveTosFP,
    SetSpToAddressSaveTosLP,
    SetSpToAddressSaveTosSP,
    SetSpToAddressSaveTosImmediate,
    SetSpToAddressSaveTosPop,
    ReadInternalRegister,
    WriteInternalRegister,
    CoprocessorRead,
    CoprocessorWrite,
    Block0ReadAluFP,
    Block0ReadAluLP,
    Block0ReadAluSP,
    Block0ReadAluImmediate,
    Block0ReadAluPop,
    Block1ReadAluFP,
    Block1ReadAluLP,
    Block1ReadAluSP,
    Block1ReadAluImmediate,
    Block1ReadAluPop,
    Block2ReadAluFP,
    Block2ReadAluLP,
    Block2ReadAluSP,
    Block2ReadAluImmediate,
    Block2ReadAluPop,
    Block3ReadAluFP,
    Block3ReadAluLP,
    Block3ReadAluSP,
    Block3ReadAluImmediate,
    Block3ReadAluPop,
    Ldb,
    CharLdb,
    PLdb,
    PTagLdb,
    Branch,
    LoopDecrementTos,
    EntryRestAccepted,
    EntryRestNotAccepted,
    RplacaFP,
    RplacaLP,
    RplacaSP,
    RplacaImmediate,
    RplacaPop,
    RplacdFP,
    RplacdLP,
    RplacdSP,
    RplacdImmediate,
    RplacdPop,
    MultiplyFP,
    MultiplyLP,
    MultiplySP,
    MultiplyImmediate,
    MultiplyPop,
    QuotientFP,
    QuotientLP,
    QuotientSP,
    QuotientImmediate,
    QuotientPop,
    CeilingFP,
    CeilingLP,
    CeilingSP,
    CeilingImmediate,
    CeilingPop,
    FloorFP,
    FloorLP,
    FloorSP,
    FloorImmediate,
    FloorPop,
    TruncateFP,
    TruncateLP,
    TruncateSP,
    TruncateImmediate,
    TruncatePop,
    RoundFP,
    RoundLP,
    RoundSP,
    RoundImmediate,
    RoundPop,
    RationalQuotientFP,
    RationalQuotientLP,
    RationalQuotientSP,
    RationalQuotientImmediate,
    RationalQuotientPop,
    MinFP,
    MinLP,
    MinSP,
    MinImmediate,
    MinPop,
    MaxFP,
    MaxLP,
    MaxSP,
    MaxImmediate,
    MaxPop,
    AluFP,
    AluLP,
    AluSP,
    AluImmediate,
    AluPop,
    LogandFP,
    LogandLP,
    LogandSP,
    LogandImmediate,
    LogandPop,
    LogxorFP,
    LogxorLP,
    LogxorSP,
    LogxorImmediate,
    LogxorPop,
    LogiorFP,
    LogiorLP,
    LogiorSP,
    LogiorImmediate,
    LogiorPop,
    RotFP,
    RotLP,
    RotSP,
    RotImmediate,
    RotPop,
    LshFP,
    LshLP,
    LshSP,
    LshImmediate,
    LshPop,
    MultiplyDoubleFP,
    MultiplyDoubleLP,
    MultiplyDoubleSP,
    MultiplyDoubleImmediate,
    MultiplyDoublePop,
    LshcBignumStepFP,
    LshcBignumStepLP,
    LshcBignumStepSP,
    LshcBignumStepImmediate,
    LshcBignumStepPop,
    StackBltFP,
    StackBltLP,
    StackBltSP,
    StackBltImmediate,
    StackBltPop,
    RgetfFP,
    RgetfLP,
    RgetfSP,
    RgetfImmediate,
    RgetfPop,
    MemberFP,
    MemberLP,
    MemberSP,
    MemberImmediate,
    MemberPop,
    AssocFP,
    AssocLP,
    AssocSP,
    AssocImmediate,
    AssocPop,
    PointerPlusFP,
    PointerPlusLP,
    PointerPlusSP,
    PointerPlusImmediate,
    PointerPlusPop,
    PointerDifferenceFP,
    PointerDifferenceLP,
    PointerDifferenceSP,
    PointerDifferenceImmediate,
    PointerDifferencePop,
    AshFP,
    AshLP,
    AshSP,
    AshImmediate,
    AshPop,
    StoreConditionalFP,
    StoreConditionalLP,
    StoreConditionalSP,
    StoreConditionalImmediate,
    StoreConditionalPop,
    MemoryWriteFP,
    MemoryWriteLP,
    MemoryWriteSP,
    MemoryWriteImmediate,
    MemoryWritePop,
    PStoreContentsFP,
    PStoreContentsLP,
    PStoreContentsSP,
    PStoreContentsImmediate,
    PStoreContentsPop,
    BindLocativeToValueFP,
    BindLocativeToValueLP,
    BindLocativeToValueSP,
    BindLocativeToValueImmediate,
    BindLocativeToValuePop,
    UnifyFP,
    UnifyLP,
    UnifySP,
    UnifyImmediate,
    UnifyPop,
    PopLexicalVarFP,
    PopLexicalVarLP,
    PopLexicalVarSP,
    PopLexicalVarImmediate,
    PopLexicalVarPop,
    MovemLexicalVarFP,
    MovemLexicalVarLP,
    MovemLexicalVarSP,
    MovemLexicalVarImmediate,
    MovemLexicalVarPop,
    EqualNumberFP,
    EqualNumberLP,
    EqualNumberSP,
    EqualNumberImmediate,
    EqualNumberPop,
    LesspFP,
    LesspLP,
    LesspSP,
    LesspImmediate,
    LesspPop,
    GreaterpFP,
    GreaterpLP,
    GreaterpSP,
    GreaterpImmediate,
    GreaterpPop,
    EqlFP,
    EqlLP,
    EqlSP,
    EqlImmediate,
    EqlPop,
    EqualNumberNoPopFP,
    EqualNumberNoPopLP,
    EqualNumberNoPopSP,
    EqualNumberNoPopImmediate,
    EqualNumberNoPopPop,
    LesspNoPopFP,
    LesspNoPopLP,
    LesspNoPopSP,
    LesspNoPopImmediate,
    LesspNoPopPop,
    GreaterpNoPopFP,
    GreaterpNoPopLP,
    GreaterpNoPopSP,
    GreaterpNoPopImmediate,
    GreaterpNoPopPop,
    EqlNoPopFP,
    EqlNoPopLP,
    EqlNoPopSP,
    EqlNoPopImmediate,
    EqlNoPopPop,
    EqFP,
    EqLP,
    EqSP,
    EqImmediate,
    EqPop,
    LogtestFP,
    LogtestLP,
    LogtestSP,
    LogtestImmediate,
    LogtestPop,
    EqNoPopFP,
    EqNoPopLP,
    EqNoPopSP,
    EqNoPopImmediate,
    EqNoPopPop,
    LogtestNoPopFP,
    LogtestNoPopLP,
    LogtestNoPopSP,
    LogtestNoPopImmediate,
    LogtestNoPopPop,
    AddFP,
    AddLP,
    AddSP,
    AddImmediate,
    AddPop,
    SubFP,
    SubLP,
    SubSP,
    SubImmediate,
    SubPop,
    Dispatch32BitPlusFP,
    Dispatch32BitPlusLP,
    Dispatch32BitPlusSP,
    Dispatch32BitPlusImmediate,
    Dispatch32BitPlusPop,
    Dispatch32BitDifferenceFP,
    Dispatch32BitDifferenceLP,
    Dispatch32BitDifferenceSP,
    Dispatch32BitDifferenceImmediate,
    Dispatch32BitDifferencePop,
    AddBignumStepFP,
    AddBignumStepLP,
    AddBignumStepSP,
    AddBignumStepImmediate,
    AddBignumStepPop,
    SubBignumStepFP,
    SubBignumStepLP,
    SubBignumStepSP,
    SubBignumStepImmediate,
    SubBignumStepPop,
    MultiplyBignumStepFP,
    MultiplyBignumStepLP,
    MultiplyBignumStepSP,
    MultiplyBignumStepImmediate,
    MultiplyBignumStepPop,
    DivideBignumStepFP,
    DivideBignumStepLP,
    DivideBignumStepSP,
    DivideBignumStepImmediate,
    DivideBignumStepPop,
    Aset1FP,
    Aset1LP,
    Aset1SP,
    Aset1Immediate,
    Aset1Pop,
    AllocateListBlockFP,
    AllocateListBlockLP,
    AllocateListBlockSP,
    AllocateListBlockImmediate,
    AllocateListBlockPop,
    Aref1FP,
    Aref1LP,
    Aref1SP,
    Aref1Immediate,
    Aref1Pop,
    Aloc1FP,
    Aloc1LP,
    Aloc1SP,
    Aloc1Immediate,
    Aloc1Pop,
    StoreArrayLeaderFP,
    StoreArrayLeaderLP,
    StoreArrayLeaderSP,
    StoreArrayLeaderImmediate,
    StoreArrayLeaderPop,
    AllocateStructureBlockFP,
    AllocateStructureBlockLP,
    AllocateStructureBlockSP,
    AllocateStructureBlockImmediate,
    AllocateStructureBlockPop,
    ArrayLeaderFP,
    ArrayLeaderLP,
    ArrayLeaderSP,
    ArrayLeaderImmediate,
    ArrayLeaderPop,
    AlocLeaderFP,
    AlocLeaderLP,
    AlocLeaderSP,
    AlocLeaderImmediate,
    AlocLeaderPop,
    PopInstanceVariable,
    MovemInstanceVariable,
    PopInstanceVariableOrdered,
    MovemInstanceVariableOrdered,
    InstanceRefFP,
    InstanceRefLP,
    InstanceRefSP,
    InstanceRefImmediate,
    InstanceRefPop,
    InstanceSetFP,
    InstanceSetLP,
    InstanceSetSP,
    InstanceSetImmediate,
    InstanceSetPop,
    InstanceLocFP,
    InstanceLocLP,
    InstanceLocSP,
    InstanceLocImmediate,
    InstanceLocPop,
    SetTagFP,
    SetTagLP,
    SetTagSP,
    SetTagImmediate,
    SetTagPop,
    UnsignedLesspFP,
    UnsignedLesspLP,
    UnsignedLesspSP,
    UnsignedLesspImmediate,
    UnsignedLesspPop,
    UnsignedLesspNoPopFP,
    UnsignedLesspNoPopLP,
    UnsignedLesspNoPopSP,
    UnsignedLesspNoPopImmediate,
    UnsignedLesspNoPopPop,
    PopFP,
    PopLP,
    PopSP,
    PopImmediate,
    PopPop,
    MovemFP,
    MovemLP,
    MovemSP,
    MovemImmediate,
    MovemPop,
    MergeCdrNoPopFP,
    MergeCdrNoPopLP,
    MergeCdrNoPopSP,
    MergeCdrNoPopImmediate,
    MergeCdrNoPopPop,
    FastAref1FP,
    FastAref1LP,
    FastAref1SP,
    FastAref1Immediate,
    FastAref1Pop,
    FastAset1FP,
    FastAset1LP,
    FastAset1SP,
    FastAset1Immediate,
    FastAset1Pop,
    StackBltAddressFP,
    StackBltAddressLP,
    StackBltAddressSP,
    StackBltAddressImmediate,
    StackBltAddressPop,
    Dpb,
    CharDpb,
    PDpb,
    PTagDpb,
    LoopIncrementTosLessThan,
    CatchOpen,
    Hack,
    PushNull,
    PushMonitorForward,
    PushHeaderP,
    PushHeaderI,
    PushExternalValueCellPointer,
    PushOneQForward,
    PushHeaderForward,
    PushElementForward,
    PushFixnum,
    PushSmallRatio,
    PushSingleFloat,
    PushDoubleFloat,
    PushBignum,
    PushBigRatio,
    PushComplex,
    PushSpareNumber,
    PushInstance,
    PushListInstance,
    PushArrayInstance,
    PushStringInstance,
    PushNil,
    PushList,
    PushArray,
    PushString,
    PushSymbol,
    PushLocative,
    PushLexicalClosure,
    PushDynamicClosure,
    PushCompiledFunction,
    PushGenericFunction,
    PushSparePointer1,
    PushSparePointer2,
    PushPhysicalAddress,
    PushSpareImmediate1,
    PushBoundLocation,
    PushCharacter,
    PushLogicVariable,
    PushGcForward,
    PushEvenPc,
    PushOddPc,
    CallCompiledEven,
    CallCompiledOdd,
    CallIndirect,
    CallGeneric,
    CallCompiledEvenPrefetch,
    CallCompiledOddPrefetch,
    CallIndirectPrefetch,
    CallGenericPrefetch,
    PushPackedInstruction60,
    PushPackedInstruction61,
    PushPackedInstruction62,
    PushPackedInstruction63,
    PushPackedInstruction64,
    PushPackedInstruction65,
    PushPackedInstruction66,
    PushPackedInstruction67,
    PushPackedInstruction70,
    PushPackedInstruction71,
    PushPackedInstruction72,
    PushPackedInstruction73,
    PushPackedInstruction74,
    PushPackedInstruction75,
    PushPackedInstruction76,
    PushPackedInstruction77,
    InstructionCacheLookup,
    IllegalInstruction,
}

// pub enum IvoryDispatch2 {
//     Hack = 657,
//     CatchOpen = 656,
//     LoopIncrementTosLessThan = 655,
//     IllegalInstruction = 723,
//     PTagDpb = 654,
//     PDpb = 653,
//     CharDpb = 652,
//     Dpb = 651,
//     StackBltAddressImmediate = 649,
//     StackBltAddressPop = 650,
//     FastAset1Pop = 645,
//     FastAref1Pop = 640,
//     MergeCdrNoPopPop = 635,
//     MovemPop = 630,
//     PopPop = 625,
//     UnsignedLesspNoPopPop = 620,
//     UnsignedLesspPop = 615,
//     SetTagPop = 610,
//     InstanceLocPop = 605,
//     InstanceSetPop = 600,
//     InstanceRefPop = 595,
//     AlocLeaderPop = 586,
//     ArrayLeaderPop = 581,
//     AllocateStructureBlockPop = 576,
//     StoreArrayLeaderPop = 571,
//     Aloc1Pop = 566,
//     Aref1Pop = 561,
//     AllocateListBlockPop = 556,
//     Aset1Pop = 551,
//     DivideBignumStepPop = 546,
//     MultiplyBignumStepPop = 541,
//     SubBignumStepPop = 536,
//     AddBignumStepPop = 531,
//     Dispatch32BitDifferencePop = 526,
//     Dispatch32BitPlusPop = 521,
//     SubPop = 516,
//     AddPop = 511,
//     LogtestNoPopPop = 506,
//     EqNoPopPop = 501,
//     LogtestPop = 496,
//     EqPop = 491,
//     EqlNoPopPop = 486,
//     GreaterpNoPopPop = 481,
//     LesspNoPopPop = 476,
//     EqualNumberNoPopPop = 471,
//     EqlPop = 466,
//     GreaterpPop = 461,
//     LesspPop = 456,
//     EqualNumberPop = 451,
//     MovemLexicalVarPop = 446,
//     PopLexicalVarPop = 441,
//     UnifyPop = 436,
//     BindLocativeToValuePop = 431,
//     PStoreContentsPop = 426,
//     MemoryWritePop = 421,
//     StoreConditionalPop = 416,
//     AshPop = 411,
//     PointerDifferencePop = 406,
//     PointerPlusPop = 401,
//     AssocPop = 396,
//     MemberPop = 391,
//     RgetfPop = 386,
//     StackBltPop = 381,
//     LshcBignumStepPop = 376,
//     MultiplyDoublePop = 371,
//     LshPop = 366,
//     RotPop = 361,
//     LogiorPop = 356,
//     LogxorPop = 351,
//     LogandPop = 346,
//     AluPop = 341,
//     MaxPop = 336,
//     MinPop = 331,
//     RationalQuotientPop = 326,
//     RoundPop = 321,
//     TruncatePop = 316,
//     FloorPop = 311,
//     CeilingPop = 306,
//     QuotientPop = 301,
//     MultiplyPop = 296,
//     RplacdPop = 291,
//     RplacaPop = 286,
//     Block3ReadAluPop = 273,
//     Block2ReadAluPop = 268,
//     Block1ReadAluPop = 263,
//     Block0ReadAluPop = 258,
//     SetSpToAddressSaveTosPop = 249,
//     SetSpToAddressPop = 244,
//     PushAddressPop = 239,
//     SetCdrCode2Pop = 234,
//     SetCdrCode1Pop = 229,
//     PointerIncrementPop = 224,
//     DecrementPop = 219,
//     IncrementPop = 214,
//     SetToCdrPushCarPop = 209,
//     SetToCdrPop = 204,
//     SetToCarPop = 199,
//     UnaryMinusPop = 173,
//     UnbindNPop = 164,
//     ReturnKludgePop = 161,
//     ReturnMultiplePop = 156,
//     PushLocalLogicVariablesPop = 151,
//     PushAddressSpRelativePop = 146,
//     PushPop = 140,
//     PluspPop = 109,
//     MinuspPop = 104,
//     ZeropPop = 99,
//     Block3WritePop = 94,
//     Block2WritePop = 89,
//     Block1WritePop = 84,
//     Block0WritePop = 79,
//     PushLexicalVarPop = 74,
//     ProcBreakpointPop = 69,
//     LogicTailTestPop = 64,
//     DereferencePop = 59,
//     TagPop = 54,
//     JumpPop = 49,
//     StartCallPop = 44,
//     EphemeralpPop = 39,
//     RestoreBindingStackPop = 34,
//     BindLocativePop = 29,
//     SetupForce1dArrayPop = 24,
//     Setup1dArrayPop = 19,
//     EndpPop = 14,
//     CdrPop = 9,
//     CarPop = 4,
//     StackBltAddressSP = 648,
//     StackBltAddressLP = 647,
//     StackBltAddressFP = 646,
//     FastAset1Immediate = 644,
//     FastAset1SP = 643,
//     FastAset1LP = 642,
//     FastAset1FP = 641,
//     FastAref1Immediate = 639,
//     FastAref1SP = 638,
//     FastAref1LP = 637,
//     FastAref1FP = 636,
//     MergeCdrNoPopImmediate = 634,
//     MergeCdrNoPopSP = 633,
//     MergeCdrNoPopLP = 632,
//     MergeCdrNoPopFP = 631,
//     MovemImmediate = 629,
//     MovemSP = 628,
//     MovemLP = 627,
//     MovemFP = 626,
//     PopImmediate = 624,
//     PopSP = 623,
//     PopLP = 622,
//     PopFP = 621,
//     UnsignedLesspNoPopImmediate = 619,
//     UnsignedLesspNoPopSP = 618,
//     UnsignedLesspNoPopLP = 617,
//     UnsignedLesspNoPopFP = 616,
//     UnsignedLesspImmediate = 614,
//     UnsignedLesspSP = 613,
//     UnsignedLesspLP = 612,
//     UnsignedLesspFP = 611,
//     SetTagImmediate = 609,
//     SetTagSP = 608,
//     SetTagLP = 607,
//     SetTagFP = 606,
//     InstanceLocImmediate = 604,
//     InstanceLocSP = 603,
//     InstanceLocLP = 602,
//     InstanceLocFP = 601,
//     InstanceSetImmediate = 599,
//     InstanceSetSP = 598,
//     InstanceSetLP = 597,
//     InstanceSetFP = 596,
//     InstanceRefImmediate = 594,
//     InstanceRefSP = 593,
//     InstanceRefLP = 592,
//     InstanceRefFP = 591,
//     MovemInstanceVariableOrdered = 590,
//     PopInstanceVariableOrdered = 589,
//     MovemInstanceVariable = 588,
//     PopInstanceVariable = 587,
//     AlocLeaderImmediate = 585,
//     AlocLeaderSP = 584,
//     AlocLeaderLP = 583,
//     AlocLeaderFP = 582,
//     ArrayLeaderImmediate = 580,
//     ArrayLeaderSP = 579,
//     ArrayLeaderLP = 578,
//     ArrayLeaderFP = 577,
//     AllocateStructureBlockImmediate = 575,
//     AllocateStructureBlockSP = 574,
//     AllocateStructureBlockLP = 573,
//     AllocateStructureBlockFP = 572,
//     StoreArrayLeaderImmediate = 570,
//     StoreArrayLeaderSP = 569,
//     StoreArrayLeaderLP = 568,
//     StoreArrayLeaderFP = 567,
//     Aloc1Immediate = 565,
//     Aloc1SP = 564,
//     Aloc1LP = 563,
//     Aloc1FP = 562,
//     Aref1Immediate = 560,
//     Aref1SP = 559,
//     Aref1LP = 558,
//     Aref1FP = 557,
//     AllocateListBlockImmediate = 555,
//     AllocateListBlockSP = 554,
//     AllocateListBlockLP = 553,
//     AllocateListBlockFP = 552,
//     Aset1Immediate = 550,
//     Aset1SP = 549,
//     Aset1LP = 548,
//     Aset1FP = 547,
//     DivideBignumStepImmediate = 545,
//     DivideBignumStepSP = 544,
//     DivideBignumStepLP = 543,
//     DivideBignumStepFP = 542,
//     MultiplyBignumStepImmediate = 540,
//     MultiplyBignumStepSP = 539,
//     MultiplyBignumStepLP = 538,
//     MultiplyBignumStepFP = 537,
//     SubBignumStepImmediate = 535,
//     SubBignumStepSP = 534,
//     SubBignumStepLP = 533,
//     SubBignumStepFP = 532,
//     AddBignumStepImmediate = 530,
//     AddBignumStepSP = 529,
//     AddBignumStepLP = 528,
//     AddBignumStepFP = 527,
//     Dispatch32BitDifferenceImmediate = 525,
//     Dispatch32BitDifferenceSP = 524,
//     Dispatch32BitDifferenceLP = 523,
//     Dispatch32BitDifferenceFP = 522,
//     Dispatch32BitPlusImmediate = 520,
//     Dispatch32BitPlusSP = 519,
//     Dispatch32BitPlusLP = 518,
//     Dispatch32BitPlusFP = 517,
//     SubImmediate = 515,
//     SubSP = 514,
//     SubLP = 513,
//     SubFP = 512,
//     AddImmediate = 510,
//     AddSP = 509,
//     AddLP = 508,
//     AddFP = 507,
//     LogtestNoPopImmediate = 505,
//     LogtestNoPopSP = 504,
//     LogtestNoPopLP = 503,
//     LogtestNoPopFP = 502,
//     EqNoPopImmediate = 500,
//     EqNoPopSP = 499,
//     EqNoPopLP = 498,
//     EqNoPopFP = 497,
//     LogtestImmediate = 495,
//     LogtestSP = 494,
//     LogtestLP = 493,
//     LogtestFP = 492,
//     EqImmediate = 490,
//     EqSP = 489,
//     EqLP = 488,
//     EqFP = 487,
//     EqlNoPopImmediate = 485,
//     EqlNoPopSP = 484,
//     EqlNoPopLP = 483,
//     EqlNoPopFP = 482,
//     GreaterpNoPopImmediate = 480,
//     GreaterpNoPopSP = 479,
//     GreaterpNoPopLP = 478,
//     GreaterpNoPopFP = 477,
//     LesspNoPopImmediate = 475,
//     LesspNoPopSP = 474,
//     LesspNoPopLP = 473,
//     LesspNoPopFP = 472,
//     EqualNumberNoPopImmediate = 470,
//     EqualNumberNoPopSP = 469,
//     EqualNumberNoPopLP = 468,
//     EqualNumberNoPopFP = 467,
//     EqlImmediate = 465,
//     EqlSP = 464,
//     EqlLP = 463,
//     EqlFP = 462,
//     GreaterpImmediate = 460,
//     GreaterpSP = 459,
//     GreaterpLP = 458,
//     GreaterpFP = 457,
//     LesspImmediate = 455,
//     LesspSP = 454,
//     LesspLP = 453,
//     LesspFP = 452,
//     EqualNumberImmediate = 450,
//     EqualNumberSP = 449,
//     EqualNumberLP = 448,
//     EqualNumberFP = 447,
//     MovemLexicalVarImmediate = 445,
//     MovemLexicalVarSP = 444,
//     MovemLexicalVarLP = 443,
//     MovemLexicalVarFP = 442,
//     PopLexicalVarImmediate = 440,
//     PopLexicalVarSP = 439,
//     PopLexicalVarLP = 438,
//     PopLexicalVarFP = 437,
//     UnifyImmediate = 435,
//     UnifySP = 434,
//     UnifyLP = 433,
//     UnifyFP = 432,
//     BindLocativeToValueImmediate = 430,
//     BindLocativeToValueSP = 429,
//     BindLocativeToValueLP = 428,
//     BindLocativeToValueFP = 427,
//     PStoreContentsImmediate = 425,
//     PStoreContentsSP = 424,
//     PStoreContentsLP = 423,
//     PStoreContentsFP = 422,
//     MemoryWriteImmediate = 420,
//     MemoryWriteSP = 419,
//     MemoryWriteLP = 418,
//     MemoryWriteFP = 417,
//     StoreConditionalImmediate = 415,
//     StoreConditionalSP = 414,
//     StoreConditionalLP = 413,
//     StoreConditionalFP = 412,
//     AshImmediate = 410,
//     AshSP = 409,
//     AshLP = 408,
//     AshFP = 407,
//     PointerDifferenceImmediate = 405,
//     PointerDifferenceSP = 404,
//     PointerDifferenceLP = 403,
//     PointerDifferenceFP = 402,
//     PointerPlusImmediate = 400,
//     PointerPlusSP = 399,
//     PointerPlusLP = 398,
//     PointerPlusFP = 397,
//     AssocImmediate = 395,
//     AssocSP = 394,
//     AssocLP = 393,
//     AssocFP = 392,
//     MemberImmediate = 390,
//     MemberSP = 389,
//     MemberLP = 388,
//     MemberFP = 387,
//     RgetfImmediate = 385,
//     RgetfSP = 384,
//     RgetfLP = 383,
//     RgetfFP = 382,
//     StackBltImmediate = 380,
//     StackBltSP = 379,
//     StackBltLP = 378,
//     StackBltFP = 377,
//     LshcBignumStepImmediate = 375,
//     LshcBignumStepSP = 374,
//     LshcBignumStepLP = 373,
//     LshcBignumStepFP = 372,
//     MultiplyDoubleImmediate = 370,
//     MultiplyDoubleSP = 369,
//     MultiplyDoubleLP = 368,
//     MultiplyDoubleFP = 367,
//     LshImmediate = 365,
//     LshSP = 364,
//     LshLP = 363,
//     LshFP = 362,
//     RotImmediate = 360,
//     RotSP = 359,
//     RotLP = 358,
//     RotFP = 357,
//     LogiorImmediate = 355,
//     LogiorSP = 354,
//     LogiorLP = 353,
//     LogiorFP = 352,
//     LogxorImmediate = 350,
//     LogxorSP = 349,
//     LogxorLP = 348,
//     LogxorFP = 347,
//     LogandImmediate = 345,
//     LogandSP = 344,
//     LogandLP = 343,
//     LogandFP = 342,
//     AluImmediate = 340,
//     AluSP = 339,
//     AluLP = 338,
//     AluFP = 337,
//     MaxImmediate = 335,
//     MaxSP = 334,
//     MaxLP = 333,
//     MaxFP = 332,
//     MinImmediate = 330,
//     MinSP = 329,
//     MinLP = 328,
//     MinFP = 327,
//     RationalQuotientImmediate = 325,
//     RationalQuotientSP = 324,
//     RationalQuotientLP = 323,
//     RationalQuotientFP = 322,
//     RoundImmediate = 320,
//     RoundSP = 319,
//     RoundLP = 318,
//     RoundFP = 317,
//     TruncateImmediate = 315,
//     TruncateSP = 314,
//     TruncateLP = 313,
//     TruncateFP = 312,
//     FloorImmediate = 310,
//     FloorSP = 309,
//     FloorLP = 308,
//     FloorFP = 307,
//     CeilingImmediate = 305,
//     CeilingSP = 304,
//     CeilingLP = 303,
//     CeilingFP = 302,
//     QuotientImmediate = 300,
//     QuotientSP = 299,
//     QuotientLP = 298,
//     QuotientFP = 297,
//     MultiplyImmediate = 295,
//     MultiplySP = 294,
//     MultiplyLP = 293,
//     MultiplyFP = 292,
//     RplacdImmediate = 290,
//     RplacdSP = 289,
//     RplacdLP = 288,
//     RplacdFP = 287,
//     RplacaImmediate = 285,
//     RplacaSP = 284,
//     RplacaLP = 283,
//     RplacaFP = 282,
//     EntryRestNotAccepted = 281,
//     EntryRestAccepted = 280,
//     LoopDecrementTos = 279,
//     Branch = 278,
//     PTagLdb = 277,
//     PLdb = 276,
//     CharLdb = 275,
//     Ldb = 274,
//     Block3ReadAluImmediate = 272,
//     Block3ReadAluSP = 271,
//     Block3ReadAluLP = 270,
//     Block3ReadAluFP = 269,
//     Block2ReadAluImmediate = 267,
//     Block2ReadAluSP = 266,
//     Block2ReadAluLP = 265,
//     Block2ReadAluFP = 264,
//     Block1ReadAluImmediate = 262,
//     Block1ReadAluSP = 261,
//     Block1ReadAluLP = 260,
//     Block1ReadAluFP = 259,
//     Block0ReadAluImmediate = 257,
//     Block0ReadAluSP = 256,
//     Block0ReadAluLP = 255,
//     Block0ReadAluFP = 254,
//     CoprocessorWrite = 253,
//     CoprocessorRead = 252,
//     WriteInternalRegister = 251,
//     ReadInternalRegister = 250,
//     SetSpToAddressSaveTosImmediate = 248,
//     SetSpToAddressSaveTosSP = 247,
//     SetSpToAddressSaveTosLP = 246,
//     SetSpToAddressSaveTosFP = 245,
//     SetSpToAddressImmediate = 243,
//     SetSpToAddressSP = 242,
//     SetSpToAddressLP = 241,
//     SetSpToAddressFP = 240,
//     PushAddressImmediate = 238,
//     PushAddressSP = 237,
//     PushAddressLP = 236,
//     PushAddressFP = 235,
//     SetCdrCode2Immediate = 233,
//     SetCdrCode2SP = 232,
//     SetCdrCode2LP = 231,
//     SetCdrCode2FP = 230,
//     SetCdrCode1Immediate = 228,
//     SetCdrCode1SP = 227,
//     SetCdrCode1LP = 226,
//     SetCdrCode1FP = 225,
//     PointerIncrementImmediate = 223,
//     PointerIncrementSP = 222,
//     PointerIncrementLP = 221,
//     PointerIncrementFP = 220,
//     DecrementImmediate = 218,
//     DecrementSP = 217,
//     DecrementLP = 216,
//     DecrementFP = 215,
//     IncrementImmediate = 213,
//     IncrementSP = 212,
//     IncrementLP = 211,
//     IncrementFP = 210,
//     SetToCdrPushCarImmediate = 208,
//     SetToCdrPushCarSP = 207,
//     SetToCdrPushCarLP = 206,
//     SetToCdrPushCarFP = 205,
//     SetToCdrImmediate = 203,
//     SetToCdrSP = 202,
//     SetToCdrLP = 201,
//     SetToCdrFP = 200,
//     SetToCarImmediate = 198,
//     SetToCarSP = 197,
//     SetToCarLP = 196,
//     SetToCarFP = 195,
//     FinishCallTosApply = 194,
//     FinishCallTos = 193,
//     FinishCallNApply = 192,
//     FinishCallN = 191,
//     Block3ReadTest = 190,
//     Block2ReadTest = 189,
//     Block1ReadTest = 188,
//     Block0ReadTest = 187,
//     Block3ReadShift = 186,
//     Block2ReadShift = 185,
//     Block1ReadShift = 184,
//     Block0ReadShift = 183,
//     Block3Read = 182,
//     Block2Read = 181,
//     Block1Read = 180,
//     Block0Read = 179,
//     MemoryReadAddress = 178,
//     MemoryRead = 177,
//     ReturnSingleTOS = 176,
//     ReturnSingleT = 175,
//     ReturnSingleNIL = 174,
//     UnaryMinusImmediate = 172,
//     UnaryMinusSP = 171,
//     UnaryMinusLP = 170,
//     UnaryMinusFP = 169,
//     PushAddressInstanceVariableOrdered = 168,
//     PushInstanceVariableOrdered = 167,
//     PushAddressInstanceVariable = 166,
//     PushInstanceVariable = 165,
//     UnbindNImmediate = 163,
//     TakeValues = 162,
//     ReturnKludgeImmediate = 160,
//     ReturnKludgeSP = 159,
//     ReturnKludgeLP = 158,
//     ReturnKludgeFP = 157,
//     ReturnMultipleImmediate = 155,
//     ReturnMultipleSP = 154,
//     ReturnMultipleLP = 153,
//     ReturnMultipleFP = 152,
//     PushLocalLogicVariablesImmediate = 150,
//     PushLocalLogicVariablesSP = 149,
//     PushLocalLogicVariablesLP = 148,
//     PushLocalLogicVariablesFP = 147,
//     PushAddressSpRelativeImmediate = 145,
//     PushAddressSpRelativeSP = 144,
//     PushAddressSpRelativeLP = 143,
//     PushAddressSpRelativeFP = 142,
//     PushNNils = 141,
//     PushImmediate = 139,
//     PushSP = 138,
//     PushLP = 137,
//     PushFP = 136,
//     BranchFalseAndNoPopElseNoPopExtraPop = 135,
//     BranchFalseElseNoPop = 134,
//     BranchFalseAndNoPop = 133,
//     BranchFalseNoPop = 132,
//     BranchFalseExtraPop = 131,
//     BranchFalseAndExtraPop = 130,
//     BranchFalseElseExtraPop = 129,
//     BranchFalse = 128,
//     BranchTrueAndNoPopElseNoPopExtraPop = 127,
//     BranchTrueElseNoPop = 126,
//     BranchTrueAndNoPop = 125,
//     BranchTrueNoPop = 124,
//     BranchTrueExtraPop = 123,
//     BranchTrueAndExtraPop = 122,
//     BranchTrueElseExtraPop = 121,
//     BranchTrue = 120,
//     Halt = 119,
//     NoOp = 118,
//     PushGlobalLogicVariable = 117,
//     CheckPreemptRequest = 116,
//     MessageDispatch = 115,
//     GenericDispatch = 114,
//     CatchClose = 113,
//     LocateLocals = 112,
//     TypeMemberNoPop = 111,
//     TypeMember = 110,
//     PluspImmediate = 108,
//     PluspSP = 107,
//     PluspLP = 106,
//     PluspFP = 105,
//     MinuspImmediate = 103,
//     MinuspSP = 102,
//     MinuspLP = 101,
//     MinuspFP = 100,
//     ZeropImmediate = 98,
//     ZeropSP = 97,
//     ZeropLP = 96,
//     ZeropFP = 95,
//     Block3WriteImmediate = 93,
//     Block3WriteSP = 92,
//     Block3WriteLP = 91,
//     Block3WriteFP = 90,
//     Block2WriteImmediate = 88,
//     Block2WriteSP = 87,
//     Block2WriteLP = 86,
//     Block2WriteFP = 85,
//     Block1WriteImmediate = 83,
//     Block1WriteSP = 82,
//     Block1WriteLP = 81,
//     Block1WriteFP = 80,
//     Block0WriteImmediate = 78,
//     Block0WriteSP = 77,
//     Block0WriteLP = 76,
//     Block0WriteFP = 75,
//     PushLexicalVarImmediate = 73,
//     PushLexicalVarSP = 72,
//     PushLexicalVarLP = 71,
//     PushLexicalVarFP = 70,
//     ProcBreakpointImmediate = 68,
//     ProcBreakpointSP = 67,
//     ProcBreakpointLP = 66,
//     ProcBreakpointFP = 65,
//     LogicTailTestImmediate = 63,
//     LogicTailTestSP = 62,
//     LogicTailTestLP = 61,
//     LogicTailTestFP = 60,
//     DereferenceImmediate = 58,
//     DereferenceSP = 57,
//     DereferenceLP = 56,
//     DereferenceFP = 55,
//     TagImmediate = 53,
//     TagSP = 52,
//     TagLP = 51,
//     TagFP = 50,
//     JumpImmediate = 48,
//     JumpSP = 47,
//     JumpLP = 46,
//     JumpFP = 45,
//     StartCallImmediate = 43,
//     StartCallSP = 42,
//     StartCallLP = 41,
//     StartCallFP = 40,
//     EphemeralpImmediate = 38,
//     EphemeralpSP = 37,
//     EphemeralpLP = 36,
//     EphemeralpFP = 35,
//     RestoreBindingStackImmediate = 33,
//     RestoreBindingStackSP = 32,
//     RestoreBindingStackLP = 31,
//     RestoreBindingStackFP = 30,
//     BindLocativeImmediate = 28,
//     BindLocativeSP = 27,
//     BindLocativeLP = 26,
//     BindLocativeFP = 25,
//     SetupForce1dArrayImmediate = 23,
//     SetupForce1dArraySP = 22,
//     SetupForce1dArrayLP = 21,
//     SetupForce1dArrayFP = 20,
//     Setup1dArrayImmediate = 18,
//     Setup1dArraySP = 17,
//     Setup1dArrayLP = 16,
//     Setup1dArrayFP = 15,
//     EndpImmediate = 13,
//     EndpSP = 12,
//     EndpLP = 11,
//     EndpFP = 10,
//     CdrImmediate = 8,
//     CdrSP = 7,
//     CdrLP = 6,
//     CdrFP = 5,
//     CarImmediate = 3,
//     CarSP = 2,
//     CarLP = 1,
//     CarFP = 0,
//     PushPackedInstruction77 = 721,
//     PushPackedInstruction76 = 720,
//     PushPackedInstruction75 = 719,
//     PushPackedInstruction74 = 718,
//     PushPackedInstruction73 = 717,
//     PushPackedInstruction72 = 716,
//     PushPackedInstruction71 = 715,
//     PushPackedInstruction70 = 714,
//     PushPackedInstruction67 = 713,
//     PushPackedInstruction66 = 712,
//     PushPackedInstruction65 = 711,
//     PushPackedInstruction64 = 710,
//     PushPackedInstruction63 = 709,
//     PushPackedInstruction62 = 708,
//     PushPackedInstruction61 = 707,
//     PushPackedInstruction60 = 706,
//     CallGenericPrefetch = 705,
//     CallIndirectPrefetch = 704,
//     CallCompiledOddPrefetch = 703,
//     CallCompiledEvenPrefetch = 702,
//     CallGeneric = 701,
//     CallIndirect = 700,
//     CallCompiledOdd = 699,
//     CallCompiledEven = 698,
//     PushOddPc = 697,
//     PushEvenPc = 696,
//     PushGcForward = 695,
//     PushLogicVariable = 694,
//     PushCharacter = 693,
//     PushBoundLocation = 692,
//     PushSpareImmediate1 = 691,
//     PushPhysicalAddress = 690,
//     PushSparePointer2 = 689,
//     PushSparePointer1 = 688,
//     PushGenericFunction = 687,
//     PushCompiledFunction = 686,
//     PushDynamicClosure = 685,
//     PushLexicalClosure = 684,
//     PushLocative = 683,
//     PushSymbol = 682,
//     PushString = 681,
//     PushArray = 680,
//     PushList = 679,
//     PushNil = 678,
//     PushStringInstance = 677,
//     PushArrayInstance = 676,
//     PushListInstance = 675,
//     PushInstance = 674,
//     PushSpareNumber = 673,
//     PushComplex = 672,
//     PushBigRatio = 671,
//     PushBignum = 670,
//     PushDoubleFloat = 669,
//     PushSingleFloat = 668,
//     PushSmallRatio = 667,
//     PushFixnum = 666,
//     PushElementForward = 665,
//     PushHeaderForward = 664,
//     PushOneQForward = 663,
//     PushExternalValueCellPointer = 662,
//     PushHeaderI = 661,
//     PushHeaderP = 660,
//     PushMonitorForward = 659,
//     PushNull = 658,
// }
