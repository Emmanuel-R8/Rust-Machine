#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case, non_upper_case_globals, unused_assignments, unused_mut)]
#![register_tool(c2rust)]
#![feature(extern_types, label_break_value, register_tool)]
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    static mut stderr: *mut FILE;
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> u32;
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn exit(_: u32) -> !;
    fn _setjmp(_: *mut __jmp_buf_tag) -> u32;
    fn longjmp(_: *mut __jmp_buf_tag, _: u32) -> !;
    fn signal(__sig: u32, __handler: __sighandler_t) -> __sighandler_t;
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn sysconf(__name: u32) -> libc::c_long;
    fn times(__buffer: *mut tms) -> clock_t;
    static mut processor: *mut ProcessorState;
    static mut Trace: bool;
    fn SendInterruptToLifeSupport();
    static mut ivory_dispatch_names: [*const libc::c_char; 0];
    fn InstructionCacheMiss() -> u32;
    static ObjectCdrMask: QWord;
    static ObjectT: QWord;
    static ObjectNIL: QWord;
    fn VirtualMemoryReadBlock(
        vma: isize,
        object: *mut LispObj,
        count: u32,
    ) -> u32;
    fn VirtualMemoryWrite(vma: isize, object: *mut LispObj) -> u32;
    fn VirtualMemoryRead(vma: isize, object: *mut LispObj) -> u32;
    fn VirtualMemoryWriteBlock(
        vma: isize,
        object: *mut LispObj,
        count: u32,
    ) -> u32;
    fn VMCommand(command: u32) -> u32;
    static mut VM: VMState;
    fn TakePreTrap(
        index: isize,
        extra1: *mut LispObj,
        extra2: *mut LispObj,
    ) -> u32;
    fn TakeInstructionException(
        instruction: u32,
        op2: *mut LispObj,
        nextpc: *mut LispObj,
    ) -> u32;
}





#[derive(Copy, Clone)]
#[repr(u32)]
pub struct ProcessorState {
    pub sp: *mut LispObj,
    pub restartsp: *mut LispObj,
    pub fp: *mut LispObj,
    pub lp: *mut LispObj,
    pub pc: PC,
    pub continuation: PC,
    pub InstructionCache: *mut InstructionCacheLine,
    pub StackCache: *mut LispObj,
    pub StackCacheLimit: *mut LispObj,
    pub bar: [_bar; 4],
    pub ListCacheArea: QWord,
    pub ListCacheAddress: QWord,
    pub StructureCacheArea: QWord,
    pub StructureCacheAddress: QWord,
    pub CatchBlockPointer: QWord,
    pub control: isize,
    pub StackCacheBase: isize,
    pub ArrayEventCount: isize,
    pub ListCacheLength: isize,
    pub StructureCacheLength: isize,
    pub BindingStackPointer: isize,
    pub BindingStackLimit: isize,
    pub DeepBoundP: bool,
    pub PreemptRegister: isize,
    pub AluAndRotateControl: isize,
    pub AluOp: Option<isize>,
    pub ByteSize: isize,
    pub ByteRotate: isize,
    pub RotateLatch: isize,
    pub ALUOverflow: bool,
    pub ALUBorrow: bool,
    pub ALULessThan: bool,
    pub EphemeralOldspaceRegister: isize,
    pub ZoneOldspaceRegister: isize,
    pub ControlStackLimit: isize,
    pub ControlStackExtraLimit: isize,
    pub DynamicBindingCacheBase: isize,
    pub DynamicBindingCacheMask: isize,
    pub FEPModeTrapVectorAddress: isize,
    pub MappingTableCache: isize,
    pub MappingTableLength: isize,
    pub running: bool,
    pub instruction_count: libc::c_uint,
}

#[derive(Copy, Clone)]
#[repr(u32)]
pub struct _bar {
    pub address: QWord,
    pub mapped: *mut LispObj,
}

pub type ProcessorState = _ProcessorState;
pub const SuspendSpy: _SuspendType = 1;
pub const SuspendHighPriority: _SuspendType = 3;

pub const TypeNIL: _IvoryType = 20;
pub const TypeLocative: _IvoryType = 25;

pub const PageNotResidentTrapVector: _TrapVectors = 2640;
pub const ErrorTrapVector: _TrapVectors = 2624;
pub const TypeFixnum: _IvoryType = 8;
pub const PullApplyArgsTrapVector: _TrapVectors = 2626;
pub const CycleBindWrite: _MemoryCycleTypes = 3;
pub const MonitorTrapVector: _TrapVectors = 2634;
pub const TypeExternalValueCellPointer: _IvoryType = 4;
pub const TransportTrapVector: _TrapVectors = 2630;
pub const CycleBindRead: _MemoryCycleTypes = 2;

pub const TypeSpareNumber: _IvoryType = 15;
pub const TypeSpareImmediate1: _IvoryType = 33;
pub const TypeSparePointer1: _IvoryType = 30;
pub const TypeListInstance: _IvoryType = 17;
pub const TypeStringInstance: _IvoryType = 19;
pub const TypeArrayInstance: _IvoryType = 18;

pub const DispatchLogicTailTestPop: _IvoryDispatch = 64;
pub const DispatchLogicTailTestLP: _IvoryDispatch = 61;
pub const DispatchLogicTailTestFP: _IvoryDispatch = 60;
pub const DispatchLogicTailTestSP: _IvoryDispatch = 62;
pub const DispatchLogicTailTestImmediate: _IvoryDispatch = 63;
pub const DispatchPushGlobalLogicVariable: _IvoryDispatch = 117;
pub const DispatchPushLocalLogicVariablesPop: _IvoryDispatch = 151;
pub const DispatchPushLocalLogicVariablesLP: _IvoryDispatch = 148;
pub const DispatchPushLocalLogicVariablesFP: _IvoryDispatch = 147;
pub const DispatchPushLocalLogicVariablesSP: _IvoryDispatch = 149;
pub const DispatchPushLocalLogicVariablesImmediate: _IvoryDispatch = 150;
pub const DispatchUnifyPop: _IvoryDispatch = 436;
pub const DispatchUnifyLP: _IvoryDispatch = 433;
pub const DispatchUnifyFP: _IvoryDispatch = 432;
pub const DispatchUnifySP: _IvoryDispatch = 434;
pub const DispatchDereferencePop: _IvoryDispatch = 59;
pub const DispatchDereferenceLP: _IvoryDispatch = 56;
pub const DispatchDereferenceFP: _IvoryDispatch = 55;
pub const DispatchDereferenceSP: _IvoryDispatch = 57;

pub const TypeOddPC: _IvoryType = 39;
pub const DispatchPushOddPc: _IvoryDispatch = 697;
pub const TypeEvenPC: _IvoryType = 38;
pub const DispatchPushEvenPc: _IvoryDispatch = 696;
pub const TypeGCForward: _IvoryType = 37;
pub const DispatchPushGcForward: _IvoryDispatch = 695;
pub const TypeLogicVariable: _IvoryType = 36;
pub const DispatchPushLogicVariable: _IvoryDispatch = 694;
pub const TypeCharacter: _IvoryType = 35;
pub const DispatchPushCharacter: _IvoryDispatch = 693;
pub const TypeBoundLocation: _IvoryType = 34;
pub const DispatchPushBoundLocation: _IvoryDispatch = 692;
pub const DispatchPushSpareImmediate1: _IvoryDispatch = 691;
pub const TypePhysicalAddress: _IvoryType = 32;
pub const DispatchPushPhysicalAddress: _IvoryDispatch = 690;
pub const TypeSparePointer2: _IvoryType = 31;
pub const DispatchPushSparePointer2: _IvoryDispatch = 689;
pub const DispatchPushSparePointer1: _IvoryDispatch = 688;
pub const TypeGenericFunction: _IvoryType = 29;
pub const DispatchPushGenericFunction: _IvoryDispatch = 687;
pub const TypeCompiledFunction: _IvoryType = 28;
pub const DispatchPushCompiledFunction: _IvoryDispatch = 686;
pub const TypeDynamicClosure: _IvoryType = 27;
pub const DispatchPushDynamicClosure: _IvoryDispatch = 685;
pub const TypeLexicalClosure: _IvoryType = 26;
pub const DispatchPushLexicalClosure: _IvoryDispatch = 684;
pub const DispatchPushLocative: _IvoryDispatch = 683;
pub const TypeSymbol: _IvoryType = 24;
pub const DispatchPushSymbol: _IvoryDispatch = 682;
pub const TypeString: _IvoryType = 23;
pub const DispatchPushString: _IvoryDispatch = 681;
pub const TypeArray: _IvoryType = 22;
pub const DispatchPushArray: _IvoryDispatch = 680;
pub const TypeList: _IvoryType = 21;
pub const DispatchPushList: _IvoryDispatch = 679;
pub const DispatchPushNil: _IvoryDispatch = 678;
pub const DispatchPushStringInstance: _IvoryDispatch = 677;
pub const DispatchPushArrayInstance: _IvoryDispatch = 676;
pub const DispatchPushListInstance: _IvoryDispatch = 675;
pub const TypeInstance: _IvoryType = 16;
pub const DispatchPushInstance: _IvoryDispatch = 674;
pub const DispatchPushSpareNumber: _IvoryDispatch = 673;
pub const TypeComplex: _IvoryType = 14;
pub const DispatchPushComplex: _IvoryDispatch = 672;
pub const TypeBigRatio: _IvoryType = 13;
pub const DispatchPushBigRatio: _IvoryDispatch = 671;
pub const TypeBignum: _IvoryType = 12;
pub const DispatchPushBignum: _IvoryDispatch = 670;
pub const TypeDoubleFloat: _IvoryType = 11;
pub const DispatchPushDoubleFloat: _IvoryDispatch = 669;
pub const TypeSingleFloat: _IvoryType = 10;
pub const DispatchPushSingleFloat: _IvoryDispatch = 668;
pub const TypeSmallRatio: _IvoryType = 9;
pub const DispatchPushSmallRatio: _IvoryDispatch = 667;
pub const DispatchPushFixnum: _IvoryDispatch = 666;
pub const CycleDataRead: _MemoryCycleTypes = 0;
pub const DispatchPushExternalValueCellPointer: _IvoryDispatch = 662;
pub const DispatchHalt: _IvoryDispatch = 119;
pub const DispatchNoOp: _IvoryDispatch = 118;
pub const DispatchCheckPreemptRequest: _IvoryDispatch = 116;
pub const DispatchJumpPop: _IvoryDispatch = 49;
pub const DispatchJumpLP: _IvoryDispatch = 46;
pub const DispatchJumpFP: _IvoryDispatch = 45;
pub const DispatchJumpSP: _IvoryDispatch = 47;
pub const DispatchMessageDispatch: _IvoryDispatch = 115;
pub const DispatchGenericDispatch: _IvoryDispatch = 114;
pub const DispatchMergeCdrNoPopLP: _IvoryDispatch = 632;
pub const DispatchMergeCdrNoPopFP: _IvoryDispatch = 631;
pub const DispatchMergeCdrNoPopSP: _IvoryDispatch = 633;
pub const DispatchSetCdrCode2LP: _IvoryDispatch = 231;
pub const DispatchSetCdrCode2FP: _IvoryDispatch = 230;
pub const DispatchSetCdrCode2SP: _IvoryDispatch = 232;
pub const DispatchSetCdrCode1LP: _IvoryDispatch = 226;
pub const DispatchSetCdrCode1FP: _IvoryDispatch = 225;
pub const DispatchSetCdrCode1SP: _IvoryDispatch = 227;
pub const CycleRaw: _MemoryCycleTypes = 11;
pub const DispatchPStoreContentsPop: _IvoryDispatch = 426;
pub const DispatchPStoreContentsLP: _IvoryDispatch = 423;
pub const DispatchPStoreContentsFP: _IvoryDispatch = 422;
pub const DispatchPStoreContentsSP: _IvoryDispatch = 424;
pub const DispatchPStoreContentsImmediate: _IvoryDispatch = 425;
pub const DispatchMemoryWritePop: _IvoryDispatch = 421;
pub const DispatchMemoryWriteLP: _IvoryDispatch = 418;
pub const DispatchMemoryWriteFP: _IvoryDispatch = 417;
pub const DispatchMemoryWriteSP: _IvoryDispatch = 419;
pub const DispatchMemoryWriteImmediate: _IvoryDispatch = 420;
pub const DispatchStoreConditionalPop: _IvoryDispatch = 416;
pub const DispatchStoreConditionalLP: _IvoryDispatch = 413;
pub const DispatchStoreConditionalFP: _IvoryDispatch = 412;
pub const DispatchStoreConditionalSP: _IvoryDispatch = 414;
pub const DispatchStoreConditionalImmediate: _IvoryDispatch = 415;
pub const DispatchSetTagPop: _IvoryDispatch = 610;
pub const DispatchSetTagLP: _IvoryDispatch = 607;
pub const DispatchSetTagFP: _IvoryDispatch = 606;
pub const DispatchSetTagSP: _IvoryDispatch = 608;
pub const DispatchSetTagImmediate: _IvoryDispatch = 609;
pub const DispatchTagPop: _IvoryDispatch = 54;
pub const DispatchTagLP: _IvoryDispatch = 51;
pub const DispatchTagFP: _IvoryDispatch = 50;
pub const DispatchTagSP: _IvoryDispatch = 52;
pub const DispatchTagImmediate: _IvoryDispatch = 53;
pub const DispatchMemoryReadAddress: _IvoryDispatch = 178;
pub const DispatchMemoryRead: _IvoryDispatch = 177;
pub type VMState = _VMState;

#[derive(Copy, Clone)]
pub struct _VMState {
    pub CommandRegister: isize,
    pub AddressRegister: isize,
    pub ExtentRegister: isize,
    pub AttributesRegister: isize,
    pub DestinationRegister: isize,
    pub DataRegister: QWord,
}
pub const VMRegisterData: _VMRegisterNumber = 581;
pub const VMRegisterDestination: _VMRegisterNumber = 580;
pub const VMRegisterAttributes: _VMRegisterNumber = 579;
pub const VMRegisterExtent: _VMRegisterNumber = 578;
pub const VMRegisterAddress: _VMRegisterNumber = 577;
pub const VMRegisterCommand: _VMRegisterNumber = 576;


pub const CoprocessorRegisterMicrosecondClock: _CoprocessorRegisters = 514;

pub const DispatchCoprocessorWrite: _IvoryDispatch = 253;
pub const DispatchCoprocessorRead: _IvoryDispatch = 252;
pub const ALUAdderOp2MinusOne: _ALUAdderOp2 = 3;
pub const ALUAdderOp2Invert: _ALUAdderOp2 = 2;
pub const ALUAdderOp2Zero: _ALUAdderOp2 = 1;
pub const ALUAdderOp2Op2: _ALUAdderOp2 = 0;
pub type ALUAdderOp2 = _ALUAdderOp2;
pub type _ALUAdderOp2 = libc::c_uint;
pub const ALUByteFunctionLdb: _ALUByteFunction = 1;
pub const ALUByteFunctionDpb: _ALUByteFunction = 0;
pub type ALUByteFunction = _ALUByteFunction;
pub type _ALUByteFunction = libc::c_uint;
pub const ALUByteBackgroundZero: _ALUByteBackground = 2;
pub const ALUByteBackgroundRotateLatch: _ALUByteBackground = 1;
pub const ALUByteBackgroundOp1: _ALUByteBackground = 0;
pub type ALUByteBackground = _ALUByteBackground;
pub type _ALUByteBackground = libc::c_uint;
pub const BooleSet: _ALUBooleFunction = 15;
pub const BooleNand: _ALUBooleFunction = 14;
pub const BooleOrC2: _ALUBooleFunction = 13;
pub const BooleC2: _ALUBooleFunction = 12;
pub const BooleOrC1: _ALUBooleFunction = 11;
pub const BooleC1: _ALUBooleFunction = 10;
pub const BooleEquiv: _ALUBooleFunction = 9;
pub const BooleNor: _ALUBooleFunction = 8;
pub const BooleIor: _ALUBooleFunction = 7;
pub const BooleXor: _ALUBooleFunction = 6;
pub const Boole1: _ALUBooleFunction = 5;
pub const BooleAndC2: _ALUBooleFunction = 4;
pub const Boole2: _ALUBooleFunction = 3;
pub const BooleAndC1: _ALUBooleFunction = 2;
pub const BooleAnd: _ALUBooleFunction = 1;
pub const BooleClear: _ALUBooleFunction = 0;
pub type ALUBooleFunction = _ALUBooleFunction;
pub type _ALUBooleFunction = libc::c_uint;
pub const DispatchWriteInternalRegister: _IvoryDispatch = 251;
pub const DispatchReadInternalRegister: _IvoryDispatch = 250;
pub const DispatchPointerIncrementLP: _IvoryDispatch = 221;
pub const DispatchPointerIncrementFP: _IvoryDispatch = 220;
pub const DispatchPointerIncrementSP: _IvoryDispatch = 222;
pub const DispatchPointerDifferencePop: _IvoryDispatch = 406;
pub const DispatchPointerDifferenceLP: _IvoryDispatch = 403;
pub const DispatchPointerDifferenceFP: _IvoryDispatch = 402;
pub const DispatchPointerDifferenceSP: _IvoryDispatch = 404;
pub const DispatchPointerDifferenceImmediate: _IvoryDispatch = 405;
pub const DispatchPointerPlusPop: _IvoryDispatch = 401;
pub const DispatchPointerPlusLP: _IvoryDispatch = 398;
pub const DispatchPointerPlusFP: _IvoryDispatch = 397;
pub const DispatchPointerPlusSP: _IvoryDispatch = 399;
pub const DispatchPointerPlusImmediate: _IvoryDispatch = 400;
pub const DispatchAllocateStructureBlockPop: _IvoryDispatch = 576;
pub const DispatchAllocateStructureBlockLP: _IvoryDispatch = 573;
pub const DispatchAllocateStructureBlockFP: _IvoryDispatch = 572;
pub const DispatchAllocateStructureBlockSP: _IvoryDispatch = 574;
pub const DispatchAllocateStructureBlockImmediate: _IvoryDispatch = 575;
pub const DispatchAllocateListBlockPop: _IvoryDispatch = 556;
pub const DispatchAllocateListBlockLP: _IvoryDispatch = 553;
pub const DispatchAllocateListBlockFP: _IvoryDispatch = 552;
pub const DispatchAllocateListBlockSP: _IvoryDispatch = 554;
pub const DispatchAllocateListBlockImmediate: _IvoryDispatch = 555;
pub const DispatchAluPop: _IvoryDispatch = 341;
pub const DispatchAluLP: _IvoryDispatch = 338;
pub const DispatchAluFP: _IvoryDispatch = 337;
pub const DispatchAluSP: _IvoryDispatch = 339;
pub const DispatchAluImmediate: _IvoryDispatch = 340;
pub const DispatchUnsignedLesspNoPopPop: _IvoryDispatch = 620;
pub const DispatchUnsignedLesspNoPopLP: _IvoryDispatch = 617;
pub const DispatchUnsignedLesspNoPopFP: _IvoryDispatch = 616;
pub const DispatchUnsignedLesspNoPopSP: _IvoryDispatch = 618;
pub const DispatchUnsignedLesspNoPopImmediate: _IvoryDispatch = 619;
pub const DispatchUnsignedLesspPop: _IvoryDispatch = 615;
pub const DispatchUnsignedLesspLP: _IvoryDispatch = 612;
pub const DispatchUnsignedLesspFP: _IvoryDispatch = 611;
pub const DispatchUnsignedLesspSP: _IvoryDispatch = 613;
pub const DispatchUnsignedLesspImmediate: _IvoryDispatch = 614;
pub const DispatchEphemeralpPop: _IvoryDispatch = 39;
pub const DispatchEphemeralpLP: _IvoryDispatch = 36;
pub const DispatchEphemeralpFP: _IvoryDispatch = 35;
pub const DispatchEphemeralpSP: _IvoryDispatch = 37;
pub const DispatchEphemeralpImmediate: _IvoryDispatch = 38;
pub const CycleHeader: _MemoryCycleTypes = 6;
pub const InstructionExceptionVector: _TrapVectors = 2048;
pub const DispatchInstanceLocPop: _IvoryDispatch = 605;
pub const DispatchInstanceLocLP: _IvoryDispatch = 602;
pub const DispatchInstanceLocFP: _IvoryDispatch = 601;
pub const DispatchInstanceLocSP: _IvoryDispatch = 603;
pub const DispatchInstanceLocImmediate: _IvoryDispatch = 604;
pub const CycleDataWrite: _MemoryCycleTypes = 1;
pub const DispatchInstanceSetPop: _IvoryDispatch = 600;
pub const DispatchInstanceSetLP: _IvoryDispatch = 597;
pub const DispatchInstanceSetFP: _IvoryDispatch = 596;
pub const DispatchInstanceSetSP: _IvoryDispatch = 598;
pub const DispatchInstanceSetImmediate: _IvoryDispatch = 599;
pub const DispatchInstanceRefPop: _IvoryDispatch = 595;
pub const DispatchInstanceRefLP: _IvoryDispatch = 592;
pub const DispatchInstanceRefFP: _IvoryDispatch = 591;
pub const DispatchInstanceRefSP: _IvoryDispatch = 593;
pub const DispatchInstanceRefImmediate: _IvoryDispatch = 594;
pub const DispatchPushAddressInstanceVariableOrdered: _IvoryDispatch = 168;
pub const DispatchMovemInstanceVariableOrdered: _IvoryDispatch = 590;
pub const DispatchPopInstanceVariableOrdered: _IvoryDispatch = 589;
pub const DispatchPushInstanceVariableOrdered: _IvoryDispatch = 167;
pub const DispatchPushAddressInstanceVariable: _IvoryDispatch = 166;
pub const DispatchMovemInstanceVariable: _IvoryDispatch = 588;
pub const DispatchPopInstanceVariable: _IvoryDispatch = 587;
pub const DispatchPushInstanceVariable: _IvoryDispatch = 165;
pub const DispatchMovemLexicalVarPop: _IvoryDispatch = 446;
pub const DispatchMovemLexicalVarLP: _IvoryDispatch = 443;
pub const DispatchMovemLexicalVarFP: _IvoryDispatch = 442;
pub const DispatchMovemLexicalVarSP: _IvoryDispatch = 444;
pub const DispatchMovemLexicalVarImmediate: _IvoryDispatch = 445;
pub const DispatchPopLexicalVarPop: _IvoryDispatch = 441;
pub const DispatchPopLexicalVarLP: _IvoryDispatch = 438;
pub const DispatchPopLexicalVarFP: _IvoryDispatch = 437;
pub const DispatchPopLexicalVarSP: _IvoryDispatch = 439;
pub const DispatchPopLexicalVarImmediate: _IvoryDispatch = 440;
pub const DispatchPushLexicalVarPop: _IvoryDispatch = 74;
pub const DispatchPushLexicalVarLP: _IvoryDispatch = 71;
pub const DispatchPushLexicalVarFP: _IvoryDispatch = 70;
pub const DispatchPushLexicalVarSP: _IvoryDispatch = 72;
pub const DispatchPushLexicalVarImmediate: _IvoryDispatch = 73;
pub const DispatchCatchClose: _IvoryDispatch = 113;
pub const DispatchCatchOpen: _IvoryDispatch = 656;
pub const DispatchRestoreBindingStackPop: _IvoryDispatch = 34;
pub const DispatchRestoreBindingStackLP: _IvoryDispatch = 31;
pub const DispatchRestoreBindingStackFP: _IvoryDispatch = 30;
pub const DispatchRestoreBindingStackSP: _IvoryDispatch = 32;
pub const DispatchRestoreBindingStackImmediate: _IvoryDispatch = 33;
pub const DispatchUnbindNPop: _IvoryDispatch = 164;
pub const DispatchUnbindNImmediate: _IvoryDispatch = 163;
pub const DispatchBindLocativePop: _IvoryDispatch = 29;
pub const DispatchBindLocativeLP: _IvoryDispatch = 26;
pub const DispatchBindLocativeFP: _IvoryDispatch = 25;
pub const DispatchBindLocativeSP: _IvoryDispatch = 27;
pub const DispatchBindLocativeToValuePop: _IvoryDispatch = 431;
pub const DispatchBindLocativeToValueLP: _IvoryDispatch = 428;
pub const DispatchBindLocativeToValueFP: _IvoryDispatch = 427;
pub const DispatchBindLocativeToValueSP: _IvoryDispatch = 429;
pub const DispatchBindLocativeToValueImmediate: _IvoryDispatch = 430;
pub const DispatchTakeValues: _IvoryDispatch = 162;
pub const DispatchReturnKludgePop: _IvoryDispatch = 161;
pub const DispatchReturnKludgeImmediate: _IvoryDispatch = 160;
pub type IvoryValueDisposition = _IvoryValueDisposition;
pub type _IvoryValueDisposition = libc::c_uint;
pub const ValueDispositionMultiple: _IvoryValueDisposition = 3;
pub const ValueDispositionReturn: _IvoryValueDisposition = 2;
pub const ValueDispositionValue: _IvoryValueDisposition = 1;
pub const ValueDispositionEffect: _IvoryValueDisposition = 0;
pub const ResetTrapVector: _TrapVectors = 2625;
pub const SuspendReset: _SuspendType = 4;
pub const HighPrioritySequenceBreakTrapVector: _TrapVectors = 2633;
pub const LowPrioritySequenceBreakTrapVector: _TrapVectors = 2632;
pub const SuspendLowPriority: _SuspendType = 2;
pub type SuspendType = _SuspendType;
pub type _SuspendType = libc::c_uint;
pub const SuspendNone: _SuspendType = 0;
pub const DispatchReturnMultiplePop: _IvoryDispatch = 156;
pub const DispatchReturnMultipleImmediate: _IvoryDispatch = 155;
pub const DispatchReturnSingleT: _IvoryDispatch = 175;
pub const DispatchReturnSingleNIL: _IvoryDispatch = 174;
pub const DispatchReturnSingleTOS: _IvoryDispatch = 176;
pub const DispatchLocateLocals: _IvoryDispatch = 112;
pub const CdrNormal: _IvoryCdr = 2;
pub const CdrNil: _IvoryCdr = 1;
pub const CdrNext: _IvoryCdr = 0;
pub const DispatchEntryRestNotAccepted: _IvoryDispatch = 281;
pub const DispatchEntryRestAccepted: _IvoryDispatch = 280;
pub const DispatchFinishCallTosApply: _IvoryDispatch = 194;
pub const DispatchFinishCallTos: _IvoryDispatch = 193;
pub const DispatchFinishCallNApply: _IvoryDispatch = 192;
pub const DispatchFinishCallN: _IvoryDispatch = 191;
pub const InterpreterFunctionVector: _TrapVectors = 2304;
pub const DispatchCallIndirectPrefetch: _IvoryDispatch = 704;
pub const DispatchCallIndirect: _IvoryDispatch = 700;
pub const DispatchCallGenericPrefetch: _IvoryDispatch = 705;
pub const DispatchCallGeneric: _IvoryDispatch = 701;
pub const DispatchCallCompiledOddPrefetch: _IvoryDispatch = 703;
pub const DispatchCallCompiledOdd: _IvoryDispatch = 699;
pub const DispatchCallCompiledEvenPrefetch: _IvoryDispatch = 702;
pub const DispatchCallCompiledEven: _IvoryDispatch = 698;
pub const DispatchStartCallPop: _IvoryDispatch = 44;
pub const DispatchStartCallLP: _IvoryDispatch = 41;
pub const DispatchStartCallFP: _IvoryDispatch = 40;
pub const DispatchStartCallSP: _IvoryDispatch = 42;
pub const DispatchBlock3WritePop: _IvoryDispatch = 94;
pub const DispatchBlock3WriteLP: _IvoryDispatch = 91;
pub const DispatchBlock3WriteFP: _IvoryDispatch = 90;
pub const DispatchBlock3WriteSP: _IvoryDispatch = 92;
pub const DispatchBlock2WritePop: _IvoryDispatch = 89;
pub const DispatchBlock2WriteLP: _IvoryDispatch = 86;
pub const DispatchBlock2WriteFP: _IvoryDispatch = 85;
pub const DispatchBlock2WriteSP: _IvoryDispatch = 87;
pub const DispatchBlock1WritePop: _IvoryDispatch = 84;
pub const DispatchBlock1WriteLP: _IvoryDispatch = 81;
pub const DispatchBlock1WriteFP: _IvoryDispatch = 80;
pub const DispatchBlock1WriteSP: _IvoryDispatch = 82;
pub const DispatchBlock3WriteImmediate: _IvoryDispatch = 93;
pub const DispatchBlock2WriteImmediate: _IvoryDispatch = 88;
pub const DispatchBlock1WriteImmediate: _IvoryDispatch = 83;
pub const DispatchBlock3ReadAluLP: _IvoryDispatch = 270;
pub const DispatchBlock3ReadAluFP: _IvoryDispatch = 269;
pub const DispatchBlock3ReadAluSP: _IvoryDispatch = 271;
pub const DispatchBlock2ReadAluLP: _IvoryDispatch = 265;
pub const DispatchBlock2ReadAluFP: _IvoryDispatch = 264;
pub const DispatchBlock2ReadAluSP: _IvoryDispatch = 266;
pub const DispatchBlock1ReadAluLP: _IvoryDispatch = 260;
pub const DispatchBlock1ReadAluFP: _IvoryDispatch = 259;
pub const DispatchBlock1ReadAluSP: _IvoryDispatch = 261;
pub const DispatchBlock3ReadTest: _IvoryDispatch = 190;
pub const DispatchBlock2ReadTest: _IvoryDispatch = 189;
pub const DispatchBlock1ReadTest: _IvoryDispatch = 188;
pub const DispatchBlock3ReadShift: _IvoryDispatch = 186;
pub const DispatchBlock2ReadShift: _IvoryDispatch = 185;
pub const DispatchBlock1ReadShift: _IvoryDispatch = 184;
pub const DispatchBlock3Read: _IvoryDispatch = 182;
pub const DispatchBlock2Read: _IvoryDispatch = 181;
pub const DispatchBlock1Read: _IvoryDispatch = 180;
pub const DispatchLoopIncrementTosLessThan: _IvoryDispatch = 655;
pub const DispatchLoopDecrementTos: _IvoryDispatch = 279;
pub const DispatchBranchFalseAndNoPopElseNoPopExtraPop: _IvoryDispatch = 135;
pub const DispatchBranchFalseElseNoPop: _IvoryDispatch = 134;
pub const DispatchBranchFalseAndNoPop: _IvoryDispatch = 133;
pub const DispatchBranchFalseNoPop: _IvoryDispatch = 132;
pub const DispatchBranchFalseExtraPop: _IvoryDispatch = 131;
pub const DispatchBranchFalseAndExtraPop: _IvoryDispatch = 130;
pub const DispatchBranchFalseElseExtraPop: _IvoryDispatch = 129;
pub const DispatchBranchFalse: _IvoryDispatch = 128;
pub const DispatchBranchTrueAndNoPopElseNoPopExtraPop: _IvoryDispatch = 127;
pub const DispatchBranchTrueElseNoPop: _IvoryDispatch = 126;
pub const DispatchBranchTrueAndNoPop: _IvoryDispatch = 125;
pub const DispatchBranchTrueNoPop: _IvoryDispatch = 124;
pub const DispatchBranchTrueExtraPop: _IvoryDispatch = 123;
pub const DispatchBranchTrueAndExtraPop: _IvoryDispatch = 122;
pub const DispatchBranchTrueElseExtraPop: _IvoryDispatch = 121;
pub const DispatchBranchTrue: _IvoryDispatch = 120;
pub const TypeHeaderI: _IvoryType = 3;
pub const DispatchAlocLeaderPop: _IvoryDispatch = 586;
pub const DispatchAlocLeaderLP: _IvoryDispatch = 583;
pub const DispatchAlocLeaderFP: _IvoryDispatch = 582;
pub const DispatchAlocLeaderSP: _IvoryDispatch = 584;
pub const DispatchAlocLeaderImmediate: _IvoryDispatch = 585;
pub const DispatchStoreArrayLeaderPop: _IvoryDispatch = 571;
pub const DispatchStoreArrayLeaderLP: _IvoryDispatch = 568;
pub const DispatchStoreArrayLeaderFP: _IvoryDispatch = 567;
pub const DispatchStoreArrayLeaderSP: _IvoryDispatch = 569;
pub const DispatchStoreArrayLeaderImmediate: _IvoryDispatch = 570;
pub const DispatchArrayLeaderPop: _IvoryDispatch = 581;
pub const DispatchArrayLeaderLP: _IvoryDispatch = 578;
pub const DispatchArrayLeaderFP: _IvoryDispatch = 577;
pub const DispatchArrayLeaderSP: _IvoryDispatch = 579;
pub const DispatchArrayLeaderImmediate: _IvoryDispatch = 580;
pub type ArrayElementType = _ArrayElementType;
pub type _ArrayElementType = libc::c_uint;
pub const ArrayElementTypeObject: _ArrayElementType = 3;
pub const ArrayElementTypeBoole: _ArrayElementType = 2;
pub const ArrayElementTypeCharacter: _ArrayElementType = 1;
pub const ArrayElementTypeFixnum: _ArrayElementType = 0;
pub const DispatchFastAset1LP: _IvoryDispatch = 642;
pub const DispatchFastAset1FP: _IvoryDispatch = 641;
pub const DispatchFastAset1SP: _IvoryDispatch = 643;
pub const DispatchFastAref1LP: _IvoryDispatch = 637;
pub const DispatchFastAref1FP: _IvoryDispatch = 636;
pub const DispatchFastAref1SP: _IvoryDispatch = 638;
pub const DispatchSetupForce1dArrayPop: _IvoryDispatch = 24;
pub const DispatchSetupForce1dArrayLP: _IvoryDispatch = 21;
pub const DispatchSetupForce1dArrayFP: _IvoryDispatch = 20;
pub const DispatchSetupForce1dArraySP: _IvoryDispatch = 22;
pub const DispatchSetupForce1dArrayImmediate: _IvoryDispatch = 23;
pub const DispatchSetup1dArrayPop: _IvoryDispatch = 19;
pub const DispatchSetup1dArrayLP: _IvoryDispatch = 16;
pub const DispatchSetup1dArrayFP: _IvoryDispatch = 15;
pub const DispatchSetup1dArraySP: _IvoryDispatch = 17;
pub const DispatchSetup1dArrayImmediate: _IvoryDispatch = 18;
pub const DispatchAloc1Pop: _IvoryDispatch = 566;
pub const DispatchAloc1LP: _IvoryDispatch = 563;
pub const DispatchAloc1FP: _IvoryDispatch = 562;
pub const DispatchAloc1SP: _IvoryDispatch = 564;
pub const DispatchAloc1Immediate: _IvoryDispatch = 565;
pub const DispatchAset1Pop: _IvoryDispatch = 551;
pub const DispatchAset1LP: _IvoryDispatch = 548;
pub const DispatchAset1FP: _IvoryDispatch = 547;
pub const DispatchAset1SP: _IvoryDispatch = 549;
pub const DispatchAset1Immediate: _IvoryDispatch = 550;
pub const DispatchAref1Pop: _IvoryDispatch = 561;
pub const DispatchAref1LP: _IvoryDispatch = 558;
pub const DispatchAref1FP: _IvoryDispatch = 557;
pub const DispatchAref1SP: _IvoryDispatch = 559;
pub const DispatchAref1Immediate: _IvoryDispatch = 560;
pub const DispatchPTagDpb: _IvoryDispatch = 654;
pub const DispatchPDpb: _IvoryDispatch = 653;
pub const DispatchCharDpb: _IvoryDispatch = 652;
pub const DispatchDpb: _IvoryDispatch = 651;
pub const DispatchPTagLdb: _IvoryDispatch = 277;
pub const DispatchPLdb: _IvoryDispatch = 276;
pub const DispatchCharLdb: _IvoryDispatch = 275;
pub const DispatchLdb: _IvoryDispatch = 274;
pub const DispatchStackBltAddressPop: _IvoryDispatch = 650;
pub const DispatchStackBltAddressLP: _IvoryDispatch = 647;
pub const DispatchStackBltAddressFP: _IvoryDispatch = 646;
pub const DispatchStackBltAddressSP: _IvoryDispatch = 648;
pub const DispatchStackBltPop: _IvoryDispatch = 381;
pub const DispatchStackBltLP: _IvoryDispatch = 378;
pub const DispatchStackBltFP: _IvoryDispatch = 377;
pub const DispatchStackBltSP: _IvoryDispatch = 379;
pub const DispatchPushAddressSpRelativePop: _IvoryDispatch = 146;
pub const DispatchPushAddressSpRelativeLP: _IvoryDispatch = 143;
pub const DispatchPushAddressSpRelativeFP: _IvoryDispatch = 142;
pub const DispatchPushAddressSpRelativeSP: _IvoryDispatch = 144;
pub const DispatchPushAddressSpRelativeImmediate: _IvoryDispatch = 145;
pub const DispatchSetSpToAddressSaveTosLP: _IvoryDispatch = 246;
pub const DispatchSetSpToAddressSaveTosFP: _IvoryDispatch = 245;
pub const DispatchSetSpToAddressSaveTosSP: _IvoryDispatch = 247;
pub const DispatchSetSpToAddressLP: _IvoryDispatch = 241;
pub const DispatchSetSpToAddressFP: _IvoryDispatch = 240;
pub const DispatchSetSpToAddressSP: _IvoryDispatch = 242;
pub const DispatchPushAddressLP: _IvoryDispatch = 236;
pub const DispatchPushAddressFP: _IvoryDispatch = 235;
pub const DispatchPushAddressSP: _IvoryDispatch = 237;
pub const DispatchPushNNils: _IvoryDispatch = 141;
pub const DispatchMovemLP: _IvoryDispatch = 627;
pub const DispatchMovemFP: _IvoryDispatch = 626;
pub const DispatchMovemSP: _IvoryDispatch = 628;
pub const DispatchMovemPop: _IvoryDispatch = 630;
pub const DispatchPopLP: _IvoryDispatch = 622;
pub const DispatchPopFP: _IvoryDispatch = 621;
pub const DispatchPopSP: _IvoryDispatch = 623;
pub const DispatchPushFP: _IvoryDispatch = 136;
pub const DispatchPushLP: _IvoryDispatch = 137;
pub const DispatchPushSP: _IvoryDispatch = 138;
pub const DispatchPushPop: _IvoryDispatch = 140;
pub const DispatchPushImmediate: _IvoryDispatch = 139;
pub const DispatchLshcBignumStepPop: _IvoryDispatch = 376;
pub const DispatchLshcBignumStepLP: _IvoryDispatch = 373;
pub const DispatchLshcBignumStepFP: _IvoryDispatch = 372;
pub const DispatchLshcBignumStepSP: _IvoryDispatch = 374;
pub const DispatchLshcBignumStepImmediate: _IvoryDispatch = 375;
pub const DispatchDivideBignumStepPop: _IvoryDispatch = 546;
pub const DispatchDivideBignumStepLP: _IvoryDispatch = 543;
pub const DispatchDivideBignumStepFP: _IvoryDispatch = 542;
pub const DispatchDivideBignumStepSP: _IvoryDispatch = 544;
pub const DispatchDivideBignumStepImmediate: _IvoryDispatch = 545;
pub const DispatchMultiplyBignumStepPop: _IvoryDispatch = 541;
pub const DispatchMultiplyBignumStepLP: _IvoryDispatch = 538;
pub const DispatchMultiplyBignumStepFP: _IvoryDispatch = 537;
pub const DispatchMultiplyBignumStepSP: _IvoryDispatch = 539;
pub const DispatchMultiplyBignumStepImmediate: _IvoryDispatch = 540;
pub const DispatchSubBignumStepPop: _IvoryDispatch = 536;
pub const DispatchSubBignumStepLP: _IvoryDispatch = 533;
pub const DispatchSubBignumStepFP: _IvoryDispatch = 532;
pub const DispatchSubBignumStepSP: _IvoryDispatch = 534;
pub const DispatchSubBignumStepImmediate: _IvoryDispatch = 535;
pub const DispatchAddBignumStepPop: _IvoryDispatch = 531;
pub const DispatchAddBignumStepLP: _IvoryDispatch = 528;
pub const DispatchAddBignumStepFP: _IvoryDispatch = 527;
pub const DispatchAddBignumStepSP: _IvoryDispatch = 529;
pub const DispatchAddBignumStepImmediate: _IvoryDispatch = 530;
pub const DispatchMultiplyDoublePop: _IvoryDispatch = 371;
pub const DispatchMultiplyDoubleLP: _IvoryDispatch = 368;
pub const DispatchMultiplyDoubleFP: _IvoryDispatch = 367;
pub const DispatchMultiplyDoubleSP: _IvoryDispatch = 369;
pub const DispatchMultiplyDoubleImmediate: _IvoryDispatch = 370;
pub const Dispatch32BitDifferencePop: _IvoryDispatch = 526;
pub const Dispatch32BitDifferenceLP: _IvoryDispatch = 523;
pub const Dispatch32BitDifferenceFP: _IvoryDispatch = 522;
pub const Dispatch32BitDifferenceSP: _IvoryDispatch = 524;
pub const Dispatch32BitDifferenceImmediate: _IvoryDispatch = 525;
pub const Dispatch32BitPlusPop: _IvoryDispatch = 521;
pub const Dispatch32BitPlusLP: _IvoryDispatch = 518;
pub const Dispatch32BitPlusFP: _IvoryDispatch = 517;
pub const Dispatch32BitPlusSP: _IvoryDispatch = 519;
pub const Dispatch32BitPlusImmediate: _IvoryDispatch = 520;
pub const DispatchRotPop: _IvoryDispatch = 361;
pub const DispatchRotLP: _IvoryDispatch = 358;
pub const DispatchRotFP: _IvoryDispatch = 357;
pub const DispatchRotSP: _IvoryDispatch = 359;
pub const DispatchRotImmediate: _IvoryDispatch = 360;
pub const DispatchLshPop: _IvoryDispatch = 366;
pub const DispatchLshLP: _IvoryDispatch = 363;
pub const DispatchLshFP: _IvoryDispatch = 362;
pub const DispatchLshSP: _IvoryDispatch = 364;
pub const DispatchLshImmediate: _IvoryDispatch = 365;
pub const DispatchAshPop: _IvoryDispatch = 411;
pub const DispatchAshLP: _IvoryDispatch = 408;
pub const DispatchAshFP: _IvoryDispatch = 407;
pub const DispatchAshSP: _IvoryDispatch = 409;
pub const DispatchAshImmediate: _IvoryDispatch = 410;
pub const DispatchLogxorPop: _IvoryDispatch = 351;
pub const DispatchLogxorLP: _IvoryDispatch = 348;
pub const DispatchLogxorFP: _IvoryDispatch = 347;
pub const DispatchLogxorSP: _IvoryDispatch = 349;
pub const DispatchLogxorImmediate: _IvoryDispatch = 350;
pub const DispatchLogiorPop: _IvoryDispatch = 356;
pub const DispatchLogiorLP: _IvoryDispatch = 353;
pub const DispatchLogiorFP: _IvoryDispatch = 352;
pub const DispatchLogiorSP: _IvoryDispatch = 354;
pub const DispatchLogiorImmediate: _IvoryDispatch = 355;
pub const DispatchLogandPop: _IvoryDispatch = 346;
pub const DispatchLogandLP: _IvoryDispatch = 343;
pub const DispatchLogandFP: _IvoryDispatch = 342;
pub const DispatchLogandSP: _IvoryDispatch = 344;
pub const DispatchLogandImmediate: _IvoryDispatch = 345;
pub const DispatchMinPop: _IvoryDispatch = 331;
pub const DispatchMinLP: _IvoryDispatch = 328;
pub const DispatchMinFP: _IvoryDispatch = 327;
pub const DispatchMinSP: _IvoryDispatch = 329;
pub const DispatchMinImmediate: _IvoryDispatch = 330;
pub const DispatchMaxPop: _IvoryDispatch = 336;
pub const DispatchMaxLP: _IvoryDispatch = 333;
pub const DispatchMaxFP: _IvoryDispatch = 332;
pub const DispatchMaxSP: _IvoryDispatch = 334;
pub const DispatchMaxImmediate: _IvoryDispatch = 335;
pub const DispatchRationalQuotientPop: _IvoryDispatch = 326;
pub const DispatchRationalQuotientLP: _IvoryDispatch = 323;
pub const DispatchRationalQuotientFP: _IvoryDispatch = 322;
pub const DispatchRationalQuotientSP: _IvoryDispatch = 324;
pub const DispatchRationalQuotientImmediate: _IvoryDispatch = 325;
pub const DispatchRoundPop: _IvoryDispatch = 321;
pub const DispatchRoundLP: _IvoryDispatch = 318;
pub const DispatchRoundFP: _IvoryDispatch = 317;
pub const DispatchRoundSP: _IvoryDispatch = 319;
pub const DispatchRoundImmediate: _IvoryDispatch = 320;
pub const DispatchTruncatePop: _IvoryDispatch = 316;
pub const DispatchTruncateLP: _IvoryDispatch = 313;
pub const DispatchTruncateFP: _IvoryDispatch = 312;
pub const DispatchTruncateSP: _IvoryDispatch = 314;
pub const DispatchTruncateImmediate: _IvoryDispatch = 315;
pub const DispatchCeilingPop: _IvoryDispatch = 306;
pub const DispatchCeilingLP: _IvoryDispatch = 303;
pub const DispatchCeilingFP: _IvoryDispatch = 302;
pub const DispatchCeilingSP: _IvoryDispatch = 304;
pub const DispatchCeilingImmediate: _IvoryDispatch = 305;
pub const DispatchFloorPop: _IvoryDispatch = 311;
pub const DispatchFloorLP: _IvoryDispatch = 308;
pub const DispatchFloorFP: _IvoryDispatch = 307;
pub const DispatchFloorSP: _IvoryDispatch = 309;
pub const DispatchFloorImmediate: _IvoryDispatch = 310;
pub const DispatchQuotientPop: _IvoryDispatch = 301;
pub const DispatchQuotientLP: _IvoryDispatch = 298;
pub const DispatchQuotientFP: _IvoryDispatch = 297;
pub const DispatchQuotientSP: _IvoryDispatch = 299;
pub const DispatchQuotientImmediate: _IvoryDispatch = 300;
pub const DispatchMultiplyPop: _IvoryDispatch = 296;
pub const DispatchMultiplyLP: _IvoryDispatch = 293;
pub const DispatchMultiplyFP: _IvoryDispatch = 292;
pub const DispatchMultiplySP: _IvoryDispatch = 294;
pub const DispatchMultiplyImmediate: _IvoryDispatch = 295;
pub const DispatchDecrementLP: _IvoryDispatch = 216;
pub const DispatchDecrementFP: _IvoryDispatch = 215;
pub const DispatchDecrementSP: _IvoryDispatch = 217;
pub const DispatchIncrementLP: _IvoryDispatch = 211;
pub const DispatchIncrementFP: _IvoryDispatch = 210;
pub const DispatchIncrementSP: _IvoryDispatch = 212;
pub const DispatchUnaryMinusPop: _IvoryDispatch = 173;
pub const DispatchUnaryMinusLP: _IvoryDispatch = 170;
pub const DispatchUnaryMinusFP: _IvoryDispatch = 169;
pub const DispatchUnaryMinusSP: _IvoryDispatch = 171;
pub const DispatchUnaryMinusImmediate: _IvoryDispatch = 172;
pub const DispatchSubPop: _IvoryDispatch = 516;
pub const DispatchSubLP: _IvoryDispatch = 513;
pub const DispatchSubFP: _IvoryDispatch = 512;
pub const DispatchSubSP: _IvoryDispatch = 514;
pub const DispatchSubImmediate: _IvoryDispatch = 515;
pub const DispatchAddPop: _IvoryDispatch = 511;
pub const DispatchAddLP: _IvoryDispatch = 508;
pub const DispatchAddFP: _IvoryDispatch = 507;
pub const DispatchAddSP: _IvoryDispatch = 509;
pub const DispatchAddImmediate: _IvoryDispatch = 510;
pub const DispatchZeropPop: _IvoryDispatch = 99;
pub const DispatchZeropLP: _IvoryDispatch = 96;
pub const DispatchZeropFP: _IvoryDispatch = 95;
pub const DispatchZeropSP: _IvoryDispatch = 97;
pub const DispatchZeropImmediate: _IvoryDispatch = 98;
pub const DispatchMinuspPop: _IvoryDispatch = 104;
pub const DispatchMinuspLP: _IvoryDispatch = 101;
pub const DispatchMinuspFP: _IvoryDispatch = 100;
pub const DispatchMinuspSP: _IvoryDispatch = 102;
pub const DispatchMinuspImmediate: _IvoryDispatch = 103;
pub const DispatchPluspPop: _IvoryDispatch = 109;
pub const DispatchPluspLP: _IvoryDispatch = 106;
pub const DispatchPluspFP: _IvoryDispatch = 105;
pub const DispatchPluspSP: _IvoryDispatch = 107;
pub const DispatchPluspImmediate: _IvoryDispatch = 108;
pub const DispatchEndpPop: _IvoryDispatch = 14;
pub const DispatchEndpLP: _IvoryDispatch = 11;
pub const DispatchEndpFP: _IvoryDispatch = 10;
pub const DispatchEndpSP: _IvoryDispatch = 12;
pub const DispatchEndpImmediate: _IvoryDispatch = 13;
pub const DispatchTypeMemberNoPop: _IvoryDispatch = 111;
pub const DispatchTypeMember: _IvoryDispatch = 110;
pub const DispatchLogtestNoPopPop: _IvoryDispatch = 506;
pub const DispatchLogtestNoPopLP: _IvoryDispatch = 503;
pub const DispatchLogtestNoPopFP: _IvoryDispatch = 502;
pub const DispatchLogtestNoPopSP: _IvoryDispatch = 504;
pub const DispatchLogtestNoPopImmediate: _IvoryDispatch = 505;
pub const DispatchLogtestPop: _IvoryDispatch = 496;
pub const DispatchLogtestLP: _IvoryDispatch = 493;
pub const DispatchLogtestFP: _IvoryDispatch = 492;
pub const DispatchLogtestSP: _IvoryDispatch = 494;
pub const DispatchLogtestImmediate: _IvoryDispatch = 495;
pub const DispatchLesspNoPopPop: _IvoryDispatch = 476;
pub const DispatchLesspNoPopLP: _IvoryDispatch = 473;
pub const DispatchLesspNoPopFP: _IvoryDispatch = 472;
pub const DispatchLesspNoPopSP: _IvoryDispatch = 474;
pub const DispatchLesspNoPopImmediate: _IvoryDispatch = 475;
pub const DispatchLesspPop: _IvoryDispatch = 456;
pub const DispatchLesspLP: _IvoryDispatch = 453;
pub const DispatchLesspFP: _IvoryDispatch = 452;
pub const DispatchLesspSP: _IvoryDispatch = 454;
pub const DispatchLesspImmediate: _IvoryDispatch = 455;
pub const DispatchGreaterpNoPopPop: _IvoryDispatch = 481;
pub const DispatchGreaterpNoPopLP: _IvoryDispatch = 478;
pub const DispatchGreaterpNoPopFP: _IvoryDispatch = 477;
pub const DispatchGreaterpNoPopSP: _IvoryDispatch = 479;
pub const DispatchGreaterpNoPopImmediate: _IvoryDispatch = 480;
pub const DispatchGreaterpPop: _IvoryDispatch = 461;
pub const DispatchGreaterpLP: _IvoryDispatch = 458;
pub const DispatchGreaterpFP: _IvoryDispatch = 457;
pub const DispatchGreaterpSP: _IvoryDispatch = 459;
pub const DispatchGreaterpImmediate: _IvoryDispatch = 460;
pub const DispatchEqualNumberNoPopPop: _IvoryDispatch = 471;
pub const DispatchEqualNumberNoPopLP: _IvoryDispatch = 468;
pub const DispatchEqualNumberNoPopFP: _IvoryDispatch = 467;
pub const DispatchEqualNumberNoPopSP: _IvoryDispatch = 469;
pub const DispatchEqualNumberNoPopImmediate: _IvoryDispatch = 470;
pub const DispatchEqualNumberPop: _IvoryDispatch = 451;
pub const DispatchEqualNumberLP: _IvoryDispatch = 448;
pub const DispatchEqualNumberFP: _IvoryDispatch = 447;
pub const DispatchEqualNumberSP: _IvoryDispatch = 449;
pub const DispatchEqualNumberImmediate: _IvoryDispatch = 450;
pub const DispatchEqlNoPopPop: _IvoryDispatch = 486;
pub const DispatchEqlNoPopLP: _IvoryDispatch = 483;
pub const DispatchEqlNoPopFP: _IvoryDispatch = 482;
pub const DispatchEqlNoPopSP: _IvoryDispatch = 484;
pub const DispatchEqlNoPopImmediate: _IvoryDispatch = 485;
pub const DispatchEqlPop: _IvoryDispatch = 466;
pub const DispatchEqlLP: _IvoryDispatch = 463;
pub const DispatchEqlFP: _IvoryDispatch = 462;
pub const DispatchEqlSP: _IvoryDispatch = 464;
pub const DispatchEqlImmediate: _IvoryDispatch = 465;
pub const DispatchEqNoPopPop: _IvoryDispatch = 501;
pub const DispatchEqNoPopLP: _IvoryDispatch = 498;
pub const DispatchEqNoPopFP: _IvoryDispatch = 497;
pub const DispatchEqNoPopSP: _IvoryDispatch = 499;
pub const DispatchEqNoPopImmediate: _IvoryDispatch = 500;
pub const DispatchEqPop: _IvoryDispatch = 491;
pub const DispatchEqLP: _IvoryDispatch = 488;
pub const DispatchEqFP: _IvoryDispatch = 487;
pub const DispatchEqSP: _IvoryDispatch = 489;
pub const DispatchEqImmediate: _IvoryDispatch = 490;
pub const CycleCdr: _MemoryCycleTypes = 9;
pub const DispatchAssocPop: _IvoryDispatch = 396;
pub const DispatchAssocLP: _IvoryDispatch = 393;
pub const DispatchAssocFP: _IvoryDispatch = 392;
pub const DispatchAssocSP: _IvoryDispatch = 394;
pub const DispatchMemberPop: _IvoryDispatch = 391;
pub const DispatchMemberLP: _IvoryDispatch = 388;
pub const DispatchMemberFP: _IvoryDispatch = 387;
pub const DispatchMemberSP: _IvoryDispatch = 389;
pub const DispatchRgetfPop: _IvoryDispatch = 386;
pub const DispatchRgetfLP: _IvoryDispatch = 383;
pub const DispatchRgetfFP: _IvoryDispatch = 382;
pub const DispatchRgetfSP: _IvoryDispatch = 384;
pub const DispatchRplacdPop: _IvoryDispatch = 291;
pub const DispatchRplacdLP: _IvoryDispatch = 288;
pub const DispatchRplacdFP: _IvoryDispatch = 287;
pub const DispatchRplacdSP: _IvoryDispatch = 289;
pub const DispatchRplacdImmediate: _IvoryDispatch = 290;
pub const DispatchRplacaPop: _IvoryDispatch = 286;
pub const DispatchRplacaLP: _IvoryDispatch = 283;
pub const DispatchRplacaFP: _IvoryDispatch = 282;
pub const DispatchRplacaSP: _IvoryDispatch = 284;
pub const DispatchRplacaImmediate: _IvoryDispatch = 285;
pub const DispatchSetToCdrPushCarLP: _IvoryDispatch = 206;
pub const DispatchSetToCdrPushCarFP: _IvoryDispatch = 205;
pub const DispatchSetToCdrPushCarSP: _IvoryDispatch = 207;
pub const DispatchSetToCdrLP: _IvoryDispatch = 201;
pub const DispatchSetToCdrFP: _IvoryDispatch = 200;
pub const DispatchSetToCdrSP: _IvoryDispatch = 202;
pub const DispatchSetToCarLP: _IvoryDispatch = 196;
pub const DispatchSetToCarFP: _IvoryDispatch = 195;
pub const DispatchSetToCarSP: _IvoryDispatch = 197;
pub const DispatchCdrPop: _IvoryDispatch = 9;
pub const DispatchCdrLP: _IvoryDispatch = 6;
pub const DispatchCdrFP: _IvoryDispatch = 5;
pub const DispatchCdrSP: _IvoryDispatch = 7;
pub const DispatchCarPop: _IvoryDispatch = 4;
pub const DispatchCarLP: _IvoryDispatch = 1;
pub const DispatchCarFP: _IvoryDispatch = 0;
pub const DispatchCarSP: _IvoryDispatch = 2;
pub const DispatchBranch: _IvoryDispatch = 278;
pub const DispatchIllegalInstruction: _IvoryDispatch = 723;
pub const DispatchInstructionCacheLookup: _IvoryDispatch = 722;
pub type _MemoryCycleTypes = libc::c_uint;
pub const CycleRawTranslate: _MemoryCycleTypes = 12;
pub const CycleGCCopy: _MemoryCycleTypes = 10;
pub const CycleScavenge: _MemoryCycleTypes = 8;
pub const CycleStructureOffset: _MemoryCycleTypes = 7;
pub const CycleBindWriteNoMonitor: _MemoryCycleTypes = 5;
pub const CycleBindReadNoMonitor: _MemoryCycleTypes = 4;
pub type _IvoryDispatch = libc::c_uint;
pub const DispatchPushPackedInstruction77: _IvoryDispatch = 721;
pub const DispatchPushPackedInstruction76: _IvoryDispatch = 720;
pub const DispatchPushPackedInstruction75: _IvoryDispatch = 719;
pub const DispatchPushPackedInstruction74: _IvoryDispatch = 718;
pub const DispatchPushPackedInstruction73: _IvoryDispatch = 717;
pub const DispatchPushPackedInstruction72: _IvoryDispatch = 716;
pub const DispatchPushPackedInstruction71: _IvoryDispatch = 715;
pub const DispatchPushPackedInstruction70: _IvoryDispatch = 714;
pub const DispatchPushPackedInstruction67: _IvoryDispatch = 713;
pub const DispatchPushPackedInstruction66: _IvoryDispatch = 712;
pub const DispatchPushPackedInstruction65: _IvoryDispatch = 711;
pub const DispatchPushPackedInstruction64: _IvoryDispatch = 710;
pub const DispatchPushPackedInstruction63: _IvoryDispatch = 709;
pub const DispatchPushPackedInstruction62: _IvoryDispatch = 708;
pub const DispatchPushPackedInstruction61: _IvoryDispatch = 707;
pub const DispatchPushPackedInstruction60: _IvoryDispatch = 706;
pub const DispatchPushElementForward: _IvoryDispatch = 665;
pub const DispatchPushHeaderForward: _IvoryDispatch = 664;
pub const DispatchPushOneQForward: _IvoryDispatch = 663;
pub const DispatchPushHeaderI: _IvoryDispatch = 661;
pub const DispatchPushHeaderP: _IvoryDispatch = 660;
pub const DispatchPushMonitorForward: _IvoryDispatch = 659;
pub const DispatchPushNull: _IvoryDispatch = 658;
pub const DispatchHack: _IvoryDispatch = 657;
pub const DispatchStackBltAddressImmediate: _IvoryDispatch = 649;
pub const DispatchFastAset1Pop: _IvoryDispatch = 645;
pub const DispatchFastAset1Immediate: _IvoryDispatch = 644;
pub const DispatchFastAref1Pop: _IvoryDispatch = 640;
pub const DispatchFastAref1Immediate: _IvoryDispatch = 639;
pub const DispatchMergeCdrNoPopPop: _IvoryDispatch = 635;
pub const DispatchMergeCdrNoPopImmediate: _IvoryDispatch = 634;
pub const DispatchMovemImmediate: _IvoryDispatch = 629;
pub const DispatchPopPop: _IvoryDispatch = 625;
pub const DispatchPopImmediate: _IvoryDispatch = 624;
pub const DispatchUnifyImmediate: _IvoryDispatch = 435;
pub const DispatchAssocImmediate: _IvoryDispatch = 395;
pub const DispatchMemberImmediate: _IvoryDispatch = 390;
pub const DispatchRgetfImmediate: _IvoryDispatch = 385;
pub const DispatchStackBltImmediate: _IvoryDispatch = 380;
pub const DispatchBlock3ReadAluPop: _IvoryDispatch = 273;
pub const DispatchBlock3ReadAluImmediate: _IvoryDispatch = 272;
pub const DispatchBlock2ReadAluPop: _IvoryDispatch = 268;
pub const DispatchBlock2ReadAluImmediate: _IvoryDispatch = 267;
pub const DispatchBlock1ReadAluPop: _IvoryDispatch = 263;
pub const DispatchBlock1ReadAluImmediate: _IvoryDispatch = 262;
pub const DispatchBlock0ReadAluPop: _IvoryDispatch = 258;
pub const DispatchBlock0ReadAluImmediate: _IvoryDispatch = 257;
pub const DispatchBlock0ReadAluSP: _IvoryDispatch = 256;
pub const DispatchBlock0ReadAluLP: _IvoryDispatch = 255;
pub const DispatchBlock0ReadAluFP: _IvoryDispatch = 254;
pub const DispatchSetSpToAddressSaveTosPop: _IvoryDispatch = 249;
pub const DispatchSetSpToAddressSaveTosImmediate: _IvoryDispatch = 248;
pub const DispatchSetSpToAddressPop: _IvoryDispatch = 244;
pub const DispatchSetSpToAddressImmediate: _IvoryDispatch = 243;
pub const DispatchPushAddressPop: _IvoryDispatch = 239;
pub const DispatchPushAddressImmediate: _IvoryDispatch = 238;
pub const DispatchSetCdrCode2Pop: _IvoryDispatch = 234;
pub const DispatchSetCdrCode2Immediate: _IvoryDispatch = 233;
pub const DispatchSetCdrCode1Pop: _IvoryDispatch = 229;
pub const DispatchSetCdrCode1Immediate: _IvoryDispatch = 228;
pub const DispatchPointerIncrementPop: _IvoryDispatch = 224;
pub const DispatchPointerIncrementImmediate: _IvoryDispatch = 223;
pub const DispatchDecrementPop: _IvoryDispatch = 219;
pub const DispatchDecrementImmediate: _IvoryDispatch = 218;
pub const DispatchIncrementPop: _IvoryDispatch = 214;
pub const DispatchIncrementImmediate: _IvoryDispatch = 213;
pub const DispatchSetToCdrPushCarPop: _IvoryDispatch = 209;
pub const DispatchSetToCdrPushCarImmediate: _IvoryDispatch = 208;
pub const DispatchSetToCdrPop: _IvoryDispatch = 204;
pub const DispatchSetToCdrImmediate: _IvoryDispatch = 203;
pub const DispatchSetToCarPop: _IvoryDispatch = 199;
pub const DispatchSetToCarImmediate: _IvoryDispatch = 198;
pub const DispatchBlock0ReadTest: _IvoryDispatch = 187;
pub const DispatchBlock0ReadShift: _IvoryDispatch = 183;
pub const DispatchBlock0Read: _IvoryDispatch = 179;
pub const DispatchReturnKludgeSP: _IvoryDispatch = 159;
pub const DispatchReturnKludgeLP: _IvoryDispatch = 158;
pub const DispatchReturnKludgeFP: _IvoryDispatch = 157;
pub const DispatchReturnMultipleSP: _IvoryDispatch = 154;
pub const DispatchReturnMultipleLP: _IvoryDispatch = 153;
pub const DispatchReturnMultipleFP: _IvoryDispatch = 152;
pub const DispatchBlock0WritePop: _IvoryDispatch = 79;
pub const DispatchBlock0WriteImmediate: _IvoryDispatch = 78;
pub const DispatchBlock0WriteSP: _IvoryDispatch = 77;
pub const DispatchBlock0WriteLP: _IvoryDispatch = 76;
pub const DispatchBlock0WriteFP: _IvoryDispatch = 75;
pub const DispatchProcBreakpointPop: _IvoryDispatch = 69;
pub const DispatchProcBreakpointImmediate: _IvoryDispatch = 68;
pub const DispatchProcBreakpointSP: _IvoryDispatch = 67;
pub const DispatchProcBreakpointLP: _IvoryDispatch = 66;
pub const DispatchProcBreakpointFP: _IvoryDispatch = 65;
pub const DispatchDereferenceImmediate: _IvoryDispatch = 58;
pub const DispatchJumpImmediate: _IvoryDispatch = 48;
pub const DispatchStartCallImmediate: _IvoryDispatch = 43;
pub const DispatchBindLocativeImmediate: _IvoryDispatch = 28;
pub const DispatchCdrImmediate: _IvoryDispatch = 8;
pub const DispatchCarImmediate: _IvoryDispatch = 3;
pub type _IvoryType = libc::c_uint;
pub const TypePackedInstruction77: _IvoryType = 63;
pub const TypePackedInstruction76: _IvoryType = 62;
pub const TypePackedInstruction75: _IvoryType = 61;
pub const TypePackedInstruction74: _IvoryType = 60;
pub const TypePackedInstruction73: _IvoryType = 59;
pub const TypePackedInstruction72: _IvoryType = 58;
pub const TypePackedInstruction71: _IvoryType = 57;
pub const TypePackedInstruction70: _IvoryType = 56;
pub const TypePackedInstruction67: _IvoryType = 55;
pub const TypePackedInstruction66: _IvoryType = 54;
pub const TypePackedInstruction65: _IvoryType = 53;
pub const TypePackedInstruction64: _IvoryType = 52;
pub const TypePackedInstruction63: _IvoryType = 51;
pub const TypePackedInstruction62: _IvoryType = 50;
pub const TypePackedInstruction61: _IvoryType = 49;
pub const TypePackedInstruction60: _IvoryType = 48;
pub const TypeCallGenericPrefetch: _IvoryType = 47;
pub const TypeCallIndirectPrefetch: _IvoryType = 46;
pub const TypeCallCompiledOddPrefetch: _IvoryType = 45;
pub const TypeCallCompiledEvenPrefetch: _IvoryType = 44;
pub const TypeCallGeneric: _IvoryType = 43;
pub const TypeCallIndirect: _IvoryType = 42;
pub const TypeCallCompiledOdd: _IvoryType = 41;
pub const TypeCallCompiledEven: _IvoryType = 40;
pub const TypeElementForward: _IvoryType = 7;
pub const TypeHeaderForward: _IvoryType = 6;
pub const TypeOneQForward: _IvoryType = 5;
pub const TypeHeaderP: _IvoryType = 2;
pub const TypeMonitorForward: _IvoryType = 1;
pub const TypeNull: _IvoryType = 0;
pub type _IvoryCdr = libc::c_uint;
pub type _InternalRegisters = libc::c_uint;
pub const InternalRegisterUcodeROMContents: _InternalRegisters = 29;
pub type _CoprocessorRegisters = libc::c_uint;
pub type _TrapVectors = libc::c_uint;
pub const DBUnwindCatchTrapVector: _TrapVectors = 2647;
pub const DBUnwindFrameTrapVector: _TrapVectors = 2646;
pub const DBCacheMissTrapVector: _TrapVectors = 2645;
pub const MemoryBusErrorTrapVector: _TrapVectors = 2644;
pub const UncorrectableMemoryErrorTrapVector: _TrapVectors = 2643;
pub const PageWriteFaultTrapVector: _TrapVectors = 2642;
pub const PageFaultRequestTrapVector: _TrapVectors = 2641;
pub const MessageDispatchTrapVector: _TrapVectors = 2638;
pub const GenericDispatchTrapVector: _TrapVectors = 2636;
pub const FepModeTrapVector: _TrapVectors = 2631;
pub const PreemptRequestTrapVector: _TrapVectors = 2629;
pub const TraceTrapVector: _TrapVectors = 2628;
pub const StackOverflowTrapVector: _TrapVectors = 2627;
pub const GenericDispatchVector: _TrapVectors = 2560;
pub const ArithmeticInstructionExceptionVector: _TrapVectors = 0;
pub type _ALUCondition = libc::c_uint;
pub const ConditionOrLogicVariable: _ALUCondition = 24;
pub const ConditionStackCacheOverflow: _ALUCondition = 23;
pub const ConditionOp1Oldspacep: _ALUCondition = 22;
pub const ConditionFpCoprocessorPresent: _ALUCondition = 21;
pub const ConditionFepMode: _ALUCondition = 20;
pub const ConditionExtraStackMode: _ALUCondition = 19;
pub const ConditionPendingSequenceBreakEnabled: _ALUCondition = 18;
pub const ConditionAddressInStackCache: _ALUCondition = 17;
pub const ConditionCleanupBitsSet: _ALUCondition = 16;
pub const ConditionResultCdrLow: _ALUCondition = 15;
pub const ConditionFalse: _ALUCondition = 14;
pub const ConditionOp2Fixnum: _ALUCondition = 13;
pub const ConditionResultTypeNil: _ALUCondition = 12;
pub const ConditionOp1TypeCondition: _ALUCondition = 11;
pub const ConditionOp1TypeAcceptable: _ALUCondition = 10;
pub const ConditionOp1Ephemeralp: _ALUCondition = 9;
pub const ConditionEq: _ALUCondition = 8;
pub const ConditionHigh25Zero: _ALUCondition = 7;
pub const ConditionZero: _ALUCondition = 6;
pub const ConditionUnsignedLessThan: _ALUCondition = 5;
pub const ConditionUnsignedLessThanOrEqual: _ALUCondition = 4;
pub const ConditionSignedOverflow: _ALUCondition = 3;
pub const ConditionNegative: _ALUCondition = 2;
pub const ConditionSignedLessThan: _ALUCondition = 1;
pub const ConditionSignedLessThanOrEqual: _ALUCondition = 0;
pub type ALUCondition = _ALUCondition;
pub type _VMRegisterNumber = libc::c_uint;

pub static mut suspend: u32 = 0;
static mut trap_environment: jmp_buf = [__jmp_buf_tag {
    __jmpbuf: [0; 8],
    __mask_was_saved: 0,
    __saved_mask: __sigset_t { __val: [0; 16] },
}; 1];
static mut trap_vma: QWord = LispObj {
    parts: {
        let mut init = _LispObj {
            tag: TypeLocative ,
            data: QData {
                u: 0 ,
            },
        };
        init
    },
};
static mut trap_microstate: QWord = LispObj {
    parts: {
        let mut init = _LispObj {
            tag: TypeFixnum ,
            data: QData {
                u: 0 ,
            },
        };
        init
    },
};

pub static mut memory_vma: isize = 0;

pub  fn TakeMemoryTrap(mut vector: u32, mut vma: isize) {
    trap_vma.parts.data.u = vma ;
    longjmp(trap_environment.as_mut_ptr(), vector);
}

pub  fn TakeIllegalOperandTrap(
    mut microstate: u32,
    mut operand: *mut LispObj,
) {
    trap_microstate.parts.data.s = microstate;
    trap_vma
        .parts
        .data
        .u = ((*processor).StackCacheBase)
        .wrapping_add(
            operand.offset_from((*processor).StackCache) ,
        ) ;
    longjmp(trap_environment.as_mut_ptr(), ErrorTrapVector);
}

pub  fn TakeInstructionExceptionTrap() {
    longjmp(trap_environment.as_mut_ptr(), InstructionExceptionVector);
}
 fn segv_handler(mut number: u32) {
    TakeMemoryTrap(PageNotResidentTrapVector, memory_vma);
}
 fn io_handler(mut number: u32) {
    ::std::ptr::write_volatile(
        &mut suspend as *mut u32,
        SuspendSpy,
    );
}

pub  fn SendInterruptToEmulator() {
    ::std::ptr::write_volatile(
        &mut suspend as *mut u32,
        SuspendHighPriority,
    );
}
 fn ProcessSuspend() {
    let mut s: SuspendType = suspend as SuspendType;
    ::std::ptr::write_volatile(
        &mut suspend as *mut u32,
        SuspendNone,
    );
    match s  {
        1 => {
            longjmp(trap_environment.as_mut_ptr(), -(1));
        }
        2 => {
            longjmp(
                trap_environment.as_mut_ptr(),
                LowPrioritySequenceBreakTrapVector,
            );
        }
        3 => {
            longjmp(
                trap_environment.as_mut_ptr(),
                HighPrioritySequenceBreakTrapVector,
            );
        }
        4 => {
            longjmp(trap_environment.as_mut_ptr(), ResetTrapVector);
        }
        _ => {}
    };
}

pub  fn ReadVirtualMemory(
    mut vma: isize,
    mut object: *mut LispObj,
) -> u32 {
    let mut stack_cache_index: isize = vma.wrapping_sub((*processor).StackCacheBase);
    if stack_cache_index < (4  * 0x100) {
        *object = *((*processor).StackCache).offset(stack_cache_index );
        return 0;
    }
    VirtualMemoryRead(vma, object);
    return 0;
}

pub  fn WriteVirtualMemory(
    mut vma: isize,
    mut object: *mut LispObj,
) -> u32 {
    let mut stack_cache_index: isize = vma.wrapping_sub((*processor).StackCacheBase);
    if stack_cache_index < (4  * 0x100) {
        *((*processor).StackCache).offset(stack_cache_index ) = *object;
    }
    VirtualMemoryWrite(vma, object);
    return 0;
}

pub  fn ReadVirtualMemoryBlock(
    mut vma: isize,
    mut object: *mut LispObj,
    mut count: u32,
) -> u32 {
    let mut stack_cache_index: isize = vma.wrapping_sub((*processor).StackCacheBase);
    if stack_cache_index < (4  * 0x100) {
        loop {
            let fresh0 = count;
            count = count - 1;
            if !(fresh0 != 0) {
                break;
            }
            ReadVirtualMemory(vma, object);
            vma = vma.wrapping_add(1);
            object = object.offset(1);
        }
        return 0;
    }
    VirtualMemoryReadBlock(vma, object, count);
    return 0;
}

pub  fn WriteVirtualMemoryBlock(
    mut vma: isize,
    mut object: *mut LispObj,
    mut count: u32,
) -> u32 {
    let mut stack_cache_index: isize = vma.wrapping_sub((*processor).StackCacheBase);
    if stack_cache_index < (4  * 0x100) {
        loop {
            let fresh1 = count;
            count = count - 1;
            if !(fresh1 != 0) {
                break;
            }
            WriteVirtualMemory(vma, object);
            vma = vma.wrapping_add(1);
            object = object.offset(1);
        }
        return 0;
    }
    VirtualMemoryWriteBlock(vma, object, count);
    panic!("Reached end of non-void function without returning");
}

pub  fn StackCacheScrollUp() {
    let mut shadow: isize = 0;
    let mut i: u32 = 0;
    if Trace != 0 {
        fprintf(stderr, b"StackCacheScrollUp\n\0"  );
    }
    VirtualMemoryWriteBlock(
        (*processor).StackCacheBase,
        (*processor).StackCache,
        0x100,
    );
    i = 4  - 1;
    loop {
        let fresh2 = i;
        i = i - 1;
        if !(fresh2 != 0) {
            break;
        }
        memcpy(
            &mut *((*processor).StackCache).offset((i * 0x100) )
                as *mut LispObj ,
            &mut *((*processor).StackCache)
                .offset(((1  + i) * 0x100) )
                as *mut LispObj ,
            ::std::mem::size_of::<[LispObj; 256]>(),
        );
    }
    let ref mut fresh3 = (*processor).fp;
    *fresh3 = (*fresh3).offset(-(0x100  ));
    let ref mut fresh4 = (*processor).sp;
    *fresh4 = (*fresh4).offset(-(0x100  ));
    let ref mut fresh5 = (*processor).lp;
    *fresh5 = (*fresh5).offset(-(0x100  ));
    let ref mut fresh6 = (*processor).StackCacheBase;
    *fresh6 = (*fresh6)
        .wrapping_add(0x100);
}

pub  fn StackCacheScrollDown() {
    let mut i: u32 = 0;
    if Trace != 0 {
        fprintf(stderr, b"StackCacheScrollDown\n\0"  );
    }
    i = 4  - 1;
    loop {
        let fresh7 = i;
        i = i - 1;
        if !(fresh7 != 0) {
            break;
        }
        memcpy(
            &mut *((*processor).StackCache)
                .offset(((1  + i) * 0x100) )
                as *mut LispObj as &str ,
            &mut *((*processor).StackCache).offset((i * 0x100) )
                as *mut LispObj as &str ,
            ::std::mem::size_of::<[LispObj; 256]>(),
        );
    }
    let ref mut fresh8 = (*processor).fp;
    *fresh8 = (*fresh8).offset(0x100  );
    let ref mut fresh9 = (*processor).sp;
    *fresh9 = (*fresh9).offset(0x100  );
    let ref mut fresh10 = (*processor).lp;
    *fresh10 = (*fresh10).offset(0x100  );
    let ref mut fresh11 = (*processor).StackCacheBase;
    *fresh11 = (*fresh11)
        .wrapping_sub(0x100);
    VirtualMemoryReadBlock(
        (*processor).StackCacheBase,
        (*processor).StackCache,
        0x100,
    );
}

pub  fn EphemeralP(mut obj: *mut LispObj) -> Boole {
    return (0xfff4fffff8f7
        & ((1)
            << ((*obj).parts.tag
                & (((1) << 6) - 1)
                    ))  == 0
        && ((*obj).parts.data.u >> 27
            & (((1) << 5) - 1)
                )  == 0) as bool;
}

pub  fn OldspaceAddressP(mut vma: isize) -> Boole {
    let mut ps: *mut ProcessorState = processor;
    let mut zone: u32 = (vma >> 27
        & (((1) << 5) - 1))
       ;
    if zone == 0  {
        return ((vma >> 26
            & (((1) << 1) - 1)
              )
            == (*ps).EphemeralOldspaceRegister
                >> (vma >> 21
                    & (((1) << 6) - 1)
                      )
                & 0o1) as bool
    } else {
        return ((*ps).ZoneOldspaceRegister
            & ((1) << zone)) as Boole
    };
}

pub  fn OldspaceP(mut obj: *mut LispObj) -> Boole {
    return (0xfff4fffff8f7
        & ((1)
            << ((*obj).parts.tag
                & (((1) << 6) - 1)
                    ))  == 0
        && OldspaceAddressP((*obj).parts.data.u )  != 0)
        as bool;
}

pub static mut MemoryActionTable: [[Byte; 64]; 12] = [
    [
        0o14 as u8,
        0o6 as u8,
        0o14 as u8,
        0o10 as u8,
        0o5 as u8,
        0o5 as u8,
        0o5 as u8,
        0o5 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0 as u8,
        0 as u8,
        0o44 as u8,
        0 as u8,
        0o24 as u8,
        0o10 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
    [
        0 as u8,
        0o6 as u8,
        0o10 as u8,
        0o10 as u8,
        0o5 as u8,
        0o5 as u8,
        0o5 as u8,
        0o5 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o44 as u8,
        0 as u8,
        0 as u8,
        0o10 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
    [
        0o4 as u8,
        0o6 as u8,
        0o14 as u8,
        0o10 as u8,
        0o4 as u8,
        0o5 as u8,
        0o5 as u8,
        0o5 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0 as u8,
        0 as u8,
        0o4 as u8,
        0 as u8,
        0o4 as u8,
        0o10 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
    [
        0 as u8,
        0o6 as u8,
        0o10 as u8,
        0o10 as u8,
        0 as u8,
        0o5 as u8,
        0o5 as u8,
        0o5 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o10 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
    [
        0o4 as u8,
        0o5 as u8,
        0o14 as u8,
        0o10 as u8,
        0o4 as u8,
        0o5 as u8,
        0o5 as u8,
        0o5 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0 as u8,
        0 as u8,
        0o4 as u8,
        0 as u8,
        0o4 as u8,
        0o10 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
    [
        0 as u8,
        0o5 as u8,
        0o10 as u8,
        0o10 as u8,
        0 as u8,
        0o5 as u8,
        0o5 as u8,
        0o5 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o10 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
    [
        0o14 as u8,
        0o14 as u8,
        0o4 as u8,
        0 as u8,
        0o14 as u8,
        0o14 as u8,
        0o5 as u8,
        0o14 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o10 as u8,
        0o10 as u8,
        0o14 as u8,
        0o10 as u8,
        0o14 as u8,
        0o10 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o14 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
        0o10 as u8,
    ],
    [
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o5 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o10 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
    [
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0 as u8,
        0 as u8,
        0o4 as u8,
        0 as u8,
        0o4 as u8,
        0o10 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0o4 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
    [
        0 as u8,
        0 as u8,
        0o10 as u8,
        0o10 as u8,
        0 as u8,
        0 as u8,
        0o5 as u8,
        0o5 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o10 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
    [
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0o10 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
    [
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
        0 as u8,
    ],
];

pub  fn MemoryReadInternal(
    mut vma: isize,
    mut object: *mut LispObj,
    mut row: *mut Byte,
) -> isize {
    let mut action: u32 = 0;
    loop {
        ReadVirtualMemory(vma, object);
        action = *row
            .offset(
                ((*object).parts.tag
                    & (((1) << 6) - 1)
                        ) ,
            );
        if action & (0o4  | 0o10) == 0o4  {
            if OldspaceAddressP((*object).parts.data.u ) != 0 {
                TakeMemoryTrap(TransportTrapVector, vma);
            }
        }
        match action & !(0o4) {
            0 => return vma,
            8 => {
                TakeMemoryTrap(ErrorTrapVector, vma);
                break;
            }
            16 => {
                break;
            }
            2 => {
                TakeMemoryTrap(MonitorTrapVector, vma);
            }
            1 => {}
            _ => {
                fprintf(
                    stderr,
                    b"Bad memory action\n\0"  ,
                );
                exit(1);
            }
        }
        vma = (*object).parts.data.u ;
    }
    (*object)
        .parts
        .tag = (*object).parts.tag & 0o300
        | (TypeExternalValueCellPointer
            & ((1) << 6) - 1)
            ;
    return vma;
}

pub  fn StoreContentsInternal(
    mut vma: isize,
    mut object: *mut LispObj,
    mut row: *mut Byte,
) -> u32 {
    let mut dest: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    vma = MemoryReadInternal(vma, &mut dest, row);
    dest
        .parts
        .tag = dest.parts.tag & 0o300
        | (*object).parts.tag
            & (((1) << 6) - 1)
                ;
    dest.parts.data.u = (*object).parts.data.u;
    return WriteVirtualMemory(vma, &mut dest);
}
 fn CarInternal(
    mut l: *mut LispObj,
    mut result: *mut LispObj,
) -> u32 {
    match (*l).parts.tag
        & (((1) << 6) - 1)
    {
        21 => {
            MemoryReadInternal(
                (*l).parts.data.u ,
                result,
                (MemoryActionTable[CycleDataRead  ]).as_mut_ptr(),
            );
            let ref mut fresh12 = (*result).parts.tag;
            *fresh12
                &= (((1) << 6) - 1)
                    ;
            return 0;
        }
        20 => {
            *result = ObjectNIL;
            return 0;
        }
        25 => {
            MemoryReadInternal(
                (*l).parts.data.u ,
                result,
                (MemoryActionTable[CycleDataRead  ]).as_mut_ptr(),
            );
            let ref mut fresh13 = (*result).parts.tag;
            *fresh13
                &= (((1) << 6) - 1)
                    ;
            return 0;
        }
        _ => return 1,
    };
}
 fn CdrInternal(
    mut l: *mut LispObj,
    mut result: *mut LispObj,
) -> u32 {
    let mut cdr: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    let mut vma: isize = 0;
    match (*l).parts.tag
        & (((1) << 6) - 1)
    {
        21 => {
            vma = MemoryReadInternal(
                (*l).parts.data.u ,
                &mut cdr,
                (MemoryActionTable[CycleCdr  ]).as_mut_ptr(),
            );
            match cdr.parts.tag >> 6  {
                1 => {
                    *result = ObjectNIL;
                    return 0;
                }
                0 => {
                    (*result).parts.tag = TypeList ;
                    (*result)
                        .parts
                        .data
                        .u = vma.wrapping_add(1)
                        ;
                    return 0;
                }
                2 => {
                    MemoryReadInternal(
                        vma.wrapping_add(1),
                        result,
                        (MemoryActionTable[CycleDataRead  ])
                            .as_mut_ptr(),
                    );
                    let ref mut fresh14 = (*result).parts.tag;
                    *fresh14
                        &= (((1) << 6) - 1)
                            ;
                    return 0;
                }
                _ => return 1,
            }
        }
        20 => {
            *result = ObjectNIL;
            return 0;
        }
        25 => {
            MemoryReadInternal(
                (*l).parts.data.u ,
                result,
                (MemoryActionTable[CycleDataRead  ]).as_mut_ptr(),
            );
            let ref mut fresh15 = (*result).parts.tag;
            *fresh15
                &= (((1) << 6) - 1)
                    ;
            return 0;
        }
        _ => return 1,
    };
}
 fn CarCdrInternal(
    mut l: *mut LispObj,
    mut car: *mut LispObj,
    mut cdr: *mut LispObj,
) -> u32 {
    let mut templ: QWord = *l;
    if !(((*l).parts.tag ^ TypeLocative)
        & (((1) << 6) - 1)
        == 0) && CarInternal(l, car) == 0
    {
        if CdrInternal(&mut templ, cdr) == 0 {
            return 0;
        }
    }
    return 1;
}
 fn Aref1Internal(
    mut vma: isize,
    mut packing: u32,
    mut offset: u32,
    mut type_0: ArrayElementType,
    mut index: u32,
    mut result: *mut LispObj,
) {
    let mut q: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    if type_0  == ArrayElementTypeObject
        && packing == 0
    {
        MemoryReadInternal(
            vma.wrapping_add(index),
            &mut q,
            (MemoryActionTable[CycleDataRead  ]).as_mut_ptr(),
        );
        (*result).whole = q.whole & !ObjectCdrMask.whole;
        return;
    }
    index += offset;
    MemoryReadInternal(
        vma.wrapping_add((index >> packing)),
        &mut q,
        (MemoryActionTable[CycleDataRead  ]).as_mut_ptr(),
    );
    if !((q.parts.tag ^ TypeFixnum)
        & (((1) << 6) - 1)
        == 0)
    {
        TakeMemoryTrap(
            ErrorTrapVector,
            vma.wrapping_add((index >> packing)),
        );
    }
    if packing != 0 {
        q
            .parts
            .data
            .u = (q.parts.data.u
            >> ((!(-(1) << packing) & index)
                << 5  - packing)
            & (((1) << (32  >> packing)) - 1)
                ) ;
    }
    match type_0  {
        0 => {
            (*result).parts.tag = TypeFixnum ;
            (*result).parts.data = q.parts.data;
        }
        1 => {
            (*result).parts.tag = TypeCharacter ;
            (*result).parts.data = q.parts.data;
        }
        2 => {
            if q.parts.data.u != 0 {
                *result = ObjectT;
            } else {
                *result = ObjectNIL;
            }
        }
        3 => {
            TakeMemoryTrap(
                ErrorTrapVector,
                vma.wrapping_sub(1),
            );
        }
        _ => {}
    };
}
 fn Aset1Internal(
    mut vma: isize,
    mut packing: u32,
    mut offset: u32,
    mut type_0: ArrayElementType,
    mut index: u32,
    mut value: *mut LispObj,
) {
    if type_0  == ArrayElementTypeObject
        && packing == 0
    {
        StoreContentsInternal(
            vma.wrapping_add(index),
            value,
            (MemoryActionTable[CycleDataWrite  ]).as_mut_ptr(),
        );
        return;
    }
    let mut data: isize = (*value).parts.data.u ;
    let mut q: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    match type_0  {
        0 => {
            if !(((*value).parts.tag ^ TypeFixnum)
                & (((1) << 6) - 1)
                     == 0)
            {
                TakeIllegalOperandTrap(0, value);
            }
        }
        1 => {
            if !(((*value).parts.tag ^ TypeCharacter)
                & (((1) << 6) - 1)
                     == 0)
                || (data
                    >> ((!(-(1) << packing) & 0)
                        << 5  - packing)
                    & (((1) << (32  >> packing))
                        - 1))
                   != data
            {
                TakeIllegalOperandTrap(0, value);
            }
        }
        2 => {
            if ((*value).parts.tag ^ TypeNIL)
                & (((1) << 6) - 1)
                     == 0
            {
                data = 0  ;
            } else {
                data = -(1) ;
            }
        }
        3 => {
            TakeMemoryTrap(
                ErrorTrapVector,
                vma.wrapping_sub(1),
            );
        }
        _ => {}
    }
    index += offset;
    vma = MemoryReadInternal(
        vma.wrapping_add((index >> packing)),
        &mut q,
        (MemoryActionTable[CycleDataRead  ]).as_mut_ptr(),
    );
    if !((q.parts.tag ^ TypeFixnum)
        & (((1) << 6) - 1)
        == 0)
    {
        TakeMemoryTrap(ErrorTrapVector, vma);
    }
    if packing != 0 {
        q
            .parts
            .data
            .u = ((data
            & (((1) << (32  >> packing)) - 1)
              )
            << ((!(-(1) << packing) & index)
                << 5  - packing)
            | (q.parts.data.u
                & !((((1) << (32  >> packing))
                    - 1)
                    << ((!(-(1) << packing) & index)
                        << 5  - packing)) )
              ) ;
    } else {
        q.parts.data.u = data ;
    }
    WriteVirtualMemory(vma, &mut q);
}
 fn RecomputeArrayRegister(
    mut areg: *mut LispObj,
    mut count: u32,
) {
    let mut current_block_15: u64;
    match (*areg.offset(-(1) )).parts.tag
        & (((1) << 6) - 1)
    {
        22 | 23 => {
            let mut header: QWord = LispObj {
                parts: _LispObj {
                    tag: 0,
                    data: QData { u: 0 },
                },
            };
            let mut vma: isize = 0;
            vma = MemoryReadInternal(
                (*areg.offset(-(1) )).parts.data.u ,
                &mut header,
                (MemoryActionTable[CycleHeader  ]).as_mut_ptr(),
            );
            if header.parts.tag
                != (0o100  | TypeHeaderI)
            {
                TakeIllegalOperandTrap(0, areg);
            }
            if header.parts.data.u
                & ((1) << 23)  != 0
            {
                TakeInstructionExceptionTrap();
            }
            (*areg.offset(0  ))
                .parts
                .data
                .u = ((count >> 0
                & ((1) << 22) - 1
                & ((1) << 27) - 1)
                << 0)
                | header.parts.data.u
                    & !((((1) << 27) - 1)
                        << 0) ;
            (*areg.offset(1  ))
                .parts
                .data
                .u = vma.wrapping_add(1) ;
            (*areg.offset(2  ))
                .parts
                .data
                .s = (header.parts.data.u >> 0
                & (((1) << 15) - 1)
                    );
            current_block_15 = 2370887241019905314;
        }
        18 | 19 => {
            TakeInstructionExceptionTrap();
            current_block_15 = 16866274528667185640;
        }
        _ => {
            current_block_15 = 16866274528667185640;
        }
    }
    match current_block_15 {
        16866274528667185640 => {
            if (*areg.offset(-(1) )).parts.tag
                & 0o76
                == (TypeSparePointer1  & 0o76)

                || (*areg.offset(-(1) )).parts.tag
                    & (((1) << 6) - 1)

                    == TypeSpareImmediate1
                || (*areg.offset(-(1) )).parts.tag
                    & (((1) << 6) - 1)
                         == TypeSpareNumber
            {
                TakeInstructionExceptionTrap();
            }
            TakeIllegalOperandTrap(0, areg);
        }
        _ => {}
    };
}
 fn LocateInstanceVariableMapped(
    mut map: *mut LispObj,
    mut self_0: *mut LispObj,
    mut n: isize,
) -> isize {
    let mut header: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    let mut offset: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    let mut vma: isize = 0;
    if !(((*map).parts.tag ^ TypeArray)
        & (((1) << 6) - 1)
        == 0)
    {
        TakeIllegalOperandTrap(0, map);
    }
    MemoryReadInternal(
        (*map).parts.data.u ,
        &mut header,
        (MemoryActionTable[CycleHeader  ]).as_mut_ptr(),
    );
    if n
        >= (header.parts.data.u >> 0
            & (((1) << 15) - 1)
                )
    {
        TakeIllegalOperandTrap(0, map);
    }
    MemoryReadInternal(
        ((*map).parts.data.u)
            .wrapping_add(n)
            .wrapping_add(1),
        &mut offset,
        (MemoryActionTable[CycleDataRead  ]).as_mut_ptr(),
    );
    if !((offset.parts.tag ^ TypeFixnum)
        & (((1) << 6) - 1)
        == 0)
    {
        TakeInstructionExceptionTrap();
    }
    if ((*self_0).parts.tag >> 2
        & (((1) << 4) - 1) )

        != TypeInstance  >> 2
            & ((1) << 4) - 1
    {
        TakeIllegalOperandTrap(0, self_0);
    }
    if (*self_0).parts.tag >> 6  == 1 {
        return ((*self_0).parts.data.u).wrapping_add(offset.parts.data.u) ;
    }
    vma = MemoryReadInternal(
        (*self_0).parts.data.u ,
        &mut header,
        (MemoryActionTable[CycleHeader  ]).as_mut_ptr(),
    );
    if vma == (*self_0).parts.data.u {
        (*self_0)
            .parts
            .tag = (*self_0).parts.tag
            | ((1) << 6) ;
    }
    return vma.wrapping_add(offset.parts.data.u);
}
 fn LocateArbitraryInstanceVariable(
    mut instance: *mut LispObj,
    mut offset: *mut LispObj,
) -> isize {
    let mut flavor: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    let mut size: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    let mut vma: isize = 0;
    if ((*instance).parts.tag >> 2
        & (((1) << 4) - 1) )

        != TypeInstance  >> 2
            & ((1) << 4) - 1
    {
        if (*instance).parts.tag & 0o76
            == (TypeSparePointer1  & 0o76)
            || (*instance).parts.tag
                & (((1) << 6) - 1)
                     == TypeSpareImmediate1
            || (*instance).parts.tag
                & (((1) << 6) - 1)
                     == TypeSpareNumber
        {
            TakeInstructionExceptionTrap();
        } else {
            TakeIllegalOperandTrap(0, instance);
        }
    }
    if !(((*offset).parts.tag ^ TypeFixnum)
        & (((1) << 6) - 1)
        == 0)
    {
        TakeIllegalOperandTrap(0, offset);
    }
    vma = MemoryReadInternal(
        (*instance).parts.data.u ,
        &mut flavor,
        (MemoryActionTable[CycleHeader  ]).as_mut_ptr(),
    );
    MemoryReadInternal(
        (flavor.parts.data.u).wrapping_sub(1) ,
        &mut size,
        (MemoryActionTable[CycleDataRead  ]).as_mut_ptr(),
    );
    if !((size.parts.tag ^ TypeFixnum)
        & (((1) << 6) - 1)
        == 0)
        || (*offset).parts.data.u >= size.parts.data.s
    {
        TakeIllegalOperandTrap(0, offset);
    }
    return vma.wrapping_add((*offset).parts.data.u);
}

pub  fn PullApplyArgsQuickly(mut count: u32) -> u32 {
    let mut ps: *mut ProcessorState = processor;
    let mut sp: *mut LispObj = (*ps).sp;
    let fresh16 = sp;
    sp = sp.offset(-1);
    let mut rest: *mut LispObj = &mut *((*ps).StackCache)
        .offset(
            ((*fresh16).parts.data.u).wrapping_sub((*ps).StackCacheBase)
                ,
        ) as *mut LispObj;
    let mut supplied: u32 = ((*ps).control >> 0
        & (((1) << 8) - 1))
       ;
    let mut i: u32 = 0;
    i = 0;
    while i < count {
        if sp >= (*ps).StackCacheLimit {
            let ref mut fresh17 = (*ps).sp;
            *fresh17 = sp;
            StackCacheScrollUp();
            rest = rest.offset(((*ps).sp).offset_from(sp)  );
            sp = (*ps).sp;
        }
        match (*rest).parts.tag >> 6  {
            0 => {
                let fresh18 = rest;
                rest = rest.offset(1);
                sp = sp.offset(1);
                (*sp).whole = (*fresh18).whole & !ObjectCdrMask.whole;
                i += 1;
            }
            1 => {
                sp = sp.offset(1);
                (*sp).whole = (*rest).whole & !ObjectCdrMask.whole;
                (*ps)
                    .control = ((0
                    & ((1) << 1) - 1)
                    << 17)
                    | (*ps).control
                        & !((((1) << 1) - 1)
                            << 17);
                (*ps)
                    .control = ((supplied + i + 1
                    & ((1) << 8) - 1)
                    << 0)
                    | (*ps).control
                        & !((((1) << 8) - 1)
                            << 0);
                let ref mut fresh19 = (*ps).lp;
                *fresh19 = (*fresh19).offset((i + 1) );
                let ref mut fresh20 = (*ps).sp;
                *fresh20 = sp;
                return 0;
            }
            2 => {
                let fresh21 = rest;
                rest = rest.offset(1);
                sp = sp.offset(1);
                (*sp).whole = (*fresh21).whole & !ObjectCdrMask.whole;
                's_165: {
                    match (*rest).parts.tag
                        & (((1) << 6) - 1)

                    {
                        20 => {
                            (*ps)
                                .control = ((0
                                & ((1) << 1)
                                    - 1) << 17)
                                | (*ps).control
                                    & !((((1) << 1)
                                        - 1) << 17);
                            (*ps)
                                .control = ((supplied + i + 1
                                & ((1) << 8)
                                    - 1) << 0)
                                | (*ps).control
                                    & !((((1) << 8)
                                        - 1) << 0);
                            let ref mut fresh22 = (*ps).lp;
                            *fresh22 = (*fresh22)
                                .offset((i + 1) );
                            let ref mut fresh23 = (*ps).sp;
                            *fresh23 = sp;
                            return 0;
                        }
                        21 => {
                            let mut offset: isize = ((*rest).parts.data.u
                              )
                                .wrapping_sub((*ps).StackCacheBase);
                            if offset
                                < (4  * 0x100)
                            {
                                rest = &mut *((*ps).StackCache).offset(offset )
                                    as *mut LispObj;
                                break 's_165;
                            }
                        }
                        _ => {}
                    }
                    sp = sp.offset(1);
                    (*sp).whole = (*rest).whole & !ObjectCdrMask.whole;
                    (*ps)
                        .control = ((supplied + i + 1
                        & ((1) << 8) - 1)
                        << 0)
                        | (*ps).control
                            & !((((1) << 8)
                                - 1) << 0);
                    let ref mut fresh24 = (*ps).lp;
                    *fresh24 = (*fresh24).offset((i + 1) );
                    let ref mut fresh25 = (*ps).sp;
                    *fresh25 = sp;
                    return count - (i + 1);
                }
                break;
            }
            _ => {
                break;
            }
        }
    }
    sp = sp.offset(1);
    (*sp).parts.tag = TypeList ;
    (*sp)
        .parts
        .data
        .u = ((*ps).StackCacheBase)
        .wrapping_add(
            rest.offset_from((*ps).StackCache) ,
        ) ;
    (*ps)
        .control = ((supplied + i
        & ((1) << 8) - 1)
        << 0)
        | (*ps).control
            & !((((1) << 8) - 1)
                << 0);
    let ref mut fresh26 = (*ps).lp;
    *fresh26 = (*fresh26).offset(i );
    let ref mut fresh27 = (*ps).sp;
    *fresh27 = sp;
    return count - i;
}
 fn Unbind() -> u32 {
    let mut old: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    let mut loc: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    let mut bsp: isize = (*processor).BindingStackPointer;
    if ((*processor).control >> 25
        & (((1) << 1) - 1))
         == 0
    {
        return -(1);
    }
    if Trace != 0 {
        fprintf(stderr, b"Unbind\n\0"  );
    }
    MemoryReadInternal(
        bsp,
        &mut old,
        (MemoryActionTable[CycleBindRead  ]).as_mut_ptr(),
    );
    MemoryReadInternal(
        bsp.wrapping_sub(1),
        &mut loc,
        (MemoryActionTable[CycleBindRead  ]).as_mut_ptr(),
    );
    StoreContentsInternal(
        loc.parts.data.u ,
        &mut old,
        (MemoryActionTable[CycleBindWrite  ]).as_mut_ptr(),
    );
    (*processor)
        .BindingStackPointer = bsp.wrapping_sub(2);
    (*processor)
        .control = (((loc.parts.tag >> 6
        & (((1) << 1) - 1) )
         & ((1) << 1) - 1)
        << 25)
        | (*processor).control
            & !((((1) << 1) - 1)
                << 25);
    if ((*processor).PreemptRegister >> 1
        & (((1) << 1) - 1))
         != 0
    {
        let ref mut fresh28 = (*processor).PreemptRegister;
        *fresh28 |= 1;
    }
    return 0;
}

pub  fn ALUFunctionBoole(
    mut ALU: isize,
    mut op1: isize,
    mut op2: isize,
) -> isize {
    match (ALU >> 10
        & (((1) << 4) - 1))
         as ALUBooleFunction
    {
        0 => return 0  ,
        1 => return op1 & op2,
        2 => return !op1 & op2,
        3 => return op2,
        4 => return op1 & !op2,
        5 => return op1,
        6 => return op1 ^ op2,
        7 => return op1 | op2,
        8 => return !(op1 | op2),
        9 => return !(op1 ^ op2),
        10 => return !op1,
        11 => return !op1 | op2,
        12 => return !op2,
        13 => return op1 | !op2,
        14 => return !(op1 & op2),
        15 => return -(1) ,
        _ => {}
    }
    panic!("Reached end of non-void function without returning");
}

pub  fn ALUFunctionByte(
    mut ALU: isize,
    mut op1: isize,
    mut op2: isize,
) -> isize {
    let mut background: isize = 0;
    let mut rotate: u32 = (*processor).ByteRotate;
    let mut size: u32 = (*processor).ByteSize;
    let mut rotated: u32 = 0;
    let mut mask: u32 = 0;
    match (ALU >> 10
        & (((1) << 2) - 1))
         as ALUByteBackground
    {
        0 => {
            background = op1;
        }
        1 => {
            background = (*processor).RotateLatch;
        }
        2 => {
            background = 0  ;
        }
        _ => {}
    }
    match (ALU >> 13
        & (((1) << 1) - 1))
         as ALUByteFunction
    {
        0 => {
            rotated = (op2 << rotate);
            mask = !(-(2) << size) << rotate;
            if (ALU >> 12
                & (((1) << 1) - 1)
                  )  != 0
            {
                (*processor)
                    .RotateLatch = (rotated
                    | op2
                        >> (32  - rotate & 0x1f))
                    ;
            }
            return (rotated & mask)
                | background & !mask;
        }
        1 => {
            rotated = (op2
                >> (32  - rotate & 0x1f));
            mask = !(-(2) << size);
            if (ALU >> 12
                & (((1) << 1) - 1)
                  )  != 0
            {
                (*processor).RotateLatch = rotated | op2 << rotate;
            }
            return (rotated & mask)
                | background & !mask;
        }
        _ => {}
    }
    panic!("Reached end of non-void function without returning");
}

pub  fn ALUFunctionAdder(
    mut ALU: isize,
    mut op1: isize,
    mut op2: isize,
) -> isize {
    let mut sum: u32 = 0;
    let mut current_block_2: u64;
    match (ALU >> 11
        & (((1) << 2) - 1))
         as ALUAdderOp2
    {
        1 => {
            op2 = 0  ;
            current_block_2 = 14966271813643266636;
        }
        2 => {
            current_block_2 = 14966271813643266636;
        }
        3 => {
            current_block_2 = 13929697287015793708;
        }
        0 | _ => {
            current_block_2 = 11875828834189669668;
        }
    }
    match current_block_2 {
        14966271813643266636 => {
            op2 = op2.wrapping_neg();
            current_block_2 = 13929697287015793708;
        }
        _ => {}
    }
    match current_block_2 {
        13929697287015793708 => {
            op2 = -(1) ;
        }
        _ => {}
    }
    sum = op1
        .wrapping_add(op2)
        .wrapping_add(
            (ALU >> 10
                & (((1) << 1) - 1)
                  ),
        );
    (*processor)
        .ALUOverflow = ((sum >= op1)
        != (op2 >= 0))
        as Boole;
    (*processor)
        .ALUBorrow = ((op1 ) < op2 )
        as Boole;
    (*processor).ALULessThan = (op1 < op2) as bool;
    return sum ;
}

pub  fn ALUFunctionMultiplyDivide(
    mut ALU: isize,
    mut op1: isize,
    mut op2: isize,
) -> isize {
    fprintf(stderr, b"Bullshit\n\0"  );
    panic!("Reached end of non-void function without returning");
}

pub static mut ALUFunctionClass: [Option::<fn() -> isize>; 4] = unsafe {
    [
        ::std::mem::transmute::<
            Option::<fn(isize, isize, isize) -> isize>,
            Option::<fn() -> isize>,
        >(
            Some(
                ALUFunctionBoole
                    as fn(isize, isize, isize) -> isize,
            ),
        ),
        ::std::mem::transmute::<
            Option::<fn(isize, isize, isize) -> isize>,
            Option::<fn() -> isize>,
        >(
            Some(
                ALUFunctionByte
                    as fn(isize, isize, isize) -> isize,
            ),
        ),
        ::std::mem::transmute::<
            Option::<fn(isize, isize, isize) -> isize>,
            Option::<fn() -> isize>,
        >(
            Some(
                ALUFunctionAdder
                    as fn(isize, isize, isize) -> isize,
            ),
        ),
        ::std::mem::transmute::<
            Option::<fn(isize, isize, isize) -> isize>,
            Option::<fn() -> isize>,
        >(
            Some(
                ALUFunctionMultiplyDivide
                    as fn(isize, isize, isize) -> isize,
            ),
        ),
    ]
};

pub  fn ALUComputeCondition(
    mut ALU: isize,
    mut op1: *mut LispObj,
    mut op2: *mut LispObj,
    mut result: u32,
) -> Boole {
    let mut overflow: bool = (*processor).ALUOverflow;
    let mut borrow: bool = (*processor).ALUBorrow;
    let mut lessthan: bool = (*processor).ALULessThan;
    match (ALU >> 16
        & (((1) << 5) - 1))
         as ALUCondition
    {
        0 => {
            return (lessthan  != 0 || result == 0)
                as Boole;
        }
        1 => return lessthan,
        2 => return (result < 0) as bool,
        3 => return overflow,
        4 => return (borrow  != 0 || result == 0) as bool,
        5 => return borrow,
        6 => return (result == 0) as bool,
        7 => {
            return (result >> 7
                & ((1) << 25) - 1  == 0)
                as bool;
        }
        8 => {
            return (((*op1).whole ^ (*op2).whole) & !ObjectCdrMask.whole
                == 0) as bool;
        }
        9 => return EphemeralP(op1),
        12 => {
            return (((*op1).parts.tag ^ TypeNIL)
                & (((1) << 6) - 1)
                     == 0)
                as Boole;
        }
        13 => {
            return (((*op2).parts.tag ^ TypeFixnum)
                & (((1) << 6) - 1)
                     == 0)
                as Boole;
        }
        14 => return false,
        15 => {
            return ((*op1).parts.tag >> 6
                & 0o1) as Boole;
        }
        16 => {
            return ((*processor).control >> 24
                & (((1) << 3) - 1)
                  ) as bool;
        }
        17 => {
            return (((*op1).parts.data.u)
                .wrapping_sub((*processor).StackCacheBase)
                < (4  * 0x100))
                as bool;
        }
        19 => {
            return (((*processor).control >> 30
                & (((1) << 2) - 1)
                  )  == 0) as bool;
        }
        20 => {
            return (((*processor).control >> 30
                & (((1) << 2) - 1)
                  )  == 3)
                as Boole;
        }
        21 => return false,
        22 => return OldspaceP(op1),
        18 | 10 | 11 | 23 | 24 | _ => {
            fprintf(
                stderr,
                b"Unimplemented Condition %d\n\0"  ,
                (ALU >> 16
                    & (((1) << 5) - 1)
                      )  as ALUCondition ,
            );
        }
    }
    panic!("Reached end of non-void function without returning");
}

pub  fn IncrementPC(mut pc: *mut LispObj, mut offset: u32) {
    let ref mut fresh29 = (*pc).parts.data.u;
    *fresh29 = (*fresh29 )
        .wrapping_add((offset >> 1) )
        ;
    if (*pc).parts.tag & 1 != 0 {
        if offset & 1  != 0 {
            (*pc).parts.tag = TypeEvenPC ;
            let ref mut fresh30 = (*pc).parts.data.u;
            *fresh30 = (*fresh30).wrapping_add(1);
        } else {
            (*pc).parts.tag = TypeOddPC ;
        }
    } else if offset & 1  != 0 {
        (*pc).parts.tag = TypeOddPC ;
    } else {
        (*pc).parts.tag = TypeEvenPC ;
    };
}

pub  fn InstructionSequencer() -> u32 {
    let mut control_0: isize = 0;
    let mut vma_5: isize = 0;
    let mut length_0: u32 = 0;
    let mut control: isize = 0;
    let mut vma_4: isize = 0;
    let mut length: u32 = 0;
    let mut supplied_0: u32 = 0;
    let mut minimum_0: u32 = 0;
    let mut maximum_0: u32 = 0;
    let mut supplied: u32 = 0;
    let mut minimum: u32 = 0;
    let mut maximum: u32 = 0;
    let mut current_block: u64;
    let mut cp: *mut InstructionCacheLine = 0 as *mut InstructionCacheLine;
    let mut ps: *mut ProcessorState = processor;
    let mut sp: *mut LispObj = (*ps).sp;
    let mut restartsp: *mut LispObj = (*ps).sp;
    let mut fp: *mut LispObj = (*ps).fp;
    let mut lp: *mut LispObj = (*ps).lp;
    let mut pc: PC = (*ps).pc;
    let mut op1: *mut LispObj = 0 as *mut LispObj;
    let mut op2: *mut LispObj = 0 as *mut LispObj;
    let mut scratch_representation: QWord = LispObj {
        parts: _LispObj {
            tag: 0,
            data: QData { u: 0 },
        },
    };
    let mut scratch: *mut LispObj = &mut scratch_representation;
    let mut immediate: QWord = LispObj {
        parts: {
            let mut init = _LispObj {
                tag: TypeFixnum ,
                data: QData {
                    u: 0 ,
                },
            };
            init
        },
    };
    let mut bar: *mut _bar = 0 as *mut _bar;
    let mut i: u32 = 0;
    let mut old_io_handler: Option::<fn() -> ()> = ::std::mem::transmute::<
        __sighandler_t,
        Option::<fn() -> ()>,
    >(
        signal(
            29,
            Some(io_handler as fn(u32) -> ()),
        ),
    );
    let mut old_segv_handler: Option::<fn() -> ()> = ::std::mem::transmute::<
        __sighandler_t,
        Option::<fn() -> ()>,
    >(
        signal(
            11,
            Some(segv_handler as fn(u32) -> ()),
        ),
    );
    let mut vector: u32 = 0;
    vector = _setjmp(trap_environment.as_mut_ptr());
    if vector != 0 {
        let ref mut fresh31 = (*ps).sp;
        *fresh31 = sp;
        let ref mut fresh32 = (*ps).restartsp;
        *fresh32 = restartsp;
        let ref mut fresh33 = (*ps).fp;
        *fresh33 = fp;
        let ref mut fresh34 = (*ps).lp;
        *fresh34 = lp;
        (*ps).pc = pc;
        match vector {
            -1 => {
                if Trace != 0 {
                    fprintf(stderr, b"Spy\n\0"  );
                }
                return 3;
            }
            2633 | 2632 | 2625 => {
                if Trace != 0 {
                    fprintf(
                        stderr,
                        b"%08x Trap at PC %08x, VMA %08x, #%d\n\0"
                            ,
                        vector,
                        pc.parts.data.u,
                        trap_vma.parts.data.u,
                        (*ps).instruction_count,
                    );
                }
                if TakePreTrap(vector , 0 as *mut LispObj, 0 as *mut LispObj)
                    == 0
                {
                    current_block = 11218981141702897965;
                } else {
                    current_block = 9627623479216730126;
                }
            }
            2624 => {
                if Trace != 0 {
                    fprintf(
                        stderr,
                        b"Illegal operand at PC %08x, VMA %08x, #%d\n\0"
                            ,
                        pc.parts.data.u,
                        trap_vma.parts.data.u,
                        (*ps).instruction_count,
                    );
                }
                if (trap_vma.parts.data.u
                    ^ (0xf8040000 )
                        .wrapping_add(ResetTrapVector))
                    & 0xffffff00  == 0
                {
                    current_block = 11218981141702897965;
                } else if TakePreTrap(
                    vector ,
                    &mut trap_microstate,
                    &mut trap_vma,
                ) == 0
                {
                    current_block = 11218981141702897965;
                } else {
                    current_block = 9627623479216730126;
                }
            }
            2634 | 2630 | 2640 => {
                if Trace != 0 {
                    fprintf(
                        stderr,
                        b"%08x Trap at PC %08x, VMA %08x, #%d\n\0"
                            ,
                        vector,
                        pc.parts.data.u,
                        trap_vma.parts.data.u,
                        (*ps).instruction_count,
                    );
                }
                if (trap_vma.parts.data.u
                    ^ (0xf8040000 )
                        .wrapping_add(ResetTrapVector))
                    & 0xffffff00  == 0
                {
                    current_block = 11218981141702897965;
                } else if TakePreTrap(
                    vector ,
                    &mut trap_vma,
                    0 as *mut LispObj,
                ) == 0
                {
                    current_block = 11218981141702897965;
                } else {
                    current_block = 9627623479216730126;
                }
            }
            2048 => {
                if Trace != 0 {
                    fprintf(
                        stderr,
                        b"Instruction exception at PC %08x, #%d\n\0"
                            ,
                        pc.parts.data.u,
                        (*ps).instruction_count,
                    );
                }
                if TakeInstructionException(
                    (*cp).instruction,
                    op2,
                    &mut (*cp).next_pc,
                ) == 0
                {
                    current_block = 11218981141702897965;
                } else {
                    current_block = 9627623479216730126;
                }
            }
            _ => {
                fprintf(
                    stderr,
                    b"Bad Trap code %o\n\0"  ,
                    vector,
                );
                exit(1);
            }
        }
        match current_block {
            11218981141702897965 => {}
            _ => {
                sp = (*ps).sp;
                restartsp = (*ps).restartsp;
                fp = (*ps).fp;
                lp = (*ps).lp;
                pc = (*ps).pc;
                current_block = 13269259571821644417;
            }
        }
    } else {
        current_block = 13269259571821644417;
    }
    'c_3562: loop {
        match current_block {
            11218981141702897965 => {
                (*ps).running = false;
                break;
            }
            _ => {
                if !((pc.parts.tag ^ TypeNIL)
                    & (((1) << 6) - 1)
                         == 0)
                {
                    if !((pc.parts.tag ^ TypeEvenPC)
                        & (((1) << 6) - 1)
                             == 0
                        || (pc.parts.tag ^ TypeOddPC)
                            & (((1) << 6)
                                - 1)
                            == 0)
                    {
                        current_block = 5731074241326334034;
                    } else {
                        if Trace != 0 {
                            fprintf(
                                stderr,
                                b"Icache lookup at PC %08x(%s)\n\0"
                                    ,
                                pc.parts.data.u,
                                if pc.parts.tag & 1 != 0 {
                                    b"Odd \0"
                                } else {
                                    b"Even\0"
                                },
                            );
                        }
                        cp = ((*ps).InstructionCache)
                            .offset(
                                (pc.parts.data.u << 1
                                    & (2048  - 1) )
                                    ,
                            )
                            .offset(
                                (pc.parts.tag & 1) ,
                            );
                        if (*cp).pc.parts.data.u != pc.parts.data.u {
                            let ref mut fresh36 = (*ps).sp;
                            *fresh36 = sp;
                            let ref mut fresh37 = (*ps).restartsp;
                            *fresh37 = restartsp;
                            let ref mut fresh38 = (*ps).fp;
                            *fresh38 = fp;
                            let ref mut fresh39 = (*ps).lp;
                            *fresh39 = lp;
                            (*ps).pc = pc;
                            if InstructionCacheMiss() != 0 {
                                current_block = 11218981141702897965;
                                continue;
                            }
                            sp = (*ps).sp;
                            restartsp = (*ps).restartsp;
                            fp = (*ps).fp;
                            lp = (*ps).lp;
                            pc = (*ps).pc;
                        }
                        'c_3383: loop {
                            restartsp = sp;
                            if suspend != 0 {
                                ProcessSuspend();
                            }
                            if (*cp).code
                                != DispatchInstructionCacheLookup
                            {
                                let ref mut fresh35 = (*ps).instruction_count;
                                *fresh35 = (*fresh35).wrapping_add(1);
                                if Trace != 0 {
                                    fprintf(
                                        stderr,
                                        b"PC %08x(%s), SP: %08lx, TOS: %x.%02x.%08x, %s(%d)\n\0"
                                             ,
                                        (*cp).pc.parts.data.u,
                                        if (*cp).pc.parts.tag & 1
                                            != 0
                                        {
                                            b"Odd \0"
                                        } else {
                                            b"Even\0"
                                        },
                                        ((*ps).StackCacheBase)
                                            .wrapping_add(
                                                sp.offset_from((*ps).StackCache)
                                                  ,
                                            ),
                                        (*sp).parts.tag >> 6,
                                        (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1) ,
                                        (*sp).parts.data.u,
                                        *ivory_dispatch_names
                                            .as_mut_ptr()
                                            .offset((*cp).code ),
                                        (*cp).operand,
                                    );
                                }
                            }
                            match (*cp).code {
                                722 => {
                                    current_block = 13269259571821644417;
                                    continue 'c_3562;
                                }
                                278 => {
                                    current_block = 8171028261534490456;
                                    break;
                                }
                                2 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9508502311343125869;
                                }
                                0 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9508502311343125869;
                                }
                                1 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9508502311343125869;
                                }
                                4 => {
                                    let fresh40 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh40;
                                    current_block = 9508502311343125869;
                                }
                                7 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2872334340672008580;
                                }
                                5 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2872334340672008580;
                                }
                                6 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2872334340672008580;
                                }
                                9 => {
                                    let fresh41 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh41;
                                    current_block = 2872334340672008580;
                                }
                                197 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15321816652064063775;
                                }
                                195 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15321816652064063775;
                                }
                                196 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15321816652064063775;
                                }
                                202 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14957879348977399331;
                                }
                                200 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14957879348977399331;
                                }
                                201 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14957879348977399331;
                                }
                                207 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5511877782510663281;
                                }
                                205 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5511877782510663281;
                                }
                                206 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5511877782510663281;
                                }
                                285 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 5920643169005956685;
                                }
                                284 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5920643169005956685;
                                }
                                282 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5920643169005956685;
                                }
                                283 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5920643169005956685;
                                }
                                286 => {
                                    let fresh42 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh42;
                                    current_block = 5920643169005956685;
                                }
                                290 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 10194589593280242392;
                                }
                                289 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10194589593280242392;
                                }
                                287 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10194589593280242392;
                                }
                                288 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10194589593280242392;
                                }
                                291 => {
                                    let fresh43 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh43;
                                    current_block = 10194589593280242392;
                                }
                                384 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 4888879662720751705;
                                }
                                382 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 4888879662720751705;
                                }
                                383 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 4888879662720751705;
                                }
                                386 => {
                                    let fresh44 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh44;
                                    current_block = 4888879662720751705;
                                }
                                389 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2385072656283107554;
                                }
                                387 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2385072656283107554;
                                }
                                388 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2385072656283107554;
                                }
                                391 => {
                                    let fresh45 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh45;
                                    current_block = 2385072656283107554;
                                }
                                394 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 127256532292687007;
                                }
                                392 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 127256532292687007;
                                }
                                393 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 127256532292687007;
                                }
                                396 => {
                                    let fresh46 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh46;
                                    current_block = 127256532292687007;
                                }
                                490 => {
                                    if ((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && (*sp).parts.data.s == (*cp).operand
                                    {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                489 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10878888195156817878;
                                }
                                487 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10878888195156817878;
                                }
                                488 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10878888195156817878;
                                }
                                491 => {
                                    let fresh47 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh47;
                                    current_block = 10878888195156817878;
                                }
                                500 => {
                                    if ((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && (*sp).parts.data.s == (*cp).operand
                                    {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                499 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15494703142406051947;
                                }
                                497 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15494703142406051947;
                                }
                                498 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15494703142406051947;
                                }
                                501 => {
                                    let fresh48 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh48;
                                    current_block = 15494703142406051947;
                                }
                                465 => {
                                    if ((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && (*sp).parts.data.s == (*cp).operand
                                    {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                464 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10837467881522841064;
                                }
                                462 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10837467881522841064;
                                }
                                463 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10837467881522841064;
                                }
                                466 => {
                                    let fresh49 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh49;
                                    current_block = 10837467881522841064;
                                }
                                485 => {
                                    if ((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && (*sp).parts.data.s == (*cp).operand
                                    {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                484 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12916373135125519917;
                                }
                                482 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12916373135125519917;
                                }
                                483 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12916373135125519917;
                                }
                                486 => {
                                    let fresh50 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh50;
                                    current_block = 12916373135125519917;
                                }
                                450 => {
                                    if ((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && (*sp).parts.data.s == (*cp).operand
                                    {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                449 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13351260019855268589;
                                }
                                447 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13351260019855268589;
                                }
                                448 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13351260019855268589;
                                }
                                451 => {
                                    let fresh51 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh51;
                                    current_block = 13351260019855268589;
                                }
                                470 => {
                                    if ((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && (*sp).parts.data.s == (*cp).operand
                                    {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                469 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7714866178530077276;
                                }
                                467 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7714866178530077276;
                                }
                                468 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7714866178530077276;
                                }
                                471 => {
                                    let fresh52 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh52;
                                    current_block = 7714866178530077276;
                                }
                                460 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 6143943233158298354;
                                }
                                459 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 6143943233158298354;
                                }
                                457 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 6143943233158298354;
                                }
                                458 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 6143943233158298354;
                                }
                                461 => {
                                    let fresh53 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh53;
                                    current_block = 6143943233158298354;
                                }
                                480 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 9907970034254792512;
                                }
                                479 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9907970034254792512;
                                }
                                477 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9907970034254792512;
                                }
                                478 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9907970034254792512;
                                }
                                481 => {
                                    let fresh54 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh54;
                                    current_block = 9907970034254792512;
                                }
                                455 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 10313534597168061043;
                                }
                                454 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10313534597168061043;
                                }
                                452 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10313534597168061043;
                                }
                                453 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10313534597168061043;
                                }
                                456 => {
                                    let fresh55 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh55;
                                    current_block = 10313534597168061043;
                                }
                                475 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 1606036238936509124;
                                }
                                474 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1606036238936509124;
                                }
                                472 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1606036238936509124;
                                }
                                473 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1606036238936509124;
                                }
                                476 => {
                                    let fresh56 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh56;
                                    current_block = 1606036238936509124;
                                }
                                495 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 1623552932627830973;
                                }
                                494 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1623552932627830973;
                                }
                                492 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1623552932627830973;
                                }
                                493 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1623552932627830973;
                                }
                                496 => {
                                    let fresh57 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh57;
                                    current_block = 1623552932627830973;
                                }
                                505 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 16332075848674751501;
                                }
                                504 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 16332075848674751501;
                                }
                                502 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 16332075848674751501;
                                }
                                503 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 16332075848674751501;
                                }
                                506 => {
                                    let fresh58 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh58;
                                    current_block = 16332075848674751501;
                                }
                                110 => {
                                    let mut n: libc::c_short = ((*cp).operand
                                        >> 8  & 0xf) as libc::c_short;
                                    let mut mask: libc::c_short = ((*cp).operand
                                        & 0xff) as libc::c_short;
                                    let mut dtp: libc::c_short = (((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1) )
                                        - n  * 4) as libc::c_short;
                                    if 0  <= dtp
                                        && dtp  <= 7
                                        && (1) << dtp
                                            & mask  != 0
                                    {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                111 => {
                                    let mut n_0: libc::c_short = ((*cp).operand
                                        >> 8  & 0xf) as libc::c_short;
                                    let mut mask_0: libc::c_short = ((*cp).operand
                                        & 0xff) as libc::c_short;
                                    let mut dtp_0: libc::c_short = (((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1) )
                                        - n_0  * 4) as libc::c_short;
                                    if 0  <= dtp_0
                                        && dtp_0  <= 7
                                        && (1) << dtp_0
                                            & mask_0  != 0
                                    {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                13 => {
                                    current_block = 4843221280033581897;
                                    break;
                                }
                                12 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 4849849383150575012;
                                }
                                10 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 4849849383150575012;
                                }
                                11 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 4849849383150575012;
                                }
                                14 => {
                                    let fresh59 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh59;
                                    current_block = 4849849383150575012;
                                }
                                108 => {
                                    if (*cp).operand > 0  {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                107 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 3433094768296467857;
                                }
                                105 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 3433094768296467857;
                                }
                                106 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 3433094768296467857;
                                }
                                109 => {
                                    let fresh60 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh60;
                                    current_block = 3433094768296467857;
                                }
                                103 => {
                                    if (*cp).operand < 0  {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                102 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11977086252334878030;
                                }
                                100 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11977086252334878030;
                                }
                                101 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11977086252334878030;
                                }
                                104 => {
                                    let fresh61 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh61;
                                    current_block = 11977086252334878030;
                                }
                                98 => {
                                    if (*cp).operand == 0  {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                97 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13049435113123448338;
                                }
                                95 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13049435113123448338;
                                }
                                96 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13049435113123448338;
                                }
                                99 => {
                                    let fresh62 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh62;
                                    current_block = 13049435113123448338;
                                }
                                510 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 15957095305812639434;
                                }
                                509 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15957095305812639434;
                                }
                                507 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15957095305812639434;
                                }
                                508 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15957095305812639434;
                                }
                                511 => {
                                    let fresh63 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh63;
                                    current_block = 15957095305812639434;
                                }
                                515 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 181465750714249208;
                                }
                                514 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 181465750714249208;
                                }
                                512 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 181465750714249208;
                                }
                                513 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 181465750714249208;
                                }
                                516 => {
                                    let fresh64 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh64;
                                    current_block = 181465750714249208;
                                }
                                172 => {
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .s = -(*cp).operand;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = TypeFixnum ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                171 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5372543090928527736;
                                }
                                169 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5372543090928527736;
                                }
                                170 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5372543090928527736;
                                }
                                173 => {
                                    let fresh65 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh65;
                                    current_block = 5372543090928527736;
                                }
                                212 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11631144177913518471;
                                }
                                210 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11631144177913518471;
                                }
                                211 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11631144177913518471;
                                }
                                217 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15702772439421846748;
                                }
                                215 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15702772439421846748;
                                }
                                216 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15702772439421846748;
                                }
                                295 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 9476106578594883259;
                                }
                                294 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9476106578594883259;
                                }
                                292 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9476106578594883259;
                                }
                                293 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9476106578594883259;
                                }
                                296 => {
                                    let fresh68 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh68;
                                    current_block = 9476106578594883259;
                                }
                                300 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 13824084825403172572;
                                }
                                299 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13824084825403172572;
                                }
                                297 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13824084825403172572;
                                }
                                298 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13824084825403172572;
                                }
                                301 => {
                                    let fresh69 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh69;
                                    current_block = 13824084825403172572;
                                }
                                310 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 8570820179795813527;
                                }
                                309 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 8570820179795813527;
                                }
                                307 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 8570820179795813527;
                                }
                                308 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 8570820179795813527;
                                }
                                311 => {
                                    let fresh70 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh70;
                                    current_block = 8570820179795813527;
                                }
                                305 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 12578535000243402674;
                                }
                                304 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12578535000243402674;
                                }
                                302 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12578535000243402674;
                                }
                                303 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12578535000243402674;
                                }
                                306 => {
                                    let fresh71 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh71;
                                    current_block = 12578535000243402674;
                                }
                                315 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 707633050465026752;
                                }
                                314 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 707633050465026752;
                                }
                                312 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 707633050465026752;
                                }
                                313 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 707633050465026752;
                                }
                                316 => {
                                    let fresh72 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh72;
                                    current_block = 707633050465026752;
                                }
                                320 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 1979062999462163286;
                                }
                                319 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1979062999462163286;
                                }
                                317 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1979062999462163286;
                                }
                                318 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1979062999462163286;
                                }
                                321 => {
                                    let fresh73 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh73;
                                    current_block = 1979062999462163286;
                                }
                                325 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 1021009594659785084;
                                }
                                324 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1021009594659785084;
                                }
                                322 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1021009594659785084;
                                }
                                323 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1021009594659785084;
                                }
                                326 => {
                                    let fresh74 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh74;
                                    current_block = 1021009594659785084;
                                }
                                335 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 15046840266419836844;
                                }
                                334 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15046840266419836844;
                                }
                                332 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15046840266419836844;
                                }
                                333 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15046840266419836844;
                                }
                                336 => {
                                    let fresh75 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh75;
                                    current_block = 15046840266419836844;
                                }
                                330 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 9651093194883831961;
                                }
                                329 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9651093194883831961;
                                }
                                327 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9651093194883831961;
                                }
                                328 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9651093194883831961;
                                }
                                331 => {
                                    let fresh76 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh76;
                                    current_block = 9651093194883831961;
                                }
                                345 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 17944313385542272920;
                                }
                                344 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 17944313385542272920;
                                }
                                342 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 17944313385542272920;
                                }
                                343 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 17944313385542272920;
                                }
                                346 => {
                                    let fresh77 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh77;
                                    current_block = 17944313385542272920;
                                }
                                355 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 1954535181902104252;
                                }
                                354 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1954535181902104252;
                                }
                                352 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1954535181902104252;
                                }
                                353 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1954535181902104252;
                                }
                                356 => {
                                    let fresh79 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh79;
                                    current_block = 1954535181902104252;
                                }
                                350 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 2521877785192433750;
                                }
                                349 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2521877785192433750;
                                }
                                347 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2521877785192433750;
                                }
                                348 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2521877785192433750;
                                }
                                351 => {
                                    let fresh81 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh81;
                                    current_block = 2521877785192433750;
                                }
                                410 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 5730836827815574811;
                                }
                                409 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5730836827815574811;
                                }
                                407 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5730836827815574811;
                                }
                                408 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5730836827815574811;
                                }
                                411 => {
                                    let fresh83 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh83;
                                    current_block = 5730836827815574811;
                                }
                                365 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 7576418816522177914;
                                }
                                364 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7576418816522177914;
                                }
                                362 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7576418816522177914;
                                }
                                363 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7576418816522177914;
                                }
                                366 => {
                                    let fresh84 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh84;
                                    current_block = 7576418816522177914;
                                }
                                360 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 17836739907628934854;
                                }
                                359 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 17836739907628934854;
                                }
                                357 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 17836739907628934854;
                                }
                                358 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 17836739907628934854;
                                }
                                361 => {
                                    let fresh85 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh85;
                                    current_block = 17836739907628934854;
                                }
                                520 => {
                                    if !(((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let ref mut fresh86 = (*sp).parts.data.u;
                                    *fresh86 = (*fresh86 )
                                        .wrapping_add((*cp).operand )
                                        ;
                                    current_block = 5374579820246837908;
                                }
                                519 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5799653063183189417;
                                }
                                517 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5799653063183189417;
                                }
                                518 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5799653063183189417;
                                }
                                521 => {
                                    let fresh87 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh87;
                                    current_block = 5799653063183189417;
                                }
                                525 => {
                                    if !(((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let ref mut fresh89 = (*sp).parts.data.u;
                                    *fresh89 = (*fresh89 )
                                        .wrapping_sub((*cp).operand )
                                        ;
                                    current_block = 5374579820246837908;
                                }
                                524 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10658836756412317435;
                                }
                                522 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10658836756412317435;
                                }
                                523 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10658836756412317435;
                                }
                                526 => {
                                    let fresh90 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh90;
                                    current_block = 10658836756412317435;
                                }
                                370 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                369 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                367 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                368 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                371 => {
                                    let fresh92 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh92;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                530 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                529 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                527 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                528 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                531 => {
                                    let fresh93 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh93;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                535 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                534 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                532 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                533 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                536 => {
                                    let fresh94 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh94;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                540 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 8929201679391263324;
                                }
                                539 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 8929201679391263324;
                                }
                                537 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 8929201679391263324;
                                }
                                538 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 8929201679391263324;
                                }
                                541 => {
                                    let fresh95 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh95;
                                    current_block = 8929201679391263324;
                                }
                                545 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 12149821107786716977;
                                }
                                544 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12149821107786716977;
                                }
                                542 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12149821107786716977;
                                }
                                543 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12149821107786716977;
                                }
                                546 => {
                                    let fresh96 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh96;
                                    current_block = 12149821107786716977;
                                }
                                375 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                374 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                372 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                373 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                376 => {
                                    let fresh97 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh97;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                139 => {
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .s = (*cp).operand;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = TypeFixnum ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                138 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    (*sp.offset(1  ))
                                        .whole = (*op2).whole & !ObjectCdrMask.whole;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                137 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    (*sp.offset(1  ))
                                        .whole = (*op2).whole & !ObjectCdrMask.whole;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                136 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    (*sp.offset(1  ))
                                        .whole = (*op2).whole & !ObjectCdrMask.whole;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                623 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    let fresh98 = sp;
                                    sp = sp.offset(-1);
                                    *op2 = *fresh98;
                                    current_block = 5374579820246837908;
                                }
                                621 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    let fresh99 = sp;
                                    sp = sp.offset(-1);
                                    *op2 = *fresh99;
                                    current_block = 5374579820246837908;
                                }
                                622 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    let fresh100 = sp;
                                    sp = sp.offset(-1);
                                    *op2 = *fresh100;
                                    current_block = 5374579820246837908;
                                }
                                628 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    *op2 = *sp;
                                    current_block = 5374579820246837908;
                                }
                                626 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    *op2 = *sp;
                                    current_block = 5374579820246837908;
                                }
                                627 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    *op2 = *sp;
                                    current_block = 5374579820246837908;
                                }
                                141 => {
                                    i = (*cp).operand;
                                    current_block = 15636112305942086483;
                                }
                                237 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15722191353800179695;
                                }
                                235 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15722191353800179695;
                                }
                                236 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15722191353800179695;
                                }
                                242 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    sp = op2;
                                    current_block = 5374579820246837908;
                                }
                                240 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    sp = op2;
                                    current_block = 5374579820246837908;
                                }
                                241 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    sp = op2;
                                    current_block = 5374579820246837908;
                                }
                                247 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11866557605208005574;
                                }
                                245 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11866557605208005574;
                                }
                                246 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11866557605208005574;
                                }
                                145 => {
                                    let mut tag_0: Tag = TypeLocative  as Tag;
                                    let mut data_0: isize = ((*ps).StackCacheBase)
                                        .wrapping_add(
                                            sp.offset_from((*ps).StackCache)
                                              ,
                                        )
                                        .wrapping_sub((*cp).operand)
                                        .wrapping_sub(1);
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_0 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_0 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                144 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11150878041432028190;
                                }
                                142 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11150878041432028190;
                                }
                                143 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11150878041432028190;
                                }
                                146 => {
                                    let fresh102 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh102;
                                    current_block = 11150878041432028190;
                                }
                                379 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7886902504354110502;
                                }
                                377 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7886902504354110502;
                                }
                                378 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7886902504354110502;
                                }
                                381 => {
                                    let fresh103 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh103;
                                    current_block = 7886902504354110502;
                                }
                                648 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 8907700205828477361;
                                }
                                646 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 8907700205828477361;
                                }
                                647 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 8907700205828477361;
                                }
                                650 => {
                                    let fresh104 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh104;
                                    current_block = 8907700205828477361;
                                }
                                274 => {
                                    if ((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                    {
                                        let mut pp: libc::c_short = (32
                                            - (*cp).operand & 0x1f) as libc::c_short;
                                        let mut ss: libc::c_short = ((*cp).operand
                                            >> 5  & 0x1f) as libc::c_short;
                                        (*sp)
                                            .parts
                                            .data
                                            .s = (*sp).parts.data.s >> pp
                                            & !(-(2) << ss);
                                        (*sp).parts.tag = TypeFixnum ;
                                    } else if (*sp).parts.tag
                                        & 0o70
                                        == 0o10
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    } else {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                275 => {
                                    if !(((*sp).parts.tag
                                        ^ TypeCharacter)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 17903399028313266107;
                                        break;
                                    }
                                    let mut pp_0: libc::c_short = (32
                                        - (*cp).operand & 0x1f) as libc::c_short;
                                    let mut ss_0: libc::c_short = ((*cp).operand
                                        >> 5  & 0x1f) as libc::c_short;
                                    (*sp)
                                        .parts
                                        .data
                                        .s = (*sp).parts.data.s >> pp_0
                                        & !(-(2) << ss_0);
                                    (*sp).parts.tag = TypeFixnum ;
                                    current_block = 5374579820246837908;
                                }
                                276 => {
                                    if ((*sp).parts.tag
                                        ^ TypePhysicalAddress)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    let mut pp_1: libc::c_short = (32
                                        - (*cp).operand & 0x1f) as libc::c_short;
                                    let mut ss_1: libc::c_short = ((*cp).operand
                                        >> 5  & 0x1f) as libc::c_short;
                                    let mut word_rep: QWord = LispObj {
                                        parts: _LispObj {
                                            tag: 0,
                                            data: QData { u: 0 },
                                        },
                                    };
                                    let mut word: *mut LispObj = &mut word_rep;
                                    ReadVirtualMemory((*sp).parts.data.s , word);
                                    (*sp)
                                        .parts
                                        .data
                                        .s = (*word).parts.data.s >> pp_1
                                        & !(-(2) << ss_1);
                                    (*sp).parts.tag = TypeFixnum ;
                                    current_block = 5374579820246837908;
                                }
                                277 => {
                                    if ((*sp).parts.tag
                                        ^ TypePhysicalAddress)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    let mut pp_2: libc::c_short = (32
                                        - (*cp).operand & 0x1f) as libc::c_short;
                                    let mut ss_2: libc::c_short = ((*cp).operand
                                        >> 5  & 0x1f) as libc::c_short;
                                    let mut word_rep_0: QWord = LispObj {
                                        parts: _LispObj {
                                            tag: 0,
                                            data: QData { u: 0 },
                                        },
                                    };
                                    let mut word_0: *mut LispObj = &mut word_rep_0;
                                    ReadVirtualMemory((*sp).parts.data.u , word_0);
                                    (*sp)
                                        .parts
                                        .data
                                        .s = ((*word_0).parts.tag >> pp_2
                                        & !(-(2) << ss_2)
                                            ) as i32;
                                    (*sp).parts.tag = TypeFixnum ;
                                    current_block = 5374579820246837908;
                                }
                                651 => {
                                    if ((*sp).parts.tag
                                        ^ TypeFixnum
                                        | (*sp.offset(-(1) )).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                    {
                                        let mut pp_3: libc::c_short = ((*cp).operand
                                            & 0x1f) as libc::c_short;
                                        let mut ss_3: libc::c_short = ((*cp).operand
                                            >> 5  & 0x1f) as libc::c_short;
                                        let mut newbyte_mask: libc::c_uint = 0;
                                        sp = sp.offset(-1);
                                        newbyte_mask = (!(-(2)
                                            << ss_3) )
                                            << pp_3;
                                        (*sp.offset(0  ))
                                            .parts
                                            .data
                                            .u = (*sp.offset(1  )).parts.data.u
                                            & !newbyte_mask
                                            | (*sp.offset(0  )).parts.data.u
                                                << pp_3  & newbyte_mask;
                                    } else if (*sp).parts.tag
                                        & 0o70
                                        == 0o10
                                        && (*sp.offset(-(1) )).parts.tag
                                            & 0o70
                                            == 0o10
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    } else {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                652 => {
                                    if !(((*sp.offset(-(1) )).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if !(((*sp).parts.tag
                                        ^ TypeCharacter)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 17903399028313266107;
                                        break;
                                    }
                                    let mut pp_4: libc::c_short = ((*cp).operand
                                        & 0x1f) as libc::c_short;
                                    let mut ss_4: libc::c_short = ((*cp).operand
                                        >> 5  & 0x1f) as libc::c_short;
                                    let mut newbyte_mask_0: libc::c_uint = 0;
                                    sp = sp.offset(-1);
                                    newbyte_mask_0 = (!(-(2)
                                        << ss_4) )
                                        << pp_4;
                                    (*sp.offset(0  ))
                                        .parts
                                        .data
                                        .u = (*sp.offset(1  )).parts.data.u
                                        & !newbyte_mask_0
                                        | (*sp.offset(0  )).parts.data.u
                                            << pp_4  & newbyte_mask_0;
                                    (*sp.offset(0  ))
                                        .parts
                                        .tag = TypeCharacter ;
                                    current_block = 5374579820246837908;
                                }
                                653 => {
                                    if !(((*sp.offset(-(1) )).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if ((*sp).parts.tag
                                        ^ TypePhysicalAddress)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    let mut pp_5: libc::c_short = ((*cp).operand
                                        & 0x1f) as libc::c_short;
                                    let mut ss_5: libc::c_short = ((*cp).operand
                                        >> 5  & 0x1f) as libc::c_short;
                                    let mut newbyte_mask_1: libc::c_uint = 0;
                                    sp = sp.offset(-(2  ));
                                    ReadVirtualMemory(
                                        (*sp.offset(2  )).parts.data.u
                                            ,
                                        scratch,
                                    );
                                    newbyte_mask_1 = (!(-(2)
                                        << ss_5) )
                                        << pp_5;
                                    (*scratch)
                                        .parts
                                        .data
                                        .u = (*scratch).parts.data.u & !newbyte_mask_1
                                        | (*sp.offset(1  )).parts.data.u
                                            << pp_5  & newbyte_mask_1;
                                    WriteVirtualMemory(
                                        (*sp.offset(2  )).parts.data.u
                                            ,
                                        scratch,
                                    );
                                    current_block = 5374579820246837908;
                                }
                                654 => {
                                    if !(((*sp.offset(-(1) )).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if ((*sp).parts.tag
                                        ^ TypePhysicalAddress)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    let mut pp_6: libc::c_short = ((*cp).operand
                                        & 0x1f) as libc::c_short;
                                    let mut ss_6: libc::c_short = ((*cp).operand
                                        >> 5  & 0x1f) as libc::c_short;
                                    let mut newbyte_mask_2: libc::c_uint = 0;
                                    sp = sp.offset(-(2  ));
                                    ReadVirtualMemory(
                                        (*sp.offset(2  )).parts.data.u
                                            ,
                                        scratch,
                                    );
                                    newbyte_mask_2 = (!(-(2)
                                        << ss_6) )
                                        << pp_6;
                                    (*scratch)
                                        .parts
                                        .tag = (*scratch).parts.tag & !newbyte_mask_2
                                        | (*sp.offset(1  )).parts.data.u
                                            << pp_6  & newbyte_mask_2;
                                    WriteVirtualMemory(
                                        (*sp.offset(2  )).parts.data.u
                                            ,
                                        scratch,
                                    );
                                    current_block = 5374579820246837908;
                                }
                                560 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 16043120824524396648;
                                }
                                559 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 16043120824524396648;
                                }
                                557 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 16043120824524396648;
                                }
                                558 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 16043120824524396648;
                                }
                                561 => {
                                    let fresh108 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh108;
                                    current_block = 16043120824524396648;
                                }
                                550 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 1422482647876387503;
                                }
                                549 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1422482647876387503;
                                }
                                547 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1422482647876387503;
                                }
                                548 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 1422482647876387503;
                                }
                                551 => {
                                    let fresh109 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh109;
                                    current_block = 1422482647876387503;
                                }
                                565 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 760176532998518372;
                                }
                                564 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 760176532998518372;
                                }
                                562 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 760176532998518372;
                                }
                                563 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 760176532998518372;
                                }
                                566 => {
                                    let fresh110 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh110;
                                    current_block = 760176532998518372;
                                }
                                17 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7929629023330341380;
                                }
                                15 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7929629023330341380;
                                }
                                16 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7929629023330341380;
                                }
                                19 => {
                                    let fresh111 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh111;
                                    current_block = 7929629023330341380;
                                }
                                22 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7929629023330341380;
                                }
                                20 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7929629023330341380;
                                }
                                21 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7929629023330341380;
                                }
                                24 => {
                                    let fresh112 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh112;
                                    current_block = 7929629023330341380;
                                }
                                638 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11120522862495583117;
                                }
                                636 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11120522862495583117;
                                }
                                637 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11120522862495583117;
                                }
                                643 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13445582451972576579;
                                }
                                641 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13445582451972576579;
                                }
                                642 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13445582451972576579;
                                }
                                580 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 343795984303964022;
                                }
                                579 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 343795984303964022;
                                }
                                577 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 343795984303964022;
                                }
                                578 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 343795984303964022;
                                }
                                581 => {
                                    let fresh113 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh113;
                                    current_block = 343795984303964022;
                                }
                                570 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 16423429028418199427;
                                }
                                569 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 16423429028418199427;
                                }
                                567 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 16423429028418199427;
                                }
                                568 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 16423429028418199427;
                                }
                                571 => {
                                    let fresh114 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh114;
                                    current_block = 16423429028418199427;
                                }
                                585 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 7096816769721830736;
                                }
                                584 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7096816769721830736;
                                }
                                582 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7096816769721830736;
                                }
                                583 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7096816769721830736;
                                }
                                586 => {
                                    let fresh115 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh115;
                                    current_block = 7096816769721830736;
                                }
                                120 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        != TypeNIL)
                                    {
                                        sp = sp.offset(-(1  ));
                                    } else {
                                        sp = sp.offset(-(1  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                121 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        != TypeNIL)
                                    {
                                        sp = sp.offset(-(2  ));
                                    } else {
                                        sp = sp.offset(-(1  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                122 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        != TypeNIL)
                                    {
                                        sp = sp.offset(-(1  ));
                                    } else {
                                        sp = sp.offset(-(2  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                123 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        != TypeNIL)
                                    {
                                        sp = sp.offset(-(2  ));
                                    } else {
                                        sp = sp.offset(-(2  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                124 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        != TypeNIL)
                                    {
                                        sp = sp.offset(-(0  ));
                                    } else {
                                        sp = sp.offset(-(0  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                125 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        != TypeNIL)
                                    {
                                        sp = sp.offset(-(1  ));
                                    } else {
                                        sp = sp.offset(-(0  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                126 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        != TypeNIL)
                                    {
                                        sp = sp.offset(-(0  ));
                                    } else {
                                        sp = sp.offset(-(1  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                127 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        != TypeNIL)
                                    {
                                        sp = sp.offset(-(1  ));
                                    } else {
                                        sp = sp.offset(-(1  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                128 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        == TypeNIL)
                                    {
                                        sp = sp.offset(-(1  ));
                                    } else {
                                        sp = sp.offset(-(1  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                129 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        == TypeNIL)
                                    {
                                        sp = sp.offset(-(2  ));
                                    } else {
                                        sp = sp.offset(-(1  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                130 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        == TypeNIL)
                                    {
                                        sp = sp.offset(-(1  ));
                                    } else {
                                        sp = sp.offset(-(2  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                131 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        == TypeNIL)
                                    {
                                        sp = sp.offset(-(2  ));
                                    } else {
                                        sp = sp.offset(-(2  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                132 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        == TypeNIL)
                                    {
                                        sp = sp.offset(-(0  ));
                                    } else {
                                        sp = sp.offset(-(0  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                133 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        == TypeNIL)
                                    {
                                        sp = sp.offset(-(1  ));
                                    } else {
                                        sp = sp.offset(-(0  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                134 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        == TypeNIL)
                                    {
                                        sp = sp.offset(-(0  ));
                                    } else {
                                        sp = sp.offset(-(1  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                135 => {
                                    if !((*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        == TypeNIL)
                                    {
                                        sp = sp.offset(-(1  ));
                                    } else {
                                        sp = sp.offset(-(1  ));
                                        current_block = 8171028261534490456;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                279 => {
                                    if ((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && {
                                            i = (*sp).parts.data.s - 1;
                                            i < (*sp).parts.data.s
                                        }
                                    {
                                        (*sp).parts.tag = TypeFixnum ;
                                        let ref mut fresh116 = (*sp).parts.data.s;
                                        *fresh116 = i;
                                        if *fresh116 > 0  {
                                            sp = sp.offset(-(0  ));
                                            current_block = 8171028261534490456;
                                            break;
                                        } else {
                                            sp = sp.offset(-(0  ));
                                        }
                                    } else if (*sp).parts.tag
                                        & 0o70
                                        == 0o10
                                    {
                                        current_block = 14734397281083605686;
                                        break;
                                    } else {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                655 => {
                                    op2 = sp.offset(-(1  ));
                                    if ((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && {
                                            i = (*sp).parts.data.s + 1;
                                            i > (*sp).parts.data.s
                                        }
                                    {
                                        (*sp).parts.tag = TypeFixnum ;
                                        let ref mut fresh121 = (*sp).parts.data.s;
                                        *fresh121 = i;
                                        if *fresh121 <= (*op2).parts.data.s {
                                            sp = sp.offset(-(0  ));
                                            current_block = 8171028261534490456;
                                            break;
                                        } else {
                                            sp = sp.offset(-(0  ));
                                        }
                                    } else if (*op2).parts.tag
                                        & 0o70
                                        == 0o10
                                        && (*sp).parts.tag & 0o70
                                            == 0o10
                                    {
                                        current_block = 10652006131370760251;
                                        break;
                                    } else {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                180 => {
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 13243273766179450019;
                                }
                                181 => {
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 13243273766179450019;
                                }
                                182 => {
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 13243273766179450019;
                                }
                                184 => {
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                185 => {
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                186 => {
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                188 => {
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                189 => {
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                190 => {
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                261 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                259 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                260 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                266 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                264 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                265 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                271 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                269 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                270 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                83 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                88 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                93 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                82 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                80 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                81 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                84 => {
                                    let fresh123 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh123;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(1  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                87 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                85 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                86 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                89 => {
                                    let fresh124 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh124;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(2  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                92 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                90 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                91 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                94 => {
                                    let fresh125 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh125;
                                    bar = &mut *((*processor).bar)
                                        .as_mut_ptr()
                                        .offset(3  ) as *mut _bar;
                                    current_block = 2914880375600570860;
                                }
                                42 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15410729287883662337;
                                }
                                40 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15410729287883662337;
                                }
                                41 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15410729287883662337;
                                }
                                44 => {
                                    let fresh127 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh127;
                                    current_block = 15410729287883662337;
                                }
                                698 | 702 => {
                                    let mut tag_6: Tag = ((*ps).continuation.parts.tag
                                        | 0o300) as Tag;
                                    let mut data_6: isize = (*ps).continuation.parts.data.u
                                        ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_6 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_6 ;
                                    sp = sp.offset(1);
                                    let mut tag_7: Tag = (TypeFixnum
                                        | 0o300) as Tag;
                                    let mut data_7: isize = (*ps).control;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_7 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_7 ;
                                    sp = sp.offset(1);
                                    (*ps)
                                        .control = ((*ps).control
                                        | 0o20000000)
                                        & !(0o400);
                                    (*ps)
                                        .continuation
                                        .parts
                                        .tag = TypeEvenPC ;
                                    (*ps).continuation.parts.data.u = (*cp).operand ;
                                    current_block = 5374579820246837908;
                                }
                                699 | 703 => {
                                    let mut tag_8: Tag = ((*ps).continuation.parts.tag
                                        | 0o300) as Tag;
                                    let mut data_8: isize = (*ps).continuation.parts.data.u
                                        ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_8 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_8 ;
                                    sp = sp.offset(1);
                                    let mut tag_9: Tag = (TypeFixnum
                                        | 0o300) as Tag;
                                    let mut data_9: isize = (*ps).control;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_9 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_9 ;
                                    sp = sp.offset(1);
                                    (*ps)
                                        .control = ((*ps).control
                                        | 0o20000000)
                                        & !(0o400);
                                    (*ps)
                                        .continuation
                                        .parts
                                        .tag = TypeOddPC ;
                                    (*ps).continuation.parts.data.u = (*cp).operand ;
                                    current_block = 5374579820246837908;
                                }
                                701 | 705 => {
                                    (*scratch)
                                        .parts
                                        .tag = TypeGenericFunction ;
                                    (*scratch).parts.data.u = (*cp).operand ;
                                    current_block = 6283768289772892258;
                                }
                                700 | 704 => {
                                    MemoryReadInternal(
                                        (*cp).operand ,
                                        scratch,
                                        (MemoryActionTable[CycleDataRead  ])
                                            .as_mut_ptr(),
                                    );
                                    current_block = 6283768289772892258;
                                }
                                191 => {
                                    op1 = sp
                                        .offset(
                                            -(((*cp).operand >> 0
                                                & ((1) << 8)
                                                    - 1) ),
                                        )
                                        .offset(
                                            -(((*ps).control >> 8
                                                & (((1) << 1)
                                                    - 1))
                                                ),
                                        );
                                    op2 = sp.offset(1  );
                                    (*ps)
                                        .control = (*ps).control
                                        & !(0o400000  | 0o700000000
                                            | 0o400  | 0o20000000
                                            | 0o377  | 0o3000000
                                            | 0o377000)
                                        | op2.offset_from(op1)
                                        | (((*cp).operand & 0o1400)
                                            << 10)
                                        | ((op1.offset_from(fp) )
                                            << 9);
                                    current_block = 17028499347507987478;
                                    break;
                                }
                                192 => {
                                    op1 = sp
                                        .offset(
                                            -(((*cp).operand >> 0
                                                & ((1) << 8)
                                                    - 1) ),
                                        )
                                        .offset(
                                            -(((*ps).control >> 8
                                                & (((1) << 1)
                                                    - 1))
                                                ),
                                        );
                                    op2 = sp
                                        .offset(1  )
                                        .offset(-(1  ));
                                    (*ps)
                                        .control = (*ps).control
                                        & !(0o700000000  | 0o400
                                            | 0o20000000  | 0o377
                                            | 0o3000000  | 0o377000)
                                           | 0o400000
                                        | op2.offset_from(op1)
                                        | (((*cp).operand & 0o1400)
                                            << 10)
                                        | ((op1.offset_from(fp) )
                                            << 9);
                                    current_block = 17028499347507987478;
                                    break;
                                }
                                193 => {
                                    let fresh128 = sp;
                                    sp = sp.offset(-1);
                                    *scratch = *fresh128;
                                    op1 = sp
                                        .offset(
                                            -(((*scratch).parts.data.s + 1) ),
                                        )
                                        .offset(
                                            -(((*ps).control >> 8
                                                & (((1) << 1)
                                                    - 1))
                                                ),
                                        );
                                    op2 = sp.offset(1  );
                                    (*ps)
                                        .control = (*ps).control
                                        & !(0o400000  | 0o700000000
                                            | 0o400  | 0o20000000
                                            | 0o377  | 0o3000000
                                            | 0o377000)
                                        | op2.offset_from(op1)
                                        | (((*cp).operand & 0o1400)
                                            << 10)
                                        | ((op1.offset_from(fp) )
                                            << 9);
                                    current_block = 17028499347507987478;
                                    break;
                                }
                                194 => {
                                    let fresh129 = sp;
                                    sp = sp.offset(-1);
                                    *scratch = *fresh129;
                                    op1 = sp
                                        .offset(
                                            -(((*scratch).parts.data.u)
                                                .wrapping_add(1) ),
                                        )
                                        .offset(
                                            -(((*ps).control >> 8
                                                & (((1) << 1)
                                                    - 1))
                                                ),
                                        );
                                    op2 = sp
                                        .offset(1  )
                                        .offset(-(1  ));
                                    (*ps)
                                        .control = (*ps).control
                                        & !(0o700000000  | 0o400
                                            | 0o20000000  | 0o377
                                            | 0o3000000  | 0o377000)
                                           | 0o400000
                                        | op2.offset_from(op1)
                                        | (((*cp).operand & 0o1400)
                                            << 10)
                                        | ((op1.offset_from(fp) )
                                            << 9);
                                    current_block = 17028499347507987478;
                                    break;
                                }
                                280 => {
                                    current_block = 1516416590674582958;
                                    break;
                                }
                                281 => {
                                    current_block = 18376443059329140242;
                                    break;
                                }
                                112 => {
                                    lp = sp;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .s = ((*ps).control >> 0
                                        & (((1) << 8)
                                            - 1))
                                        - 2;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = TypeFixnum ;
                                    sp = sp.offset(1);
                                    (*ps)
                                        .control = ((lp.offset_from(fp)
                                        & (((1) << 8)
                                            - 1) ) << 0)

                                        | (*ps).control
                                            & !((((1) << 8)
                                                - 1) << 0);
                                    current_block = 5374579820246837908;
                                }
                                176 => {
                                    *scratch = *sp;
                                    current_block = 4594643456678373142;
                                    break;
                                }
                                174 => {
                                    *scratch = ObjectNIL;
                                    current_block = 4594643456678373142;
                                    break;
                                }
                                175 => {
                                    *scratch = ObjectT;
                                    current_block = 4594643456678373142;
                                    break;
                                }
                                155 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 7861402116394276230;
                                    break;
                                }
                                156 => {
                                    let fresh146 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh146;
                                    current_block = 7861402116394276230;
                                    break;
                                }
                                160 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 18354039080828970347;
                                    break;
                                }
                                161 => {
                                    let fresh155 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh155;
                                    current_block = 18354039080828970347;
                                    break;
                                }
                                162 => {
                                    if !(((*sp).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    i = (*cp).operand - (*sp).parts.data.s;
                                    sp = sp.offset(-1);
                                    if i > 0  {
                                        current_block = 15636112305942086483;
                                    } else {
                                        if i < 0  {
                                            sp = sp.offset(i );
                                        }
                                        current_block = 5374579820246837908;
                                    }
                                }
                                430 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 12667290879508966804;
                                }
                                429 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12667290879508966804;
                                }
                                427 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12667290879508966804;
                                }
                                428 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12667290879508966804;
                                }
                                431 => {
                                    let fresh163 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh163;
                                    current_block = 12667290879508966804;
                                }
                                27 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15416092740237289663;
                                }
                                25 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15416092740237289663;
                                }
                                26 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15416092740237289663;
                                }
                                29 => {
                                    let fresh166 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh166;
                                    current_block = 15416092740237289663;
                                }
                                163 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 7553509812227422774;
                                }
                                164 => {
                                    let fresh168 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh168;
                                    current_block = 7553509812227422774;
                                }
                                33 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 11410898250562780541;
                                }
                                32 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11410898250562780541;
                                }
                                30 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11410898250562780541;
                                }
                                31 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11410898250562780541;
                                }
                                34 => {
                                    let fresh170 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh170;
                                    current_block = 11410898250562780541;
                                }
                                656 => {
                                    let mut newpointer: isize = ((*ps).StackCacheBase)
                                        .wrapping_add(
                                            sp.offset_from((*ps).StackCache)
                                              ,
                                        );
                                    let mut unwindprotect: u32 = (*cp).operand
                                        >> 0
                                        & ((1) << 1)
                                            - 1;
                                    let mut tag_18: Tag = (TypeLocative
                                        | unwindprotect << 6) as Tag;
                                    let mut data_18: isize = (*ps).BindingStackPointer;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_18 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_18 ;
                                    sp = sp.offset(1);
                                    let mut tag_19: Tag = ((*ps).CatchBlockPointer.parts.tag
                                        | (((((*ps).control >> 8
                                            & (((1) << 1)
                                                - 1))
                                            & ((1) << 1)
                                                - 1) << 1
                                            | ((*ps).control >> 26
                                                & (((1) << 1)
                                                    - 1))
                                                & !((((1) << 1)
                                                    - 1) << 1))
                                            << 6) ) as Tag;
                                    let mut data_19: isize = (*ps)
                                        .CatchBlockPointer
                                        .parts
                                        .data
                                        .u ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_19 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_19 ;
                                    sp = sp.offset(1);
                                    if unwindprotect == 0 {
                                        let mut tag_20: Tag = ((*ps).continuation.parts.tag
                                            | (((*cp).operand >> 6
                                                & ((1) << 2)
                                                    - 1) << 6) )
                                            as Tag;
                                        let mut data_20: isize = (*ps).continuation.parts.data.u
                                            ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = tag_20 ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .u = data_20 ;
                                        sp = sp.offset(1);
                                    }
                                    (*ps)
                                        .CatchBlockPointer
                                        .parts
                                        .tag = TypeLocative ;
                                    (*ps)
                                        .CatchBlockPointer
                                        .parts
                                        .data
                                        .u = newpointer ;
                                    (*ps)
                                        .control = ((1
                                        & ((1) << 1)
                                            - 1) << 26)
                                        | (*ps).control
                                            & !((((1) << 1)
                                                - 1) << 26);
                                    current_block = 5374579820246837908;
                                }
                                113 => {
                                    let mut cbp_2: *mut LispObj = &mut *((*ps).StackCache)
                                        .offset(
                                            ((*ps).CatchBlockPointer.parts.data.u)
                                                .wrapping_sub((*ps).StackCacheBase) ,
                                        ) as *mut LispObj;
                                    let mut control_7: isize = (*ps).control;
                                    if (*ps).BindingStackPointer
                                        != (*cbp_2.offset(1  )).parts.data.u

                                    {
                                        if (*ps).DeepBoundP != 0 {
                                            current_block = 18241021006505011791;
                                            break;
                                        }
                                        while (*ps).BindingStackPointer
                                            > (*cbp_2.offset(1  )).parts.data.u

                                        {
                                            if Unbind() != 0 {
                                                current_block = 4843221280033581897;
                                                break 'c_3383;
                                            }
                                        }
                                    }
                                    control_7 = ((((*cbp_2.offset(2  ))
                                        .parts
                                        .tag >> 7
                                        & (((1) << 1)
                                            - 1) )
                                        & ((1) << 1)
                                            - 1) << 8)
                                        | control_7
                                            & !((((1) << 1)
                                                - 1) << 8);
                                    control_7 = ((((*cbp_2.offset(2  ))
                                        .parts
                                        .tag >> 6
                                        & (((1) << 1)
                                            - 1) )
                                        & ((1) << 1)
                                            - 1) << 26)
                                        | control_7
                                            & !((((1) << 1)
                                                - 1) << 26);
                                    (*ps).control = control_7;
                                    (*ps)
                                        .CatchBlockPointer
                                        .whole = (*cbp_2.offset(2  )).whole
                                        & !ObjectCdrMask.whole;
                                    if ((*cbp_2.offset(1  )).parts.tag
                                        >> 6
                                        & (((1) << 1)
                                            - 1) )  != 0
                                    {
                                        let mut tag_21: Tag = ((*cp).next_pc.parts.tag
                                            | (((((*ps).control >> 23
                                                & (((1) << 1)
                                                    - 1))
                                                & ((1) << 1)
                                                    - 1) << 0
                                                | 2
                                                    & !((((1) << 1)
                                                        - 1) << 0))
                                                << 6) ) as Tag;
                                        let mut data_21: isize = (*cp).next_pc.parts.data.u
                                            ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = tag_21 ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .u = data_21 ;
                                        sp = sp.offset(1);
                                        (*ps)
                                            .control = ((1
                                            & ((1) << 1)
                                                - 1) << 23)
                                            | (*ps).control
                                                & !((((1) << 1)
                                                    - 1) << 23);
                                        pc = *cbp_2.offset(0  );
                                        current_block = 13269259571821644417;
                                        continue 'c_3562;
                                    } else {
                                        current_block = 5374579820246837908;
                                    }
                                }
                                72 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11319161444365677979;
                                }
                                70 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11319161444365677979;
                                }
                                71 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11319161444365677979;
                                }
                                74 => {
                                    let fresh171 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh171;
                                    current_block = 11319161444365677979;
                                }
                                439 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 17910007212919220055;
                                }
                                437 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 17910007212919220055;
                                }
                                438 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 17910007212919220055;
                                }
                                441 => {
                                    let fresh172 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh172;
                                    current_block = 17910007212919220055;
                                }
                                444 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5913826281391087025;
                                }
                                442 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5913826281391087025;
                                }
                                443 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 5913826281391087025;
                                }
                                446 => {
                                    let fresh173 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh173;
                                    current_block = 5913826281391087025;
                                }
                                165 => {
                                    i = LocateInstanceVariableMapped(
                                        &mut *fp.offset(2  ),
                                        &mut *fp.offset(3  ),
                                        (*cp).operand ,
                                    );
                                    MemoryReadInternal(
                                        i ,
                                        &mut *sp.offset(1  ),
                                        (MemoryActionTable[CycleDataRead  ])
                                            .as_mut_ptr(),
                                    );
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                587 => {
                                    i = LocateInstanceVariableMapped(
                                        &mut *fp.offset(2  ),
                                        &mut *fp.offset(3  ),
                                        (*cp).operand ,
                                    );
                                    StoreContentsInternal(
                                        i ,
                                        &mut *sp.offset(0  ),
                                        (MemoryActionTable[CycleDataWrite  ])
                                            .as_mut_ptr(),
                                    );
                                    sp = sp.offset(-1);
                                    current_block = 5374579820246837908;
                                }
                                588 => {
                                    i = LocateInstanceVariableMapped(
                                        &mut *fp.offset(2  ),
                                        &mut *fp.offset(3  ),
                                        (*cp).operand ,
                                    );
                                    StoreContentsInternal(
                                        i ,
                                        &mut *sp.offset(0  ),
                                        (MemoryActionTable[CycleDataWrite  ])
                                            .as_mut_ptr(),
                                    );
                                    current_block = 5374579820246837908;
                                }
                                166 => {
                                    i = LocateInstanceVariableMapped(
                                        &mut *fp.offset(2  ),
                                        &mut *fp.offset(3  ),
                                        (*cp).operand ,
                                    );
                                    let mut tag_22: Tag = TypeLocative  as Tag;
                                    let mut data_22: isize = i ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_22 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_22 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                167 => {
                                    if ((*fp.offset(3  )).parts.tag
                                        >> 2
                                        & (((1) << 4)
                                            - 1) )
                                        != TypeInstance  >> 2
                                            & ((1) << 4)
                                                - 1
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    MemoryReadInternal(
                                        ((*fp.offset(3  )).parts.data.u)
                                            .wrapping_add((*cp).operand ) ,
                                        &mut *sp.offset(1  ),
                                        (MemoryActionTable[CycleDataRead  ])
                                            .as_mut_ptr(),
                                    );
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                589 => {
                                    if ((*fp.offset(3  )).parts.tag
                                        >> 2
                                        & (((1) << 4)
                                            - 1) )
                                        != TypeInstance  >> 2
                                            & ((1) << 4)
                                                - 1
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    StoreContentsInternal(
                                        ((*fp.offset(3  )).parts.data.u)
                                            .wrapping_add((*cp).operand ) ,
                                        &mut *sp.offset(0  ),
                                        (MemoryActionTable[CycleDataWrite  ])
                                            .as_mut_ptr(),
                                    );
                                    sp = sp.offset(-1);
                                    current_block = 5374579820246837908;
                                }
                                590 => {
                                    if ((*fp.offset(3  )).parts.tag
                                        >> 2
                                        & (((1) << 4)
                                            - 1) )
                                        != TypeInstance  >> 2
                                            & ((1) << 4)
                                                - 1
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    StoreContentsInternal(
                                        ((*fp.offset(3  )).parts.data.u)
                                            .wrapping_add((*cp).operand ) ,
                                        &mut *sp.offset(0  ),
                                        (MemoryActionTable[CycleDataWrite  ])
                                            .as_mut_ptr(),
                                    );
                                    current_block = 5374579820246837908;
                                }
                                168 => {
                                    if ((*fp.offset(3  )).parts.tag
                                        >> 2
                                        & (((1) << 4)
                                            - 1) )
                                        != TypeInstance  >> 2
                                            & ((1) << 4)
                                                - 1
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let mut tag_23: Tag = TypeLocative  as Tag;
                                    let mut data_23: isize = ((*fp
                                        .offset(3  ))
                                        .parts
                                        .data
                                        .u)
                                        .wrapping_add((*cp).operand ) ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_23 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_23 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                594 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 2951285124245367582;
                                }
                                593 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2951285124245367582;
                                }
                                591 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2951285124245367582;
                                }
                                592 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2951285124245367582;
                                }
                                595 => {
                                    let fresh174 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh174;
                                    current_block = 2951285124245367582;
                                }
                                599 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 14535743487104190231;
                                }
                                598 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14535743487104190231;
                                }
                                596 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14535743487104190231;
                                }
                                597 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14535743487104190231;
                                }
                                600 => {
                                    let fresh175 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh175;
                                    current_block = 14535743487104190231;
                                }
                                604 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 14535743487104190231;
                                }
                                603 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9988527437498954070;
                                }
                                601 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9988527437498954070;
                                }
                                602 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9988527437498954070;
                                }
                                605 => {
                                    let fresh176 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh176;
                                    current_block = 9988527437498954070;
                                }
                                37 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                35 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                36 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                39 => {
                                    let fresh177 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh177;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                614 => {
                                    if (*sp).parts.data.u < (*cp).operand  {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                613 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7251182267454782531;
                                }
                                611 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7251182267454782531;
                                }
                                612 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 7251182267454782531;
                                }
                                615 => {
                                    let fresh178 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh178;
                                    current_block = 7251182267454782531;
                                }
                                619 => {
                                    if (*sp).parts.data.u < (*cp).operand  {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                618 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15506043489740435919;
                                }
                                616 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15506043489740435919;
                                }
                                617 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15506043489740435919;
                                }
                                620 => {
                                    let fresh179 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh179;
                                    current_block = 15506043489740435919;
                                }
                                340 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 15631584754247880358;
                                }
                                339 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15631584754247880358;
                                }
                                337 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15631584754247880358;
                                }
                                338 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15631584754247880358;
                                }
                                341 => {
                                    let fresh180 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh180;
                                    current_block = 15631584754247880358;
                                }
                                555 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 12262589825100025302;
                                }
                                554 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12262589825100025302;
                                }
                                552 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12262589825100025302;
                                }
                                553 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 12262589825100025302;
                                }
                                556 => {
                                    let fresh181 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh181;
                                    current_block = 12262589825100025302;
                                }
                                575 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 12262589825100025302;
                                }
                                574 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9012751000508800643;
                                }
                                572 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9012751000508800643;
                                }
                                573 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9012751000508800643;
                                }
                                576 => {
                                    let fresh184 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh184;
                                    current_block = 9012751000508800643;
                                }
                                400 => {
                                    let ref mut fresh187 = (*sp).parts.data.u;
                                    *fresh187 = (*fresh187 )
                                        .wrapping_add((*cp).operand )
                                        ;
                                    current_block = 5374579820246837908;
                                }
                                399 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14009207377072456151;
                                }
                                397 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14009207377072456151;
                                }
                                398 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14009207377072456151;
                                }
                                401 => {
                                    let fresh188 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh188;
                                    current_block = 14009207377072456151;
                                }
                                405 => {
                                    (*sp)
                                        .parts
                                        .data
                                        .s = ((*sp).parts.data.u)
                                        .wrapping_sub((*cp).operand ) as i32;
                                    (*sp).parts.tag = TypeFixnum ;
                                    current_block = 5374579820246837908;
                                }
                                404 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 3690922541002113235;
                                }
                                402 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 3690922541002113235;
                                }
                                403 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 3690922541002113235;
                                }
                                406 => {
                                    let fresh190 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh190;
                                    current_block = 3690922541002113235;
                                }
                                222 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11755087796664755082;
                                }
                                220 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11755087796664755082;
                                }
                                221 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 11755087796664755082;
                                }
                                250 => {
                                    match (*cp).operand  {
                                        1 => {
                                            current_block = 16359992259461390232;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        2 => {
                                            current_block = 18217134808277679495;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        4 | 3 => {
                                            current_block = 18233728712334059578;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        5 => {
                                            current_block = 8279841908149556180;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        134 => {
                                            current_block = 4202852645221008844;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        262 => {
                                            current_block = 14281312569798187975;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        390 => {
                                            current_block = 8780269144062917800;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        8 => {
                                            current_block = 14783241762875736529;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        10 => {
                                            current_block = 7538114737374167612;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        11 => {
                                            current_block = 8408005208997332924;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        12 => {
                                            current_block = 11597660554013265196;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        13 => {
                                            current_block = 17752089094379503301;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        14 => {
                                            current_block = 368077705793071303;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        15 => {
                                            current_block = 10599305055719375128;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        16 => {
                                            current_block = 11243323766022501552;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        17 => {
                                            current_block = 3752679423778383528;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        19 => {
                                            current_block = 9821707285646747930;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        28 => {
                                            current_block = 5660299509993500242;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        39 => {
                                            current_block = 14735342276309136070;
                                        }
                                        512 => {
                                            current_block = 10239677709581187562;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        513 => {
                                            current_block = 17498960601738880671;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        514 => {
                                            current_block = 3156982973979632839;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        518 => {
                                            current_block = 8918379439458501340;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        515 => {
                                            current_block = 6453987016612474933;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        516 => {
                                            current_block = 7328940265621111474;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        517 => {
                                            current_block = 7268355612939154614;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        522 => {
                                            current_block = 10502594177876353642;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        523 => {
                                            current_block = 13816553114893123275;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        524 => {
                                            current_block = 13857047634195046961;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        525 => {
                                            current_block = 9122380077187141842;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        526 => {
                                            current_block = 10182149907925308815;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        527 => {
                                            current_block = 10477488590406205504;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        528 => {
                                            current_block = 6035610683782574578;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        529 => {
                                            current_block = 8653441502594113860;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        532 => {
                                            current_block = 2690456000008204509;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        534 => {
                                            current_block = 1766208157512002952;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        535 => {
                                            current_block = 3746914282552230354;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        537 => {
                                            current_block = 2963705458052605012;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        544 => {
                                            current_block = 12203427066774248072;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        545 => {
                                            current_block = 5612992428478233094;
                                            match current_block {
                                                5612992428478233094 => {
                                                    *sp.offset(1  ) = ObjectT;
                                                    sp = sp.offset(1);
                                                }
                                                18217134808277679495 => {
                                                    let mut tag_26: Tag = TypeLocative  as Tag;
                                                    let mut data_26: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            lp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_26 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_26 ;
                                                    sp = sp.offset(1);
                                                }
                                                18233728712334059578 => {
                                                    let mut tag_27: Tag = TypeLocative  as Tag;
                                                    let mut data_27: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            sp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_27 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_27 ;
                                                    sp = sp.offset(1);
                                                }
                                                8279841908149556180 => {
                                                    let mut tag_28: Tag = TypeLocative  as Tag;
                                                    let mut data_28: isize = (*ps).StackCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_28 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_28 ;
                                                    sp = sp.offset(1);
                                                }
                                                4202852645221008844 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14281312569798187975 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8780269144062917800 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).bar[1  ].address.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                14783241762875736529 => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                                7538114737374167612 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).continuation.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                8408005208997332924 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).AluAndRotateControl as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11597660554013265196 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).control as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                17752089094379503301 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 3;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                368077705793071303 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).EphemeralOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                10599305055719375128 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ZoneOldspaceRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                11243323766022501552 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 5;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3752679423778383528 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9821707285646747930 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).PreemptRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                5660299509993500242 => {
                                                    let mut tag_29: Tag = TypeLocative  as Tag;
                                                    let mut data_29: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            ((*ps).StackCacheLimit).offset_from((*ps).StackCache)
                                                                ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_29 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_29 ;
                                                    sp = sp.offset(1);
                                                }
                                                10239677709581187562 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*sp.offset(0  )).whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                17498960601738880671 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ArrayEventCount as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                3156982973979632839 => {
                                                    let mut tag_30: Tag = TypeLocative  as Tag;
                                                    let mut data_30: isize = (*ps).BindingStackPointer;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_30 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_30 ;
                                                    sp = sp.offset(1);
                                                }
                                                8918379439458501340 => {
                                                    let mut tag_31: Tag = TypeLocative  as Tag;
                                                    let mut data_31: isize = (*ps).BindingStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_31 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_31 ;
                                                    sp = sp.offset(1);
                                                }
                                                6453987016612474933 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).CatchBlockPointer.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                7328940265621111474 => {
                                                    let mut tag_32: Tag = TypeLocative  as Tag;
                                                    let mut data_32: isize = (*ps).ControlStackLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_32 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_32 ;
                                                    sp = sp.offset(1);
                                                }
                                                7268355612939154614 => {
                                                    let mut tag_33: Tag = TypeLocative  as Tag;
                                                    let mut data_33: isize = (*ps).ControlStackExtraLimit;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_33 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_33 ;
                                                    sp = sp.offset(1);
                                                }
                                                10502594177876353642 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheArea.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13816553114893123275 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).ListCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                13857047634195046961 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).ListCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                9122380077187141842 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheArea.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10182149907925308815 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*ps).StructureCacheAddress.whole
                                                        & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                10477488590406205504 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).StructureCacheLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                6035610683782574578 => {
                                                    let mut tag_34: Tag = TypeLocative  as Tag;
                                                    let mut data_34: isize = (*ps).DynamicBindingCacheBase;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_34 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_34 ;
                                                    sp = sp.offset(1);
                                                }
                                                8653441502594113860 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).DynamicBindingCacheMask as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2690456000008204509 => {
                                                    let mut tag_35: Tag = TypeLocative  as Tag;
                                                    let mut data_35: isize = (*ps).FEPModeTrapVectorAddress;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_35 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_35 ;
                                                    sp = sp.offset(1);
                                                }
                                                1766208157512002952 => {
                                                    let mut tag_36: Tag = TypeLocative  as Tag;
                                                    let mut data_36: isize = (*ps).MappingTableCache;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_36 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_36 ;
                                                    sp = sp.offset(1);
                                                }
                                                3746914282552230354 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = (*ps).MappingTableLength as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                2963705458052605012 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 0x100;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                12203427066774248072 => {
                                                    *sp.offset(1  ) = ObjectNIL;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    let mut tag_25: Tag = TypeLocative  as Tag;
                                                    let mut data_25: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        );
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_25 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_25 ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        0 | 6 | 7 | 135 | 263 | 391 | 9 | 20 | 21 | 22 | 23 | 24
                                        | 25 | 31 | 32 | 33 | 34 | 36 | 37 | 38 | 40 | 519 | 520
                                        | 521 | 530 | 531 | 536 | _ => {
                                            current_block = 5731074241326334034;
                                            break;
                                        }
                                    }
                                }
                                251 => {
                                    match (*cp).operand  {
                                        134 => {
                                            current_block = 13686239381507072326;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        262 => {
                                            current_block = 3406327473283330705;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        390 => {
                                            current_block = 14962707960265879893;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        10 => {
                                            current_block = 5211553503160677787;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        11 => {
                                            current_block = 1636523393144866628;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        12 => {
                                            current_block = 13116890281527953803;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        14 => {
                                            current_block = 2455228792498323072;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        15 => {
                                            current_block = 6082618239964698303;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        19 => {
                                            current_block = 13300134386176516907;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        39 => {
                                            current_block = 9581985533798930560;
                                        }
                                        17 | 512 => {
                                            current_block = 15788611137463682053;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        513 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        514 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        518 => {
                                            current_block = 14497649454555770874;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        515 => {
                                            current_block = 9584618294766380418;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        516 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        517 => {
                                            current_block = 7973643082004955368;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        522 => {
                                            current_block = 5400706330127498633;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        523 => {
                                            current_block = 7313372418977344583;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        524 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        525 => {
                                            current_block = 3031377229406649639;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        526 => {
                                            current_block = 14469755913608586986;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        527 => {
                                            current_block = 12414752556692412193;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        528 => {
                                            current_block = 10104152268711457360;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        529 => {
                                            current_block = 15049178762836129911;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        532 => {
                                            current_block = 18000475564953935197;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        534 => {
                                            current_block = 9437546572126346806;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        535 => {
                                            current_block = 6284557381450107344;
                                            match current_block {
                                                1636523393144866628 => {
                                                    (*ps).AluAndRotateControl = (*sp).parts.data.u ;
                                                    let ref mut fresh192 = (*ps).AluOp;
                                                    *fresh192 = ALUFunctionClass[((*sp).parts.data.u
                                                        >> 14
                                                        & (((1) << 2)
                                                            - 1) )
                                                        ];
                                                    (*ps)
                                                        .ByteSize = ((*sp).parts.data.u >> 5
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                    (*ps)
                                                        .ByteRotate = ((*sp).parts.data.u >> 0
                                                        & (((1) << 5)
                                                            - 1) )
                                                        ;
                                                }
                                                13686239381507072326 => {
                                                    (*ps).bar[1  ].address = *sp;
                                                }
                                                3406327473283330705 => {
                                                    (*ps).bar[2  ].address = *sp;
                                                }
                                                14962707960265879893 => {
                                                    (*ps).bar[3  ].address = *sp;
                                                }
                                                5211553503160677787 => {
                                                    (*ps).continuation = *sp;
                                                }
                                                13116890281527953803 => {
                                                    (*ps)
                                                        .control = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                2455228792498323072 => {
                                                    (*ps)
                                                        .EphemeralOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6082618239964698303 => {
                                                    (*ps)
                                                        .ZoneOldspaceRegister = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                13300134386176516907 => {
                                                    (*ps)
                                                        .PreemptRegister = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                218747262665541458 => {
                                                    (*ps).ArrayEventCount = (*sp).parts.data.u ;
                                                }
                                                4142149688065477410 => {
                                                    (*ps).BindingStackPointer = (*sp).parts.data.u ;
                                                }
                                                14497649454555770874 => {
                                                    (*ps).BindingStackLimit = (*sp).parts.data.u ;
                                                }
                                                9584618294766380418 => {
                                                    (*ps).CatchBlockPointer = *sp;
                                                }
                                                11742859648667696368 => {
                                                    (*ps)
                                                        .ControlStackLimit = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                7973643082004955368 => {
                                                    (*ps)
                                                        .ControlStackExtraLimit = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                5400706330127498633 => {
                                                    (*ps).ListCacheArea = *sp;
                                                }
                                                7313372418977344583 => {
                                                    (*ps).ListCacheAddress = *sp;
                                                }
                                                17502623293752361944 => {
                                                    (*ps).ListCacheLength = (*sp).parts.data.u ;
                                                }
                                                3031377229406649639 => {
                                                    (*ps).StructureCacheArea = *sp;
                                                }
                                                14469755913608586986 => {
                                                    (*ps).StructureCacheAddress = *sp;
                                                }
                                                12414752556692412193 => {
                                                    (*ps).StructureCacheLength = (*sp).parts.data.u ;
                                                }
                                                10104152268711457360 => {
                                                    (*ps)
                                                        .DynamicBindingCacheBase = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                15049178762836129911 => {
                                                    (*ps)
                                                        .DynamicBindingCacheMask = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                18000475564953935197 => {
                                                    (*ps)
                                                        .FEPModeTrapVectorAddress = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                9437546572126346806 => {
                                                    (*ps)
                                                        .MappingTableCache = (*sp.offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                6284557381450107344 => {
                                                    (*ps)
                                                        .MappingTableLength = (*sp
                                                        .offset(0  ))
                                                        .parts
                                                        .data
                                                        .u ;
                                                }
                                                _ => {}
                                            }
                                            sp = sp.offset(-1);
                                            current_block = 5374579820246837908;
                                        }
                                        1 | 2 | 3 | 5 | 6 | 20 | 21 | 22 | 23 | 26 | 154 | 282 | 410
                                        | 27 | 155 | 283 | 411 | 28 | 31 | 34 | 37 | 38 | 42 | 170
                                        | 298 | 426 | 519 | 520 | 521 | 530 | 531 | 536 | 537
                                        | _ => {
                                            current_block = 5731074241326334034;
                                            break;
                                        }
                                    }
                                }
                                252 => {
                                    match (*cp).operand  {
                                        514 => {
                                            current_block = 14735342276309136070;
                                        }
                                        576 => {
                                            current_block = 4782851735607446965;
                                            match current_block {
                                                388719077405878112 => {
                                                    (*sp.offset(1  ))
                                                        .whole = VM.DataRegister.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                16619186275688283349 => {
                                                    let mut tag_37: Tag = TypeLocative  as Tag;
                                                    let mut data_37: isize = VM.AddressRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_37 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_37 ;
                                                    sp = sp.offset(1);
                                                }
                                                11446856665554274158 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.ExtentRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                13869566032163556653 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.AttributesRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                15279089748634805719 => {
                                                    let mut tag_38: Tag = TypeLocative  as Tag;
                                                    let mut data_38: isize = VM.DestinationRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_38 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_38 ;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.CommandRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        577 => {
                                            current_block = 16619186275688283349;
                                            match current_block {
                                                388719077405878112 => {
                                                    (*sp.offset(1  ))
                                                        .whole = VM.DataRegister.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                16619186275688283349 => {
                                                    let mut tag_37: Tag = TypeLocative  as Tag;
                                                    let mut data_37: isize = VM.AddressRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_37 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_37 ;
                                                    sp = sp.offset(1);
                                                }
                                                11446856665554274158 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.ExtentRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                13869566032163556653 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.AttributesRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                15279089748634805719 => {
                                                    let mut tag_38: Tag = TypeLocative  as Tag;
                                                    let mut data_38: isize = VM.DestinationRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_38 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_38 ;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.CommandRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        578 => {
                                            current_block = 11446856665554274158;
                                            match current_block {
                                                388719077405878112 => {
                                                    (*sp.offset(1  ))
                                                        .whole = VM.DataRegister.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                16619186275688283349 => {
                                                    let mut tag_37: Tag = TypeLocative  as Tag;
                                                    let mut data_37: isize = VM.AddressRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_37 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_37 ;
                                                    sp = sp.offset(1);
                                                }
                                                11446856665554274158 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.ExtentRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                13869566032163556653 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.AttributesRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                15279089748634805719 => {
                                                    let mut tag_38: Tag = TypeLocative  as Tag;
                                                    let mut data_38: isize = VM.DestinationRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_38 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_38 ;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.CommandRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        579 => {
                                            current_block = 13869566032163556653;
                                            match current_block {
                                                388719077405878112 => {
                                                    (*sp.offset(1  ))
                                                        .whole = VM.DataRegister.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                16619186275688283349 => {
                                                    let mut tag_37: Tag = TypeLocative  as Tag;
                                                    let mut data_37: isize = VM.AddressRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_37 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_37 ;
                                                    sp = sp.offset(1);
                                                }
                                                11446856665554274158 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.ExtentRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                13869566032163556653 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.AttributesRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                15279089748634805719 => {
                                                    let mut tag_38: Tag = TypeLocative  as Tag;
                                                    let mut data_38: isize = VM.DestinationRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_38 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_38 ;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.CommandRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        580 => {
                                            current_block = 15279089748634805719;
                                            match current_block {
                                                388719077405878112 => {
                                                    (*sp.offset(1  ))
                                                        .whole = VM.DataRegister.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                16619186275688283349 => {
                                                    let mut tag_37: Tag = TypeLocative  as Tag;
                                                    let mut data_37: isize = VM.AddressRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_37 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_37 ;
                                                    sp = sp.offset(1);
                                                }
                                                11446856665554274158 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.ExtentRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                13869566032163556653 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.AttributesRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                15279089748634805719 => {
                                                    let mut tag_38: Tag = TypeLocative  as Tag;
                                                    let mut data_38: isize = VM.DestinationRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_38 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_38 ;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.CommandRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        581 => {
                                            current_block = 388719077405878112;
                                            match current_block {
                                                388719077405878112 => {
                                                    (*sp.offset(1  ))
                                                        .whole = VM.DataRegister.whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                16619186275688283349 => {
                                                    let mut tag_37: Tag = TypeLocative  as Tag;
                                                    let mut data_37: isize = VM.AddressRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_37 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_37 ;
                                                    sp = sp.offset(1);
                                                }
                                                11446856665554274158 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.ExtentRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                13869566032163556653 => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.AttributesRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                15279089748634805719 => {
                                                    let mut tag_38: Tag = TypeLocative  as Tag;
                                                    let mut data_38: isize = VM.DestinationRegister;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_38 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_38 ;
                                                    sp = sp.offset(1);
                                                }
                                                _ => {
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = VM.CommandRegister as i32;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                            }
                                            current_block = 5374579820246837908;
                                        }
                                        _ => {
                                            current_block = 5731074241326334034;
                                            break;
                                        }
                                    }
                                }
                                253 => {
                                    match (*cp).operand  {
                                        520 => {
                                            current_block = 6802740918435369298;
                                            match current_block {
                                                10558808168504307527 => {
                                                    VM.DataRegister = *sp;
                                                }
                                                15976236241180523373 => {
                                                    VM
                                                        .CommandRegister = VMCommand(
                                                        (*sp).parts.data.u,
                                                    ) ;
                                                }
                                                7892630730311486562 => {
                                                    VM.AddressRegister = (*sp).parts.data.u ;
                                                }
                                                6517969904159728202 => {
                                                    VM.ExtentRegister = (*sp).parts.data.u ;
                                                }
                                                11264343836997168956 => {
                                                    VM.AttributesRegister = (*sp).parts.data.u ;
                                                }
                                                4402380113086502923 => {
                                                    VM.DestinationRegister = (*sp).parts.data.u ;
                                                }
                                                _ => {
                                                    SendInterruptToLifeSupport();
                                                }
                                            }
                                            current_block = 9581985533798930560;
                                        }
                                        514 => {
                                            current_block = 9581985533798930560;
                                        }
                                        576 => {
                                            current_block = 15976236241180523373;
                                            match current_block {
                                                10558808168504307527 => {
                                                    VM.DataRegister = *sp;
                                                }
                                                15976236241180523373 => {
                                                    VM
                                                        .CommandRegister = VMCommand(
                                                        (*sp).parts.data.u,
                                                    ) ;
                                                }
                                                7892630730311486562 => {
                                                    VM.AddressRegister = (*sp).parts.data.u ;
                                                }
                                                6517969904159728202 => {
                                                    VM.ExtentRegister = (*sp).parts.data.u ;
                                                }
                                                11264343836997168956 => {
                                                    VM.AttributesRegister = (*sp).parts.data.u ;
                                                }
                                                4402380113086502923 => {
                                                    VM.DestinationRegister = (*sp).parts.data.u ;
                                                }
                                                _ => {
                                                    SendInterruptToLifeSupport();
                                                }
                                            }
                                            current_block = 9581985533798930560;
                                        }
                                        577 => {
                                            current_block = 7892630730311486562;
                                            match current_block {
                                                10558808168504307527 => {
                                                    VM.DataRegister = *sp;
                                                }
                                                15976236241180523373 => {
                                                    VM
                                                        .CommandRegister = VMCommand(
                                                        (*sp).parts.data.u,
                                                    ) ;
                                                }
                                                7892630730311486562 => {
                                                    VM.AddressRegister = (*sp).parts.data.u ;
                                                }
                                                6517969904159728202 => {
                                                    VM.ExtentRegister = (*sp).parts.data.u ;
                                                }
                                                11264343836997168956 => {
                                                    VM.AttributesRegister = (*sp).parts.data.u ;
                                                }
                                                4402380113086502923 => {
                                                    VM.DestinationRegister = (*sp).parts.data.u ;
                                                }
                                                _ => {
                                                    SendInterruptToLifeSupport();
                                                }
                                            }
                                            current_block = 9581985533798930560;
                                        }
                                        578 => {
                                            current_block = 6517969904159728202;
                                            match current_block {
                                                10558808168504307527 => {
                                                    VM.DataRegister = *sp;
                                                }
                                                15976236241180523373 => {
                                                    VM
                                                        .CommandRegister = VMCommand(
                                                        (*sp).parts.data.u,
                                                    ) ;
                                                }
                                                7892630730311486562 => {
                                                    VM.AddressRegister = (*sp).parts.data.u ;
                                                }
                                                6517969904159728202 => {
                                                    VM.ExtentRegister = (*sp).parts.data.u ;
                                                }
                                                11264343836997168956 => {
                                                    VM.AttributesRegister = (*sp).parts.data.u ;
                                                }
                                                4402380113086502923 => {
                                                    VM.DestinationRegister = (*sp).parts.data.u ;
                                                }
                                                _ => {
                                                    SendInterruptToLifeSupport();
                                                }
                                            }
                                            current_block = 9581985533798930560;
                                        }
                                        579 => {
                                            current_block = 11264343836997168956;
                                            match current_block {
                                                10558808168504307527 => {
                                                    VM.DataRegister = *sp;
                                                }
                                                15976236241180523373 => {
                                                    VM
                                                        .CommandRegister = VMCommand(
                                                        (*sp).parts.data.u,
                                                    ) ;
                                                }
                                                7892630730311486562 => {
                                                    VM.AddressRegister = (*sp).parts.data.u ;
                                                }
                                                6517969904159728202 => {
                                                    VM.ExtentRegister = (*sp).parts.data.u ;
                                                }
                                                11264343836997168956 => {
                                                    VM.AttributesRegister = (*sp).parts.data.u ;
                                                }
                                                4402380113086502923 => {
                                                    VM.DestinationRegister = (*sp).parts.data.u ;
                                                }
                                                _ => {
                                                    SendInterruptToLifeSupport();
                                                }
                                            }
                                            current_block = 9581985533798930560;
                                        }
                                        580 => {
                                            current_block = 4402380113086502923;
                                            match current_block {
                                                10558808168504307527 => {
                                                    VM.DataRegister = *sp;
                                                }
                                                15976236241180523373 => {
                                                    VM
                                                        .CommandRegister = VMCommand(
                                                        (*sp).parts.data.u,
                                                    ) ;
                                                }
                                                7892630730311486562 => {
                                                    VM.AddressRegister = (*sp).parts.data.u ;
                                                }
                                                6517969904159728202 => {
                                                    VM.ExtentRegister = (*sp).parts.data.u ;
                                                }
                                                11264343836997168956 => {
                                                    VM.AttributesRegister = (*sp).parts.data.u ;
                                                }
                                                4402380113086502923 => {
                                                    VM.DestinationRegister = (*sp).parts.data.u ;
                                                }
                                                _ => {
                                                    SendInterruptToLifeSupport();
                                                }
                                            }
                                            current_block = 9581985533798930560;
                                        }
                                        581 => {
                                            current_block = 10558808168504307527;
                                            match current_block {
                                                10558808168504307527 => {
                                                    VM.DataRegister = *sp;
                                                }
                                                15976236241180523373 => {
                                                    VM
                                                        .CommandRegister = VMCommand(
                                                        (*sp).parts.data.u,
                                                    ) ;
                                                }
                                                7892630730311486562 => {
                                                    VM.AddressRegister = (*sp).parts.data.u ;
                                                }
                                                6517969904159728202 => {
                                                    VM.ExtentRegister = (*sp).parts.data.u ;
                                                }
                                                11264343836997168956 => {
                                                    VM.AttributesRegister = (*sp).parts.data.u ;
                                                }
                                                4402380113086502923 => {
                                                    VM.DestinationRegister = (*sp).parts.data.u ;
                                                }
                                                _ => {
                                                    SendInterruptToLifeSupport();
                                                }
                                            }
                                            current_block = 9581985533798930560;
                                        }
                                        _ => {
                                            current_block = 5731074241326334034;
                                            break;
                                        }
                                    }
                                }
                                177 => {
                                    let mut cycle_0: u32 = ((*cp).operand
                                        & 0o1700) >> 6;
                                    let mut fixnum_only_0: u32 = (*cp).operand
                                        & 0o40;
                                    let mut cdr_next_0: u32 = (*cp).operand
                                        & 0o20;
                                    MemoryReadInternal(
                                        (*sp).parts.data.u ,
                                        scratch,
                                        (MemoryActionTable[cycle_0 ]).as_mut_ptr(),
                                    );
                                    if fixnum_only_0 != 0
                                        && !(((*scratch).parts.tag
                                            ^ TypeFixnum)
                                            & (((1) << 6)
                                                - 1)
                                            == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    *sp = *scratch;
                                    if cdr_next_0 != 0 {
                                        (*sp)
                                            .parts
                                            .tag = (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1) ;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                178 => {
                                    let mut cycle_1: u32 = ((*cp).operand
                                        & 0o1700) >> 6;
                                    let mut fixnum_only_1: u32 = (*cp).operand
                                        & 0o40;
                                    let mut cdr_next_1: u32 = (*cp).operand
                                        & 0o20;
                                    let mut vma_10: isize = (*sp).parts.data.u ;
                                    vma_10 = MemoryReadInternal(
                                        vma_10,
                                        scratch,
                                        (MemoryActionTable[cycle_1 ]).as_mut_ptr(),
                                    );
                                    if fixnum_only_1 != 0
                                        && !(((*scratch).parts.tag
                                            ^ TypeFixnum)
                                            & (((1) << 6)
                                                - 1)
                                            == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    (*sp).parts.data.u = vma_10 ;
                                    if cdr_next_1 != 0 {
                                        (*sp)
                                            .parts
                                            .tag = (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1) ;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                53 => {
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .s = TypeFixnum;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = TypeFixnum ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                52 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14128864248265317700;
                                }
                                50 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14128864248265317700;
                                }
                                51 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 14128864248265317700;
                                }
                                54 => {
                                    let fresh193 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh193;
                                    current_block = 14128864248265317700;
                                }
                                609 => {
                                    (*sp).parts.tag = (*cp).operand ;
                                    current_block = 5374579820246837908;
                                }
                                608 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15374978945600474034;
                                }
                                606 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15374978945600474034;
                                }
                                607 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15374978945600474034;
                                }
                                610 => {
                                    let fresh194 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh194;
                                    current_block = 15374978945600474034;
                                }
                                415 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 15301857613943493681;
                                }
                                414 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15301857613943493681;
                                }
                                412 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15301857613943493681;
                                }
                                413 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 15301857613943493681;
                                }
                                416 => {
                                    let fresh195 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh195;
                                    current_block = 15301857613943493681;
                                }
                                420 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 13190219999512357664;
                                }
                                419 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13190219999512357664;
                                }
                                417 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13190219999512357664;
                                }
                                418 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 13190219999512357664;
                                }
                                421 => {
                                    let fresh196 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh196;
                                    current_block = 13190219999512357664;
                                }
                                425 => {
                                    op2 = &mut immediate;
                                    (*op2).parts.data.s = (*cp).operand;
                                    current_block = 10069592260942132329;
                                }
                                424 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10069592260942132329;
                                }
                                422 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10069592260942132329;
                                }
                                423 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10069592260942132329;
                                }
                                426 => {
                                    let fresh197 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh197;
                                    current_block = 10069592260942132329;
                                }
                                227 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10405005200513409987;
                                }
                                225 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10405005200513409987;
                                }
                                226 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 10405005200513409987;
                                }
                                232 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 4524171864612850827;
                                }
                                230 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 4524171864612850827;
                                }
                                231 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 4524171864612850827;
                                }
                                633 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9924490020858000456;
                                }
                                631 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9924490020858000456;
                                }
                                632 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 9924490020858000456;
                                }
                                47 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2113209135408378170;
                                    break;
                                }
                                45 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2113209135408378170;
                                    break;
                                }
                                46 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 2113209135408378170;
                                    break;
                                }
                                49 => {
                                    let fresh198 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh198;
                                    current_block = 2113209135408378170;
                                    break;
                                }
                                140 | 630 | 118 => {
                                    current_block = 5374579820246837908;
                                }
                                119 => {
                                    current_block = 6276274620003476740;
                                    break;
                                }
                                662 => {
                                    MemoryReadInternal(
                                        (*cp).operand ,
                                        sp.offset(1  ),
                                        (MemoryActionTable[CycleDataRead  ])
                                            .as_mut_ptr(),
                                    );
                                    sp = sp.offset(1);
                                    let ref mut fresh199 = (*sp).parts.tag;
                                    *fresh199
                                        &= (((1) << 6)
                                            - 1) ;
                                    current_block = 5374579820246837908;
                                }
                                666 => {
                                    let mut tag_39: Tag = TypeFixnum  as Tag;
                                    let mut data_39: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_39 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_39 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                667 => {
                                    let mut tag_40: Tag = TypeSmallRatio  as Tag;
                                    let mut data_40: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_40 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_40 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                668 => {
                                    let mut tag_41: Tag = TypeSingleFloat  as Tag;
                                    let mut data_41: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_41 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_41 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                669 => {
                                    let mut tag_42: Tag = TypeDoubleFloat  as Tag;
                                    let mut data_42: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_42 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_42 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                670 => {
                                    let mut tag_43: Tag = TypeBignum  as Tag;
                                    let mut data_43: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_43 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_43 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                671 => {
                                    let mut tag_44: Tag = TypeBigRatio  as Tag;
                                    let mut data_44: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_44 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_44 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                672 => {
                                    let mut tag_45: Tag = TypeComplex  as Tag;
                                    let mut data_45: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_45 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_45 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                673 => {
                                    let mut tag_46: Tag = TypeSpareNumber  as Tag;
                                    let mut data_46: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_46 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_46 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                674 => {
                                    let mut tag_47: Tag = TypeInstance  as Tag;
                                    let mut data_47: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_47 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_47 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                675 => {
                                    let mut tag_48: Tag = TypeListInstance
                                        as Tag;
                                    let mut data_48: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_48 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_48 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                676 => {
                                    let mut tag_49: Tag = TypeArrayInstance
                                        as Tag;
                                    let mut data_49: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_49 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_49 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                677 => {
                                    let mut tag_50: Tag = TypeStringInstance
                                        as Tag;
                                    let mut data_50: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_50 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_50 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                678 => {
                                    let mut tag_51: Tag = TypeNIL  as Tag;
                                    let mut data_51: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_51 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_51 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                679 => {
                                    let mut tag_52: Tag = TypeList  as Tag;
                                    let mut data_52: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_52 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_52 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                680 => {
                                    let mut tag_53: Tag = TypeArray  as Tag;
                                    let mut data_53: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_53 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_53 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                681 => {
                                    let mut tag_54: Tag = TypeString  as Tag;
                                    let mut data_54: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_54 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_54 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                682 => {
                                    let mut tag_55: Tag = TypeSymbol  as Tag;
                                    let mut data_55: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_55 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_55 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                683 => {
                                    let mut tag_56: Tag = TypeLocative  as Tag;
                                    let mut data_56: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_56 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_56 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                684 => {
                                    let mut tag_57: Tag = TypeLexicalClosure
                                        as Tag;
                                    let mut data_57: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_57 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_57 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                685 => {
                                    let mut tag_58: Tag = TypeDynamicClosure
                                        as Tag;
                                    let mut data_58: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_58 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_58 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                686 => {
                                    let mut tag_59: Tag = TypeCompiledFunction
                                        as Tag;
                                    let mut data_59: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_59 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_59 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                687 => {
                                    let mut tag_60: Tag = TypeGenericFunction
                                        as Tag;
                                    let mut data_60: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_60 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_60 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                688 => {
                                    let mut tag_61: Tag = TypeSparePointer1
                                        as Tag;
                                    let mut data_61: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_61 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_61 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                689 => {
                                    let mut tag_62: Tag = TypeSparePointer2
                                        as Tag;
                                    let mut data_62: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_62 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_62 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                690 => {
                                    let mut tag_63: Tag = TypePhysicalAddress
                                        as Tag;
                                    let mut data_63: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_63 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_63 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                691 => {
                                    let mut tag_64: Tag = TypeSpareImmediate1
                                        as Tag;
                                    let mut data_64: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_64 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_64 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                692 => {
                                    let mut tag_65: Tag = TypeBoundLocation
                                        as Tag;
                                    let mut data_65: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_65 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_65 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                693 => {
                                    let mut tag_66: Tag = TypeCharacter  as Tag;
                                    let mut data_66: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_66 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_66 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                694 => {
                                    let mut tag_67: Tag = TypeLogicVariable
                                        as Tag;
                                    let mut data_67: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_67 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_67 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                695 => {
                                    let mut tag_68: Tag = TypeGCForward  as Tag;
                                    let mut data_68: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_68 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_68 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                696 => {
                                    let mut tag_69: Tag = TypeEvenPC  as Tag;
                                    let mut data_69: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_69 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_69 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                697 => {
                                    let mut tag_70: Tag = TypeOddPC  as Tag;
                                    let mut data_70: isize = (*cp).operand ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_70 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_70 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                57 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                55 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                56 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                59 => {
                                    let fresh200 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh200;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                434 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                432 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                433 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                436 => {
                                    let fresh201 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh201;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                149 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                147 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                148 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                151 => {
                                    let fresh202 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh202;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                62 => {
                                    op2 = &mut *sp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                60 => {
                                    op2 = &mut *fp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                61 => {
                                    op2 = &mut *lp.offset((*cp).operand )
                                        as *mut LispObj;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                64 => {
                                    let fresh203 = sp;
                                    sp = sp.offset(-1);
                                    op2 = fresh203;
                                    current_block = 18241021006505011791;
                                    break;
                                }
                                723 | 18 | 23 | 73 | 440 | 445 | 38 | 114 | 115 | 116 | 150
                                | 117 | 63 | _ => {
                                    current_block = 18241021006505011791;
                                    break;
                                }
                            }
                            match current_block {
                                10069592260942132329 => {
                                    if ((*sp).parts.tag
                                        ^ TypePhysicalAddress)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    StoreContentsInternal(
                                        (*sp).parts.data.u ,
                                        op2,
                                        (MemoryActionTable[CycleRaw  ])
                                            .as_mut_ptr(),
                                    );
                                    sp = sp.offset(-1);
                                    current_block = 5374579820246837908;
                                }
                                13190219999512357664 => {
                                    if ((*sp.offset(0  )).parts.tag
                                        ^ TypePhysicalAddress)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    WriteVirtualMemory(
                                        (*sp.offset(0  )).parts.data.u
                                            ,
                                        op2,
                                    );
                                    sp = sp.offset(-1);
                                    current_block = 5374579820246837908;
                                }
                                15301857613943493681 => {
                                    if ((*sp.offset(-(1) )).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                        ^ TypeLocative)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                    {
                                        let mut vma_11: isize = MemoryReadInternal(
                                            (*sp.offset(-(1) )).parts.data.u
                                                ,
                                            scratch,
                                            (MemoryActionTable[CycleDataRead  ])
                                                .as_mut_ptr(),
                                        );
                                        if ((*sp.offset(0  )).whole
                                            ^ (*scratch).whole) & !ObjectCdrMask.whole
                                            == 0
                                        {
                                            WriteVirtualMemory(vma_11, op2);
                                            sp = sp.offset(-1);
                                            *sp = ObjectT;
                                        } else {
                                            sp = sp.offset(-1);
                                            *sp = ObjectNIL;
                                        }
                                    } else if (*sp.offset(-(1) ))
                                        .parts
                                        .tag & 0o76
                                        == (TypeSparePointer1  & 0o76)

                                        || (*sp.offset(-(1) )).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                            == TypeSpareImmediate1
                                        || (*sp.offset(-(1) )).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                            == TypeSpareNumber
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    } else {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                15374978945600474034 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    (*sp).parts.tag = (*op2).parts.data.u;
                                    current_block = 5374579820246837908;
                                }
                                14735342276309136070 => {
                                    let mut tps: libc::c_long = sysconf(
                                        _SC_CLK_TCK,
                                    );
                                    let mut tms: tms = tms {
                                        tms_utime: 0,
                                        tms_stime: 0,
                                        tms_cutime: 0,
                                        tms_cstime: 0,
                                    };
                                    times(&mut tms);
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .s = ((tms.tms_utime + tms.tms_stime)
                                        * 1000000   / tps)
                                         as i32;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = TypeFixnum ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                9012751000508800643 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if !(((*ps).StructureCacheArea.whole ^ (*sp).whole)
                                        & !ObjectCdrMask.whole == 0)
                                        || (*op2).parts.data.u
                                            > (*ps).StructureCacheLength
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    (*sp)
                                        .whole = (*ps).StructureCacheAddress.whole
                                        & !ObjectCdrMask.whole;
                                    (*ps)
                                        .bar[1  ]
                                        .address = (*ps).StructureCacheAddress;
                                    if (((*ps).control >> 30
                                        & (((1) << 2)
                                            - 1)))
                                        < 1
                                    {
                                        (*ps)
                                            .control = ((1
                                            & ((1) << 2)
                                                - 1) << 30)
                                            | (*ps).control
                                                & !((((1) << 2)
                                                    - 1) << 30);
                                    }
                                    let ref mut fresh185 = (*ps).StructureCacheLength;
                                    *fresh185 = (*fresh185)
                                        .wrapping_sub((*op2).parts.data.u)
                                       ;
                                    let ref mut fresh186 = (*ps)
                                        .StructureCacheAddress
                                        .parts
                                        .data
                                        .u;
                                    *fresh186 = (*fresh186 )
                                        .wrapping_add((*op2).parts.data.u)  ;
                                    current_block = 5374579820246837908;
                                }
                                12262589825100025302 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if !(((*ps).ListCacheArea.whole ^ (*sp).whole)
                                        & !ObjectCdrMask.whole == 0)
                                        || (*op2).parts.data.u
                                            > (*ps).ListCacheLength
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    (*sp)
                                        .whole = (*ps).ListCacheAddress.whole
                                        & !ObjectCdrMask.whole;
                                    (*ps)
                                        .bar[1  ]
                                        .address = (*ps).ListCacheAddress;
                                    if (((*ps).control >> 30
                                        & (((1) << 2)
                                            - 1)))
                                        < 1
                                    {
                                        (*ps)
                                            .control = ((1
                                            & ((1) << 2)
                                                - 1) << 30)
                                            | (*ps).control
                                                & !((((1) << 2)
                                                    - 1) << 30);
                                    }
                                    let ref mut fresh182 = (*ps).ListCacheLength;
                                    *fresh182 = (*fresh182)
                                        .wrapping_sub((*op2).parts.data.u)
                                       ;
                                    let ref mut fresh183 = (*ps).ListCacheAddress.parts.data.u;
                                    *fresh183 = (*fresh183 )
                                        .wrapping_add((*op2).parts.data.u)  ;
                                    current_block = 5374579820246837908;
                                }
                                15631584754247880358 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    let mut result: isize = 0;
                                    (*ps).ALUOverflow = false;
                                    result = ::std::mem::transmute::<
                                        _,
                                        fn(_, _, _) -> isize,
                                    >(
                                        (Some(((*ps).AluOp).expect("non-null function pointer")))
                                            .expect("non-null function pointer"),
                                    )(
                                        (*ps).AluAndRotateControl,
                                        (*sp).parts.data.u,
                                        (*op2).parts.data.u,
                                    );
                                    if (*ps).ALUOverflow != 0 {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    (*sp).parts.data.u = result ;
                                    current_block = 5374579820246837908;
                                }
                                9988527437498954070 => {
                                    i = LocateArbitraryInstanceVariable(sp, op2);
                                    let mut tag_24: Tag = TypeLocative  as Tag;
                                    let mut data_24: isize = i ;
                                    (*sp).parts.tag = tag_24 ;
                                    (*sp).parts.data.u = data_24 ;
                                    current_block = 5374579820246837908;
                                }
                                14535743487104190231 => {
                                    i = LocateArbitraryInstanceVariable(
                                        &mut *sp.offset(-(1) ),
                                        op2,
                                    );
                                    StoreContentsInternal(
                                        i ,
                                        &mut *sp.offset(0  ),
                                        (MemoryActionTable[CycleDataWrite  ])
                                            .as_mut_ptr(),
                                    );
                                    sp = sp.offset(-(2  ));
                                    current_block = 5374579820246837908;
                                }
                                2951285124245367582 => {
                                    i = LocateArbitraryInstanceVariable(sp, op2);
                                    MemoryReadInternal(
                                        i ,
                                        scratch,
                                        (MemoryActionTable[CycleDataRead  ])
                                            .as_mut_ptr(),
                                    );
                                    (*sp).whole = (*scratch).whole & !ObjectCdrMask.whole;
                                    current_block = 5374579820246837908;
                                }
                                5913826281391087025 => {
                                    match (*op2).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                    {
                                        21 | 25 => {}
                                        _ => {
                                            current_block = 4843221280033581897;
                                            break;
                                        }
                                    }
                                    StoreContentsInternal(
                                        ((*op2).parts.data.u)
                                            .wrapping_add(
                                                ((*cp).instruction >> 10
                                                    & (((1) << 3)
                                                        - 1) )
                                                    ,
                                            ) ,
                                        sp,
                                        (MemoryActionTable[CycleDataWrite  ])
                                            .as_mut_ptr(),
                                    );
                                    current_block = 5374579820246837908;
                                }
                                17910007212919220055 => {
                                    match (*op2).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                    {
                                        21 | 25 => {}
                                        _ => {
                                            current_block = 4843221280033581897;
                                            break;
                                        }
                                    }
                                    StoreContentsInternal(
                                        ((*op2).parts.data.u)
                                            .wrapping_add(
                                                ((*cp).instruction >> 10
                                                    & (((1) << 3)
                                                        - 1) )
                                                    ,
                                            ) ,
                                        sp,
                                        (MemoryActionTable[CycleDataWrite  ])
                                            .as_mut_ptr(),
                                    );
                                    sp = sp.offset(-1);
                                    current_block = 5374579820246837908;
                                }
                                11319161444365677979 => {
                                    match (*op2).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                    {
                                        21 | 25 => {}
                                        _ => {
                                            current_block = 4843221280033581897;
                                            break;
                                        }
                                    }
                                    MemoryReadInternal(
                                        ((*op2).parts.data.u)
                                            .wrapping_add(
                                                ((*cp).instruction >> 10
                                                    & (((1) << 3)
                                                        - 1) )
                                                    ,
                                            ) ,
                                        scratch,
                                        (MemoryActionTable[CycleDataRead  ])
                                            .as_mut_ptr(),
                                    );
                                    (*sp.offset(1  ))
                                        .whole = (*scratch).whole & !ObjectCdrMask.whole;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                11410898250562780541 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeLocative)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 5428624171862246401;
                                        break;
                                    }
                                    if (*ps).DeepBoundP != 0 {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    while (*ps).BindingStackPointer
                                        > (*op2).parts.data.u
                                    {
                                        if Unbind() != 0 {
                                            current_block = 4843221280033581897;
                                            break 'c_3383;
                                        }
                                    }
                                    current_block = 5374579820246837908;
                                }
                                7553509812227422774 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                        || (*ps).DeepBoundP  != 0
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    i = (*op2).parts.data.u;
                                    loop {
                                        let fresh169 = i;
                                        i = i - 1;
                                        if !(fresh169 != 0) {
                                            break;
                                        }
                                        if Unbind() != 0 {
                                            current_block = 4843221280033581897;
                                            break 'c_3383;
                                        }
                                    }
                                    current_block = 5374579820246837908;
                                }
                                15416092740237289663 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeLocative)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 5428624171862246401;
                                        break;
                                    }
                                    let mut loc_0: QWord = *op2;
                                    if (*ps).BindingStackPointer >= (*ps).BindingStackLimit
                                        || (*ps).DeepBoundP  != 0
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    MemoryReadInternal(
                                        loc_0.parts.data.u ,
                                        scratch,
                                        (MemoryActionTable[CycleBindRead  ])
                                            .as_mut_ptr(),
                                    );
                                    loc_0.parts.tag
                                        |= ((((*ps).control >> 25
                                            & (((1) << 1)
                                                - 1)))
                                            << 6) ;
                                    WriteVirtualMemory(
                                        ((*ps).BindingStackPointer)
                                            .wrapping_add(1),
                                        &mut loc_0,
                                    );
                                    WriteVirtualMemory(
                                        ((*ps).BindingStackPointer)
                                            .wrapping_add(2),
                                        scratch,
                                    );
                                    (*ps)
                                        .control = ((1
                                        & ((1) << 1)
                                            - 1) << 25)
                                        | (*ps).control
                                            & !((((1) << 1)
                                                - 1) << 25);
                                    let ref mut fresh167 = (*ps).BindingStackPointer;
                                    *fresh167 = (*fresh167)
                                        .wrapping_add(2)
                                        ;
                                    current_block = 5374579820246837908;
                                }
                                12667290879508966804 => {
                                    if !(((*sp).parts.tag
                                        ^ TypeLocative)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 17903399028313266107;
                                        break;
                                    }
                                    let fresh164 = sp;
                                    sp = sp.offset(-1);
                                    let mut loc: QWord = *fresh164;
                                    if (*ps).BindingStackPointer >= (*ps).BindingStackLimit
                                        || (*ps).DeepBoundP  != 0
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    MemoryReadInternal(
                                        loc.parts.data.u ,
                                        scratch,
                                        (MemoryActionTable[CycleBindRead  ])
                                            .as_mut_ptr(),
                                    );
                                    loc.parts.tag
                                        |= ((((*ps).control >> 25
                                            & (((1) << 1)
                                                - 1)))
                                            << 6) ;
                                    WriteVirtualMemory(
                                        ((*ps).BindingStackPointer)
                                            .wrapping_add(1),
                                        &mut loc,
                                    );
                                    WriteVirtualMemory(
                                        ((*ps).BindingStackPointer)
                                            .wrapping_add(2),
                                        scratch,
                                    );
                                    StoreContentsInternal(
                                        loc.parts.data.u ,
                                        op2,
                                        (MemoryActionTable[CycleBindWrite  ])
                                            .as_mut_ptr(),
                                    );
                                    (*ps)
                                        .control = ((1
                                        & ((1) << 1)
                                            - 1) << 25)
                                        | (*ps).control
                                            & !((((1) << 1)
                                                - 1) << 25);
                                    let ref mut fresh165 = (*ps).BindingStackPointer;
                                    *fresh165 = (*fresh165)
                                        .wrapping_add(2)
                                        ;
                                    current_block = 5374579820246837908;
                                }
                                2914880375600570860 => {
                                    WriteVirtualMemory(
                                        (*bar).address.parts.data.u ,
                                        op2,
                                    );
                                    let ref mut fresh126 = (*bar).address.parts.data.u;
                                    *fresh126 = (*fresh126).wrapping_add(1);
                                    current_block = 5374579820246837908;
                                }
                                13243273766179450019 => {
                                    let mut cycle: u32 = ((*cp).operand
                                        & 0o1700) >> 6;
                                    let mut fixnum_only: u32 = (*cp).operand
                                        & 0o40;
                                    let mut cdr_next: u32 = (*cp).operand
                                        & 0o20;
                                    let mut vma_9: isize = (*bar).address.parts.data.u
                                        ;
                                    MemoryReadInternal(
                                        vma_9,
                                        &mut *sp.offset(1  ),
                                        (MemoryActionTable[cycle ]).as_mut_ptr(),
                                    );
                                    if fixnum_only != 0
                                        && !(((*sp.offset(1  )).parts.tag
                                            ^ TypeFixnum)
                                            & (((1) << 6)
                                                - 1)
                                            == 0)
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    sp = sp.offset(1);
                                    if cdr_next != 0 {
                                        (*sp)
                                            .parts
                                            .tag = (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1) ;
                                    }
                                    if (*cp).operand & 0x4  == 0 {
                                        let ref mut fresh122 = (*bar).address.parts.data.u;
                                        *fresh122 = (*fresh122).wrapping_add(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                7096816769721830736 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if !((*sp).parts.tag & 0o76
                                        == (TypeArray  & 0o76)
                                            )
                                    {
                                        current_block = 3345631096401374476;
                                        break;
                                    }
                                    let mut header_5: QWord = LispObj {
                                        parts: _LispObj {
                                            tag: 0,
                                            data: QData { u: 0 },
                                        },
                                    };
                                    let mut vma_8: isize = 0;
                                    vma_8 = MemoryReadInternal(
                                        (*sp.offset(0  )).parts.data.u
                                            ,
                                        &mut header_5,
                                        (MemoryActionTable[CycleHeader  ])
                                            .as_mut_ptr(),
                                    );
                                    if header_5.parts.tag
                                        != (0o100  | TypeHeaderI)

                                        || (*op2).parts.data.u
                                            >= (header_5.parts.data.u >> 15
                                                & (((1) << 8)
                                                    - 1) )

                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let mut tag_5: Tag = TypeLocative  as Tag;
                                    let mut data_5: isize = vma_8
                                        .wrapping_sub(
                                            (1)
                                                .wrapping_add((*op2).parts.data.u),
                                        );
                                    (*sp).parts.tag = tag_5 ;
                                    (*sp).parts.data.u = data_5 ;
                                    current_block = 5374579820246837908;
                                }
                                16423429028418199427 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if !((*sp).parts.tag & 0o76
                                        == (TypeArray  & 0o76)
                                            )
                                    {
                                        current_block = 3345631096401374476;
                                        break;
                                    }
                                    let mut header_4: QWord = LispObj {
                                        parts: _LispObj {
                                            tag: 0,
                                            data: QData { u: 0 },
                                        },
                                    };
                                    let mut vma_7: isize = 0;
                                    vma_7 = MemoryReadInternal(
                                        (*sp.offset(0  )).parts.data.u
                                            ,
                                        &mut header_4,
                                        (MemoryActionTable[CycleHeader  ])
                                            .as_mut_ptr(),
                                    );
                                    if header_4.parts.tag
                                        != (0o100  | TypeHeaderI)

                                        || (*op2).parts.data.u
                                            >= (header_4.parts.data.u >> 15
                                                & (((1) << 8)
                                                    - 1) )

                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    StoreContentsInternal(
                                        vma_7
                                            .wrapping_sub(
                                                (1)
                                                    .wrapping_add((*op2).parts.data.u),
                                            ),
                                        &mut *sp.offset(-(1) ),
                                        (MemoryActionTable[CycleDataWrite  ])
                                            .as_mut_ptr(),
                                    );
                                    sp = sp.offset(-(2  ));
                                    current_block = 5374579820246837908;
                                }
                                343795984303964022 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if !((*sp).parts.tag & 0o76
                                        == (TypeArray  & 0o76)
                                            )
                                    {
                                        current_block = 3345631096401374476;
                                        break;
                                    }
                                    let mut header_3: QWord = LispObj {
                                        parts: _LispObj {
                                            tag: 0,
                                            data: QData { u: 0 },
                                        },
                                    };
                                    let mut q: QWord = LispObj {
                                        parts: _LispObj {
                                            tag: 0,
                                            data: QData { u: 0 },
                                        },
                                    };
                                    let mut vma_6: isize = 0;
                                    vma_6 = MemoryReadInternal(
                                        (*sp.offset(0  )).parts.data.u
                                            ,
                                        &mut header_3,
                                        (MemoryActionTable[CycleHeader  ])
                                            .as_mut_ptr(),
                                    );
                                    if header_3.parts.tag
                                        != (0o100  | TypeHeaderI)

                                        || (*op2).parts.data.u
                                            >= (header_3.parts.data.u >> 15
                                                & (((1) << 8)
                                                    - 1) )

                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    MemoryReadInternal(
                                        vma_6
                                            .wrapping_sub(
                                                (1)
                                                    .wrapping_add((*op2).parts.data.u),
                                            ),
                                        &mut q,
                                        (MemoryActionTable[CycleDataRead  ])
                                            .as_mut_ptr(),
                                    );
                                    (*sp).whole = q.whole & !ObjectCdrMask.whole;
                                    current_block = 5374579820246837908;
                                }
                                13445582451972576579 => {
                                    loop {
                                        if !(((*sp).parts.tag
                                            ^ TypeFixnum)
                                            & (((1) << 6)
                                                - 1)
                                            == 0)
                                        {
                                            current_block = 4843221280033581897;
                                            break 'c_3383;
                                        }
                                        control_0 = (*op2.offset(0  ))
                                            .parts
                                            .data
                                            .u ;
                                        vma_5 = (*op2.offset(1  ))
                                            .parts
                                            .data
                                            .u ;
                                        length_0 = (*op2.offset(2  ))
                                            .parts
                                            .data
                                            .s;
                                        if (*sp).parts.data.u >= length_0  {
                                            current_block = 4843221280033581897;
                                            break 'c_3383;
                                        }
                                        if !((control_0 >> 0
                                            & (((1) << 22)
                                                - 1))
                                           != (*ps).ArrayEventCount)
                                        {
                                            break;
                                        }
                                        RecomputeArrayRegister(
                                            op2,
                                            (*ps).ArrayEventCount,
                                        );
                                    }
                                    Aset1Internal(
                                        vma_5,
                                        (control_0 >> 27
                                            & (((1) << 3)
                                                - 1)),
                                        (control_0 >> 22
                                            & (((1) << 5)
                                                - 1)),
                                        (control_0 >> 30
                                            & (((1) << 2)
                                                - 1))
                                            as ArrayElementType,
                                        (*sp).parts.data.s,
                                        &mut *sp.offset(-(1) ),
                                    );
                                    sp = sp.offset(-(2  ));
                                    current_block = 5374579820246837908;
                                }
                                11120522862495583117 => {
                                    loop {
                                        if !(((*sp).parts.tag
                                            ^ TypeFixnum)
                                            & (((1) << 6)
                                                - 1)
                                            == 0)
                                        {
                                            current_block = 4843221280033581897;
                                            break 'c_3383;
                                        }
                                        control = (*op2.offset(0  ))
                                            .parts
                                            .data
                                            .u ;
                                        vma_4 = (*op2.offset(1  ))
                                            .parts
                                            .data
                                            .u ;
                                        length = (*op2.offset(2  ))
                                            .parts
                                            .data
                                            .s;
                                        if (*sp).parts.data.u >= length  {
                                            current_block = 4843221280033581897;
                                            break 'c_3383;
                                        }
                                        if !((control >> 0
                                            & (((1) << 22)
                                                - 1))
                                           != (*ps).ArrayEventCount)
                                        {
                                            break;
                                        }
                                        RecomputeArrayRegister(
                                            op2,
                                            (*ps).ArrayEventCount,
                                        );
                                    }
                                    Aref1Internal(
                                        vma_4,
                                        (control >> 27
                                            & (((1) << 3)
                                                - 1)),
                                        (control >> 22
                                            & (((1) << 5)
                                                - 1)),
                                        (control >> 30
                                            & (((1) << 2)
                                                - 1))
                                            as ArrayElementType,
                                        (*sp).parts.data.s,
                                        sp,
                                    );
                                    current_block = 5374579820246837908;
                                }
                                7929629023330341380 => {
                                    if (*op2).parts.tag & 0o76
                                        == (TypeArray  & 0o76)

                                    {
                                        let mut header_2: QWord = LispObj {
                                            parts: _LispObj {
                                                tag: 0,
                                                data: QData { u: 0 },
                                            },
                                        };
                                        let mut vma_3: isize = 0;
                                        vma_3 = MemoryReadInternal(
                                            (*op2).parts.data.u ,
                                            &mut header_2,
                                            (MemoryActionTable[CycleHeader  ])
                                                .as_mut_ptr(),
                                        );
                                        if header_2.parts.tag
                                            != (0o100  | TypeHeaderI)

                                        {
                                            current_block = 4843221280033581897;
                                            break;
                                        }
                                        if header_2.parts.data.u
                                            & ((1) << 23)
                                            != 0
                                        {
                                            current_block = 5731074241326334034;
                                            break;
                                        }
                                        let mut tag_3: Tag = ((*op2).parts.tag
                                            & (((1) << 6)
                                                - 1) ) as Tag;
                                        let mut data_3: isize = vma_3;
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = tag_3 ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .u = data_3 ;
                                        sp = sp.offset(1);
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .s = (((((*ps).ArrayEventCount >> 0
                                            & (((1) << 22)
                                                - 1))
                                            & ((1) << 27)
                                                - 1) << 0)
                                            | header_2.parts.data.u
                                                & !((((1) << 27)
                                                    - 1) << 0) )
                                            as i32;
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = TypeFixnum ;
                                        sp = sp.offset(1);
                                        let mut tag_4: Tag = TypeLocative  as Tag;
                                        let mut data_4: isize = vma_3
                                            .wrapping_add(1);
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = tag_4 ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .u = data_4 ;
                                        sp = sp.offset(1);
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .s = (header_2.parts.data.u >> 0
                                            & (((1) << 15)
                                                - 1) );
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = TypeFixnum ;
                                        sp = sp.offset(1);
                                    } else {
                                        match (*op2).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                        {
                                            18 | 19 => {
                                                current_block = 5731074241326334034;
                                                break;
                                            }
                                            _ => {
                                                current_block = 5428624171862246401;
                                                break;
                                            }
                                        }
                                    }
                                    current_block = 5374579820246837908;
                                }
                                760176532998518372 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if !((*sp).parts.tag & 0o76
                                        == (TypeArray  & 0o76)
                                            )
                                    {
                                        current_block = 3345631096401374476;
                                        break;
                                    }
                                    let mut header_1: QWord = LispObj {
                                        parts: _LispObj {
                                            tag: 0,
                                            data: QData { u: 0 },
                                        },
                                    };
                                    let mut vma_2: isize = 0;
                                    vma_2 = MemoryReadInternal(
                                        (*sp).parts.data.u ,
                                        &mut header_1,
                                        (MemoryActionTable[CycleHeader  ])
                                            .as_mut_ptr(),
                                    );
                                    if header_1.parts.tag
                                        != (0o100  | TypeHeaderI)

                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if header_1.parts.data.u
                                        & ((1) << 23)
                                        != 0
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    if (*op2).parts.data.u
                                        >= (header_1.parts.data.u >> 0
                                            & (((1) << 15)
                                                - 1) )

                                        || (header_1.parts.data.u >> 30
                                            & (((1) << 2)
                                                - 1) )
                                            as ArrayElementType
                                            != ArrayElementTypeObject
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let mut tag_2: Tag = TypeLocative  as Tag;
                                    let mut data_2: isize = vma_2
                                        .wrapping_add(1)
                                        .wrapping_add((*op2).parts.data.u);
                                    (*sp).parts.tag = tag_2 ;
                                    (*sp).parts.data.u = data_2 ;
                                    current_block = 5374579820246837908;
                                }
                                1422482647876387503 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if !((*sp).parts.tag & 0o76
                                        == (TypeArray  & 0o76)
                                            )
                                    {
                                        current_block = 3345631096401374476;
                                        break;
                                    }
                                    let mut header_0: QWord = LispObj {
                                        parts: _LispObj {
                                            tag: 0,
                                            data: QData { u: 0 },
                                        },
                                    };
                                    let mut vma_1: isize = 0;
                                    vma_1 = MemoryReadInternal(
                                        (*sp).parts.data.u ,
                                        &mut header_0,
                                        (MemoryActionTable[CycleHeader  ])
                                            .as_mut_ptr(),
                                    );
                                    if header_0.parts.tag
                                        != (0o100  | TypeHeaderI)

                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if header_0.parts.data.u
                                        & ((1) << 23)
                                        != 0
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    if (*op2).parts.data.u
                                        >= (header_0.parts.data.u >> 0
                                            & (((1) << 15)
                                                - 1) )

                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    Aset1Internal(
                                        vma_1.wrapping_add(1),
                                        (header_0.parts.data.u >> 27
                                            & (((1) << 3)
                                                - 1) ),
                                        0,
                                        (header_0.parts.data.u >> 30
                                            & (((1) << 2)
                                                - 1) )
                                            as ArrayElementType,
                                        (*op2).parts.data.u,
                                        &mut *sp.offset(-(1) ),
                                    );
                                    sp = sp.offset(-(2  ));
                                    current_block = 5374579820246837908;
                                }
                                16043120824524396648 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if !((*sp).parts.tag & 0o76
                                        == (TypeArray  & 0o76)
                                            )
                                    {
                                        current_block = 3345631096401374476;
                                        break;
                                    }
                                    let mut header: QWord = LispObj {
                                        parts: _LispObj {
                                            tag: 0,
                                            data: QData { u: 0 },
                                        },
                                    };
                                    let mut vma_0: isize = 0;
                                    vma_0 = MemoryReadInternal(
                                        (*sp).parts.data.u ,
                                        &mut header,
                                        (MemoryActionTable[CycleHeader  ])
                                            .as_mut_ptr(),
                                    );
                                    if header.parts.tag
                                        != (0o100  | TypeHeaderI)

                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if header.parts.data.u
                                        & ((1) << 23)
                                        != 0
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    if (*op2).parts.data.u
                                        >= (header.parts.data.u >> 0
                                            & (((1) << 15)
                                                - 1) )

                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    Aref1Internal(
                                        vma_0.wrapping_add(1),
                                        (header.parts.data.u >> 27
                                            & (((1) << 3)
                                                - 1) ),
                                        0,
                                        (header.parts.data.u >> 30
                                            & (((1) << 2)
                                                - 1) )
                                            as ArrayElementType,
                                        (*op2).parts.data.u,
                                        sp,
                                    );
                                    current_block = 5374579820246837908;
                                }
                                7886902504354110502 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeLocative)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 5428624171862246401;
                                        break;
                                    }
                                    op2 = &mut *((*ps).StackCache)
                                        .offset(
                                            ((*op2).parts.data.u)
                                                .wrapping_sub((*ps).StackCacheBase) ,
                                        ) as *mut LispObj;
                                    current_block = 8907700205828477361;
                                }
                                11150878041432028190 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let mut tag_1: Tag = TypeLocative  as Tag;
                                    let mut data_1: isize = ((*ps).StackCacheBase)
                                        .wrapping_add(
                                            restartsp.offset_from((*ps).StackCache)
                                              ,
                                        )
                                        .wrapping_sub((*op2).parts.data.u)
                                        .wrapping_sub(1);
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag_1 ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data_1 ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                11866557605208005574 => {
                                    *op2 = *sp;
                                    sp = op2;
                                    current_block = 5374579820246837908;
                                }
                                12149821107786716977 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && ((*sp.offset(-(1) )).parts.tag
                                            ^ TypeFixnum)
                                            & (((1) << 6)
                                                - 1)
                                            == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let mut dividend: libc::c_long = ((*sp).parts.data.u
                                        << 32
                                        | (*sp.offset(-(1) )).parts.data.u)
                                        ;
                                    let mut divisor: libc::c_long = (*op2).parts.data.u
                                        ;
                                    let mut quotient_4: libc::c_long = dividend / divisor;
                                    if quotient_4 >> 32  != 0 {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    (*sp.offset(-(1) ))
                                        .parts
                                        .data
                                        .u = quotient_4 ;
                                    (*sp)
                                        .parts
                                        .data
                                        .u = (dividend - quotient_4 * divisor) ;
                                    current_block = 5374579820246837908;
                                }
                                8929201679391263324 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let mut value_0: libc::c_long = (*op2).parts.data.u
                                         * (*sp).parts.data.u ;
                                    let mut low: libc::c_uint = (value_0
                                        & 0xffffffff ) ;
                                    let mut high: libc::c_uint = (value_0 >> 32
                                        & 0xffffffff ) ;
                                    (*sp)
                                        .parts
                                        .data
                                        .s = *(&mut low as *mut libc::c_uint as *mut u32);
                                    (*sp).parts.tag = TypeFixnum ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .s = *(&mut high as *mut libc::c_uint as *mut u32);
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = TypeFixnum ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                10658836756412317435 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let ref mut fresh91 = (*sp).parts.data.u;
                                    *fresh91 = (*fresh91 )
                                        .wrapping_sub((*op2).parts.data.u)  ;
                                    current_block = 5374579820246837908;
                                }
                                5799653063183189417 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let ref mut fresh88 = (*sp).parts.data.u;
                                    *fresh88 = (*fresh88 )
                                        .wrapping_add((*op2).parts.data.u)  ;
                                    current_block = 5374579820246837908;
                                }
                                17836739907628934854 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let mut places_1: u32 = (*op2).parts.data.s
                                        & 0x1f;
                                    if places_1 == 0  {
                                        current_block = 5374579820246837908;
                                    } else {
                                        (*sp)
                                            .parts
                                            .data
                                            .u = (*sp).parts.data.u << places_1
                                            | (*sp).parts.data.u >> 32  - places_1;
                                        current_block = 5374579820246837908;
                                    }
                                }
                                7576418816522177914 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    let mut places_0: u32 = (*op2).parts.data.s;
                                    if places_0 == 0  {
                                        current_block = 5374579820246837908;
                                    } else {
                                        if places_0 > 31
                                            || places_0 < -(31)
                                        {
                                            (*sp).parts.data.s = 0;
                                            (*sp).parts.tag = TypeFixnum ;
                                        } else if places_0 > 0  {
                                            (*sp)
                                                .parts
                                                .data
                                                .s = ((*sp).parts.data.u << places_0) as i32;
                                            (*sp).parts.tag = TypeFixnum ;
                                        } else {
                                            (*sp)
                                                .parts
                                                .data
                                                .s = ((*sp).parts.data.u >> -places_0) as i32;
                                            (*sp).parts.tag = TypeFixnum ;
                                        }
                                        current_block = 5374579820246837908;
                                    }
                                }
                                5730836827815574811 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    let mut places: u32 = (*op2).parts.data.s;
                                    if places == 0
                                        || (*sp).parts.data.s == 0
                                    {
                                        current_block = 5374579820246837908;
                                    } else {
                                        if places > 0  {
                                            i = (*sp).parts.data.s << places;
                                            if !(((*sp).parts.data.s < 0)
                                                == (i < 0)
                                                && i != 0)
                                            {
                                                current_block = 5731074241326334034;
                                                break;
                                            }
                                            (*sp).parts.data.s = i;
                                            (*sp).parts.tag = TypeFixnum ;
                                        } else {
                                            (*sp).parts.data.s = (*sp).parts.data.s >> -places;
                                            (*sp).parts.tag = TypeFixnum ;
                                        }
                                        current_block = 5374579820246837908;
                                    }
                                }
                                2521877785192433750 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    let ref mut fresh82 = (*sp).parts.data.u;
                                    *fresh82 ^= (*op2).parts.data.u;
                                    current_block = 5374579820246837908;
                                }
                                1954535181902104252 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    let ref mut fresh80 = (*sp).parts.data.u;
                                    *fresh80 |= (*op2).parts.data.u;
                                    current_block = 5374579820246837908;
                                }
                                17944313385542272920 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    let ref mut fresh78 = (*sp).parts.data.u;
                                    *fresh78 &= (*op2).parts.data.u;
                                    current_block = 5374579820246837908;
                                }
                                9651093194883831961 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*op2).parts.data.s < (*sp).parts.data.s {
                                        (*sp).whole = (*op2).whole & !ObjectCdrMask.whole;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                15046840266419836844 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*op2).parts.data.s > (*sp).parts.data.s {
                                        (*sp).whole = (*op2).whole & !ObjectCdrMask.whole;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                1021009594659785084 => {
                                    if !(((*sp).parts.tag
                                        ^ TypeFixnum
                                        | (*op2).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    let mut quotient_3: u32 = 0;
                                    let mut remainder_3: u32 = 0;
                                    if (*op2).parts.data.s == 0 {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if (*sp).parts.data.s
                                        == -(1) << 31
                                        && (*op2).parts.data.s == -(1)
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    quotient_3 = (*sp).parts.data.s / (*op2).parts.data.s;
                                    remainder_3 = (*sp).parts.data.s
                                        - (*op2).parts.data.s * quotient_3;
                                    if !(remainder_3 == 0) {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    (*sp).parts.data.s = quotient_3;
                                    current_block = 5374579820246837908;
                                }
                                1979062999462163286 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    let mut quotient_2: u32 = 0;
                                    let mut remainder_2: u32 = 0;
                                    let mut temp: u32 = 0;
                                    if (*op2).parts.data.s == 0 {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if (*sp).parts.data.s
                                        == -(1) << 31
                                        && (*op2).parts.data.s == -(1)
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    quotient_2 = (*sp).parts.data.s / (*op2).parts.data.s;
                                    remainder_2 = (*sp).parts.data.s
                                        - (*op2).parts.data.s * quotient_2;
                                    temp = (*op2).parts.data.s - remainder_2 - remainder_2;
                                    if if temp == 0 {
                                        quotient_2 & 1
                                    } else if (*op2).parts.data.s > 0  {
                                        (temp < 0)
                                    } else {
                                        (temp > 0)
                                    } != 0
                                    {
                                        (*sp).parts.data.s = quotient_2 + 1;
                                        (*sp).parts.tag = TypeFixnum ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .s = remainder_2 - (*op2).parts.data.s;
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = TypeFixnum ;
                                        sp = sp.offset(1);
                                    } else {
                                        (*sp).parts.data.s = quotient_2;
                                        (*sp).parts.tag = TypeFixnum ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .s = remainder_2;
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = TypeFixnum ;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                707633050465026752 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    let mut quotient_1: u32 = 0;
                                    let mut remainder_1: u32 = 0;
                                    if (*op2).parts.data.s == 0 {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if (*sp).parts.data.s
                                        == -(1) << 31
                                        && (*op2).parts.data.s == -(1)
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    quotient_1 = (*sp).parts.data.s / (*op2).parts.data.s;
                                    remainder_1 = (*sp).parts.data.s
                                        - (*op2).parts.data.s * quotient_1;
                                    (*sp).parts.data.s = quotient_1;
                                    (*sp).parts.tag = TypeFixnum ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .s = remainder_1;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = TypeFixnum ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                12578535000243402674 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    let mut quotient_0: u32 = 0;
                                    let mut remainder_0: u32 = 0;
                                    if (*op2).parts.data.s == 0 {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if (*sp).parts.data.s
                                        == -(1) << 31
                                        && (*op2).parts.data.s == -(1)
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    quotient_0 = (*sp).parts.data.s / (*op2).parts.data.s;
                                    remainder_0 = (*sp).parts.data.s
                                        - (*op2).parts.data.s * quotient_0;
                                    if remainder_0 == 0  {
                                        (*sp).parts.data.s = quotient_0;
                                        (*sp).parts.tag = TypeFixnum ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .s = remainder_0;
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = TypeFixnum ;
                                        sp = sp.offset(1);
                                    } else {
                                        if (remainder_0 >= 0)
                                            == ((*op2).parts.data.s >= 0)
                                        {
                                            quotient_0 += 1;
                                            remainder_0 -= (*op2).parts.data.s;
                                        }
                                        (*sp).parts.data.s = quotient_0;
                                        (*sp).parts.tag = TypeFixnum ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .s = remainder_0;
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = TypeFixnum ;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                8570820179795813527 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    let mut quotient: u32 = 0;
                                    let mut remainder: u32 = 0;
                                    if (*op2).parts.data.s == 0 {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if (*sp).parts.data.s
                                        == -(1) << 31
                                        && (*op2).parts.data.s == -(1)
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    quotient = (*sp).parts.data.s / (*op2).parts.data.s;
                                    remainder = (*sp).parts.data.s
                                        - (*op2).parts.data.s * quotient;
                                    if remainder == 0  {
                                        (*sp).parts.data.s = quotient;
                                        (*sp).parts.tag = TypeFixnum ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .s = remainder;
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = TypeFixnum ;
                                        sp = sp.offset(1);
                                    } else {
                                        if (remainder >= 0)
                                            != ((*op2).parts.data.s >= 0)
                                        {
                                            quotient -= 1;
                                            remainder += (*op2).parts.data.s;
                                        }
                                        (*sp).parts.data.s = quotient;
                                        (*sp).parts.tag = TypeFixnum ;
                                        (*sp.offset(1  ))
                                            .parts
                                            .data
                                            .s = remainder;
                                        (*sp.offset(1  ))
                                            .parts
                                            .tag = TypeFixnum ;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                13824084825403172572 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*op2).parts.data.s == 0 {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    if (*sp).parts.data.s
                                        == -(1) << 31
                                        && (*op2).parts.data.s == -(1)
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    }
                                    (*sp)
                                        .parts
                                        .data
                                        .s = (*sp).parts.data.s / (*op2).parts.data.s;
                                    current_block = 5374579820246837908;
                                }
                                9476106578594883259 => {
                                    let mut value: libc::c_long = (*sp).parts.data.s
                                        ;
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && {
                                            value *= (*op2).parts.data.s ;
                                            value
                                                >= (-(1) << 31)

                                        }
                                        && value
                                            <= !(-(1) << 31)
                                                )
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    (*sp).parts.data.s = value;
                                    current_block = 5374579820246837908;
                                }
                                15702772439421846748 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && (*op2).parts.data.s
                                            != -(1) << 31)
                                    {
                                        current_block = 964297686937777693;
                                        break;
                                    }
                                    let ref mut fresh67 = (*op2).parts.data.s;
                                    *fresh67 -= 1;
                                    current_block = 5374579820246837908;
                                }
                                11631144177913518471 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && (*op2).parts.data.s
                                            != !(-(1) << 31))
                                    {
                                        current_block = 964297686937777693;
                                        break;
                                    }
                                    let ref mut fresh66 = (*op2).parts.data.s;
                                    *fresh66 += 1;
                                    current_block = 5374579820246837908;
                                }
                                5372543090928527736 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && (*op2).parts.data.s
                                            != -(1) << 31)
                                    {
                                        current_block = 964297686937777693;
                                        break;
                                    }
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .s = -(*op2).parts.data.s;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = TypeFixnum ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                181465750714249208 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && {
                                            i = (*sp).parts.data.s - (*op2).parts.data.s;
                                            (i <= (*sp).parts.data.s)
                                                == ((*op2).parts.data.s >= 0)
                                        })
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    (*sp).parts.data.s = i;
                                    current_block = 5374579820246837908;
                                }
                                15957095305812639434 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0
                                        && {
                                            i = (*sp).parts.data.s + (*op2).parts.data.s;
                                            (i >= (*sp).parts.data.s)
                                                == ((*op2).parts.data.s >= 0)
                                        })
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    (*sp).parts.data.s = i;
                                    current_block = 5374579820246837908;
                                }
                                13049435113123448338 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 964297686937777693;
                                        break;
                                    }
                                    if (*op2).parts.data.s == 0  {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                11977086252334878030 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 964297686937777693;
                                        break;
                                    }
                                    if (*op2).parts.data.s < 0  {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                3433094768296467857 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 964297686937777693;
                                        break;
                                    }
                                    if (*op2).parts.data.s > 0  {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                4849849383150575012 => {
                                    match (*op2).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                    {
                                        21 | 17 => {
                                            *sp.offset(1  ) = ObjectNIL;
                                            sp = sp.offset(1);
                                        }
                                        20 => {
                                            *sp.offset(1  ) = ObjectT;
                                            sp = sp.offset(1);
                                        }
                                        _ => {
                                            current_block = 3219376467211849282;
                                            break;
                                        }
                                    }
                                    current_block = 5374579820246837908;
                                }
                                16332075848674751501 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*sp).parts.data.u & (*op2).parts.data.u != 0 {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                1623552932627830973 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*sp).parts.data.u & (*op2).parts.data.u != 0 {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                1606036238936509124 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*sp).parts.data.s < (*op2).parts.data.s {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                10313534597168061043 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*sp).parts.data.s < (*op2).parts.data.s {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                9907970034254792512 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*sp).parts.data.s > (*op2).parts.data.s {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                6143943233158298354 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*sp).parts.data.s > (*op2).parts.data.s {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                7714866178530077276 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*op2).parts.data.s == (*sp).parts.data.s {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                13351260019855268589 => {
                                    if !(((*op2).parts.tag
                                        ^ TypeFixnum
                                        | (*sp).parts.tag
                                            ^ TypeFixnum)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 15547512934408055944;
                                        break;
                                    }
                                    if (*op2).parts.data.s == (*sp).parts.data.s {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                12916373135125519917 => {
                                    if !(((*sp).parts.tag ^ (*op2).parts.tag)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    } else if (*sp).parts.data.u == (*op2).parts.data.u {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        match (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                        {
                                            11 | 12 | 13 | 14 | 15 => {
                                                current_block = 5731074241326334034;
                                                break;
                                            }
                                            _ => {
                                                *sp.offset(1  ) = ObjectNIL;
                                                sp = sp.offset(1);
                                            }
                                        }
                                    }
                                    current_block = 5374579820246837908;
                                }
                                10837467881522841064 => {
                                    if !(((*sp).parts.tag ^ (*op2).parts.tag)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        *sp = ObjectNIL;
                                    } else if (*sp).parts.data.u == (*op2).parts.data.u {
                                        *sp = ObjectT;
                                    } else {
                                        match (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                        {
                                            11 | 12 | 13 | 14 | 15 => {
                                                current_block = 5731074241326334034;
                                                break;
                                            }
                                            _ => {
                                                *sp = ObjectNIL;
                                            }
                                        }
                                    }
                                    current_block = 5374579820246837908;
                                }
                                127256532292687007 => {
                                    if TypeDoubleFloat
                                        <= (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                        && (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                            <= TypeSpareNumber
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    } else {
                                        *scratch = *op2;
                                        loop {
                                            let mut car_rep_1: QWord = LispObj {
                                                parts: _LispObj {
                                                    tag: 0,
                                                    data: QData { u: 0 },
                                                },
                                            };
                                            let mut cdr_rep_1: QWord = LispObj {
                                                parts: _LispObj {
                                                    tag: 0,
                                                    data: QData { u: 0 },
                                                },
                                            };
                                            let mut car_1: *mut LispObj = &mut car_rep_1;
                                            let mut cdr_2: *mut LispObj = &mut cdr_rep_1;
                                            if (*scratch).parts.tag
                                                & (((1) << 6)
                                                    - 1)
                                                == TypeNIL
                                            {
                                                *sp = ObjectNIL;
                                                break;
                                            } else {
                                                if CarCdrInternal(scratch, car_1, cdr_2) != 0 {
                                                    current_block = 14904807116429336826;
                                                    break 'c_3383;
                                                }
                                                match (*car_1).parts.tag
                                                    & (((1) << 6)
                                                        - 1)
                                                {
                                                    20 => {}
                                                    21 => {
                                                        let mut keyrep: QWord = LispObj {
                                                            parts: _LispObj {
                                                                tag: 0,
                                                                data: QData { u: 0 },
                                                            },
                                                        };
                                                        let mut key: *mut LispObj = &mut keyrep;
                                                        if CarInternal(car_1, key) != 0 {
                                                            current_block = 5731074241326334034;
                                                            break 'c_3383;
                                                        }
                                                        if ((*key).whole ^ (*sp).whole) & !ObjectCdrMask.whole
                                                            == 0
                                                        {
                                                            (*sp).whole = (*car_1).whole & !ObjectCdrMask.whole;
                                                            break;
                                                        }
                                                    }
                                                    17 => {
                                                        current_block = 5731074241326334034;
                                                        break 'c_3383;
                                                    }
                                                    _ => {
                                                        current_block = 4843221280033581897;
                                                        break 'c_3383;
                                                    }
                                                }
                                                *scratch = *cdr_2;
                                                if suspend != 0 {
                                                    ProcessSuspend();
                                                }
                                            }
                                        }
                                    }
                                    current_block = 5374579820246837908;
                                }
                                2385072656283107554 => {
                                    if TypeDoubleFloat
                                        <= (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                        && (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                            <= TypeSpareNumber
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    } else {
                                        *scratch = *op2;
                                        loop {
                                            let mut car_rep_0: QWord = LispObj {
                                                parts: _LispObj {
                                                    tag: 0,
                                                    data: QData { u: 0 },
                                                },
                                            };
                                            let mut cdr_rep_0: QWord = LispObj {
                                                parts: _LispObj {
                                                    tag: 0,
                                                    data: QData { u: 0 },
                                                },
                                            };
                                            let mut car_0: *mut LispObj = &mut car_rep_0;
                                            let mut cdr_1: *mut LispObj = &mut cdr_rep_0;
                                            if (*scratch).parts.tag
                                                & (((1) << 6)
                                                    - 1)
                                                == TypeNIL
                                            {
                                                *sp = ObjectNIL;
                                                break;
                                            } else {
                                                if CarCdrInternal(scratch, car_0, cdr_1) != 0 {
                                                    current_block = 14904807116429336826;
                                                    break 'c_3383;
                                                }
                                                if ((*car_0).whole ^ (*sp).whole) & !ObjectCdrMask.whole
                                                    == 0
                                                {
                                                    (*sp).whole = (*scratch).whole & !ObjectCdrMask.whole;
                                                    break;
                                                } else {
                                                    *scratch = *cdr_1;
                                                    if suspend != 0 {
                                                        ProcessSuspend();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    current_block = 5374579820246837908;
                                }
                                4888879662720751705 => {
                                    if TypeDoubleFloat
                                        <= (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                        && (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                            <= TypeSpareNumber
                                    {
                                        current_block = 5731074241326334034;
                                        break;
                                    } else {
                                        *scratch = *op2;
                                        loop {
                                            let mut car_rep: QWord = LispObj {
                                                parts: _LispObj {
                                                    tag: 0,
                                                    data: QData { u: 0 },
                                                },
                                            };
                                            let mut cdr_rep: QWord = LispObj {
                                                parts: _LispObj {
                                                    tag: 0,
                                                    data: QData { u: 0 },
                                                },
                                            };
                                            let mut car: *mut LispObj = &mut car_rep;
                                            let mut cdr_0: *mut LispObj = &mut cdr_rep;
                                            if (*scratch).parts.tag
                                                & (((1) << 6)
                                                    - 1)
                                                == TypeNIL
                                            {
                                                *sp = ObjectNIL;
                                                *sp.offset(1  ) = ObjectNIL;
                                                sp = sp.offset(1);
                                                break;
                                            } else {
                                                if CarCdrInternal(scratch, car, cdr_0) != 0 {
                                                    current_block = 14904807116429336826;
                                                    break 'c_3383;
                                                }
                                                if ((*car).whole ^ (*sp).whole) & !ObjectCdrMask.whole
                                                    == 0
                                                {
                                                    match (*cdr_0).parts.tag
                                                        & (((1) << 6)
                                                            - 1)
                                                    {
                                                        21 => {}
                                                        20 | 17 => {
                                                            current_block = 5731074241326334034;
                                                            break 'c_3383;
                                                        }
                                                        _ => {
                                                            current_block = 4843221280033581897;
                                                            break 'c_3383;
                                                        }
                                                    }
                                                    if CarInternal(cdr_0, sp) != 0 {
                                                        current_block = 5731074241326334034;
                                                        break 'c_3383;
                                                    }
                                                    (*sp.offset(1  ))
                                                        .whole = (*cdr_0).whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                    break;
                                                } else if CdrInternal(cdr_0, scratch) != 0 {
                                                    if ((*cdr_0).parts.tag
                                                        ^ TypeListInstance)
                                                        & (((1) << 6)
                                                            - 1)
                                                        == 0
                                                        || ((*cdr_0).parts.tag & 0o76
                                                            == (TypeSparePointer1  & 0o76)

                                                            || (*cdr_0).parts.tag
                                                                & (((1) << 6)
                                                                    - 1)
                                                                == TypeSpareImmediate1
                                                            || (*cdr_0).parts.tag
                                                                & (((1) << 6)
                                                                    - 1)
                                                                == TypeSpareNumber)
                                                    {
                                                        current_block = 5731074241326334034;
                                                        break 'c_3383;
                                                    } else {
                                                        current_block = 4843221280033581897;
                                                        break 'c_3383;
                                                    }
                                                } else if suspend != 0 {
                                                    ProcessSuspend();
                                                }
                                            }
                                        }
                                    }
                                    current_block = 5374579820246837908;
                                }
                                10194589593280242392 => {
                                    match (*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                    {
                                        21 => {
                                            let mut cdr: QWord = LispObj {
                                                parts: _LispObj {
                                                    tag: 0,
                                                    data: QData { u: 0 },
                                                },
                                            };
                                            let mut vma: isize = 0;
                                            vma = MemoryReadInternal(
                                                (*sp).parts.data.u ,
                                                &mut cdr,
                                                (MemoryActionTable[CycleCdr  ])
                                                    .as_mut_ptr(),
                                            );
                                            match cdr.parts.tag >> 6  {
                                                2 => {}
                                                _ => {
                                                    current_block = 5731074241326334034;
                                                    break;
                                                }
                                            }
                                            StoreContentsInternal(
                                                vma.wrapping_add(1),
                                                op2,
                                                (MemoryActionTable[CycleDataWrite  ])
                                                    .as_mut_ptr(),
                                            );
                                            sp = sp.offset(-1);
                                        }
                                        25 => {
                                            StoreContentsInternal(
                                                (*sp).parts.data.u ,
                                                op2,
                                                (MemoryActionTable[CycleDataWrite  ])
                                                    .as_mut_ptr(),
                                            );
                                            sp = sp.offset(-1);
                                        }
                                        _ => {
                                            current_block = 16288314355679075311;
                                            break;
                                        }
                                    }
                                    current_block = 5374579820246837908;
                                }
                                5920643169005956685 => {
                                    match (*sp).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                    {
                                        21 | 25 => {}
                                        _ => {
                                            current_block = 16288314355679075311;
                                            break;
                                        }
                                    }
                                    StoreContentsInternal(
                                        (*sp).parts.data.u ,
                                        op2,
                                        (MemoryActionTable[CycleDataWrite  ])
                                            .as_mut_ptr(),
                                    );
                                    sp = sp.offset(-1);
                                    current_block = 5374579820246837908;
                                }
                                5511877782510663281 => {
                                    if !(CarInternal(op2, sp.offset(1  ))
                                        == 0 && CdrInternal(op2, scratch) == 0)
                                    {
                                        current_block = 3219376467211849282;
                                        break;
                                    }
                                    (*op2)
                                        .parts
                                        .tag = (*op2).parts.tag
                                        & 0o300
                                        | (*scratch).parts.tag
                                            & (((1) << 6)
                                                - 1) ;
                                    (*op2).parts.data = (*scratch).parts.data;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                14957879348977399331 => {
                                    if !(CdrInternal(op2, scratch) == 0) {
                                        current_block = 3219376467211849282;
                                        break;
                                    }
                                    (*op2)
                                        .parts
                                        .tag = (*op2).parts.tag
                                        & 0o300
                                        | (*scratch).parts.tag
                                            & (((1) << 6)
                                                - 1) ;
                                    (*op2).parts.data = (*scratch).parts.data;
                                    current_block = 5374579820246837908;
                                }
                                15321816652064063775 => {
                                    if !(CarInternal(op2, scratch) == 0) {
                                        current_block = 3219376467211849282;
                                        break;
                                    }
                                    (*op2)
                                        .parts
                                        .tag = (*op2).parts.tag
                                        & 0o300
                                        | (*scratch).parts.tag
                                            & (((1) << 6)
                                                - 1) ;
                                    (*op2).parts.data = (*scratch).parts.data;
                                    current_block = 5374579820246837908;
                                }
                                2872334340672008580 => {
                                    if !(CdrInternal(op2, sp.offset(1  ))
                                        == 0)
                                    {
                                        current_block = 3219376467211849282;
                                        break;
                                    }
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                9508502311343125869 => {
                                    if !(CarInternal(op2, sp.offset(1  ))
                                        == 0)
                                    {
                                        current_block = 3219376467211849282;
                                        break;
                                    }
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                9581985533798930560 => {
                                    sp = sp.offset(-1);
                                    current_block = 5374579820246837908;
                                }
                                15636112305942086483 => {
                                    loop {
                                        let fresh101 = i;
                                        i = i - 1;
                                        if !(fresh101 != 0) {
                                            break;
                                        }
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                10878888195156817878 => {
                                    if ((*op2).whole ^ (*sp).whole) & !ObjectCdrMask.whole
                                        == 0
                                    {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                15494703142406051947 => {
                                    if ((*op2).whole ^ (*sp).whole) & !ObjectCdrMask.whole
                                        == 0
                                    {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                15722191353800179695 => {
                                    let mut tag: Tag = TypeLocative  as Tag;
                                    let mut data: isize = ((*ps).StackCacheBase)
                                        .wrapping_add(
                                            op2.offset_from((*ps).StackCache)
                                              ,
                                        );
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = tag ;
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .u = data ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                15410729287883662337 => {
                                    *scratch = *op2;
                                    current_block = 6283768289772892258;
                                }
                                7251182267454782531 => {
                                    if (*sp).parts.data.u < (*op2).parts.data.u {
                                        *sp = ObjectT;
                                    } else {
                                        *sp = ObjectNIL;
                                    }
                                    current_block = 5374579820246837908;
                                }
                                15506043489740435919 => {
                                    if (*sp).parts.data.u < (*op2).parts.data.u {
                                        *sp.offset(1  ) = ObjectT;
                                        sp = sp.offset(1);
                                    } else {
                                        *sp.offset(1  ) = ObjectNIL;
                                        sp = sp.offset(1);
                                    }
                                    current_block = 5374579820246837908;
                                }
                                14009207377072456151 => {
                                    let ref mut fresh189 = (*sp).parts.data.u;
                                    *fresh189 = (*fresh189 )
                                        .wrapping_add((*op2).parts.data.u)  ;
                                    current_block = 5374579820246837908;
                                }
                                3690922541002113235 => {
                                    (*sp)
                                        .parts
                                        .data
                                        .s = ((*sp).parts.data.u).wrapping_sub((*op2).parts.data.u)
                                        as i32;
                                    (*sp).parts.tag = TypeFixnum ;
                                    current_block = 5374579820246837908;
                                }
                                11755087796664755082 => {
                                    let ref mut fresh191 = (*op2).parts.data.u;
                                    *fresh191 = (*fresh191 )
                                        .wrapping_add(1)
                                        ;
                                    current_block = 5374579820246837908;
                                }
                                14128864248265317700 => {
                                    (*sp.offset(1  ))
                                        .parts
                                        .data
                                        .s = (*op2).parts.tag as i32;
                                    (*sp.offset(1  ))
                                        .parts
                                        .tag = TypeFixnum ;
                                    sp = sp.offset(1);
                                    current_block = 5374579820246837908;
                                }
                                10405005200513409987 => {
                                    (*op2)
                                        .parts
                                        .tag = ((1) << 6)

                                        | (*op2).parts.tag
                                            & (((1) << 6)
                                                - 1) ;
                                    current_block = 5374579820246837908;
                                }
                                4524171864612850827 => {
                                    (*op2)
                                        .parts
                                        .tag = ((2) << 6)

                                        | (*op2).parts.tag
                                            & (((1) << 6)
                                                - 1) ;
                                    current_block = 5374579820246837908;
                                }
                                9924490020858000456 => {
                                    (*op2)
                                        .parts
                                        .tag = (*sp).parts.tag
                                        & 0o300
                                        | (*op2).parts.tag
                                            & (((1) << 6)
                                                - 1) ;
                                    current_block = 5374579820246837908;
                                }
                                _ => {}
                            }
                            match current_block {
                                6283768289772892258 => {
                                    match (*scratch).parts.tag
                                        & (((1) << 6)
                                            - 1)
                                    {
                                        28 => {
                                            let mut tag_10: Tag = ((*ps).continuation.parts.tag
                                                | 0o300) as Tag;
                                            let mut data_10: isize = (*ps).continuation.parts.data.u
                                                ;
                                            (*sp.offset(1  ))
                                                .parts
                                                .tag = tag_10 ;
                                            (*sp.offset(1  ))
                                                .parts
                                                .data
                                                .u = data_10 ;
                                            sp = sp.offset(1);
                                            let mut tag_11: Tag = (TypeFixnum
                                                | 0o300) as Tag;
                                            let mut data_11: isize = (*ps).control;
                                            (*sp.offset(1  ))
                                                .parts
                                                .tag = tag_11 ;
                                            (*sp.offset(1  ))
                                                .parts
                                                .data
                                                .u = data_11 ;
                                            sp = sp.offset(1);
                                            (*ps)
                                                .control = ((*ps).control
                                                | 0o20000000)
                                                & !(0o400);
                                            (*ps)
                                                .continuation
                                                .parts
                                                .tag = TypeEvenPC ;
                                            (*ps).continuation.parts.data.u = (*scratch).parts.data.u;
                                            current_block = 5374579820246837908;
                                        }
                                        26 => {
                                            let mut environment: QWord = LispObj {
                                                parts: _LispObj {
                                                    tag: 0,
                                                    data: QData { u: 0 },
                                                },
                                            };
                                            let mut function: QWord = LispObj {
                                                parts: _LispObj {
                                                    tag: 0,
                                                    data: QData { u: 0 },
                                                },
                                            };
                                            MemoryReadInternal(
                                                (*scratch).parts.data.u ,
                                                &mut environment,
                                                (MemoryActionTable[CycleDataRead  ])
                                                    .as_mut_ptr(),
                                            );
                                            MemoryReadInternal(
                                                ((*scratch).parts.data.u)
                                                    .wrapping_add(1) ,
                                                &mut function,
                                                (MemoryActionTable[CycleDataRead  ])
                                                    .as_mut_ptr(),
                                            );
                                            if (function.parts.tag
                                                ^ TypeCompiledFunction)
                                                & (((1) << 6)
                                                    - 1)
                                                == 0
                                            {
                                                let mut tag_12: Tag = ((*ps).continuation.parts.tag
                                                    | 0o300) as Tag;
                                                let mut data_12: isize = (*ps).continuation.parts.data.u
                                                    ;
                                                (*sp.offset(1  ))
                                                    .parts
                                                    .tag = tag_12 ;
                                                (*sp.offset(1  ))
                                                    .parts
                                                    .data
                                                    .u = data_12 ;
                                                sp = sp.offset(1);
                                                let mut tag_13: Tag = (TypeFixnum
                                                    | 0o300) as Tag;
                                                let mut data_13: isize = (*ps).control;
                                                (*sp.offset(1  ))
                                                    .parts
                                                    .tag = tag_13 ;
                                                (*sp.offset(1  ))
                                                    .parts
                                                    .data
                                                    .u = data_13 ;
                                                sp = sp.offset(1);
                                                (*sp.offset(1  ))
                                                    .whole = environment.whole & !ObjectCdrMask.whole;
                                                sp = sp.offset(1);
                                                (*ps)
                                                    .control = (*ps).control
                                                    | 0o20000000
                                                    | 0o400;
                                                (*ps)
                                                    .continuation
                                                    .parts
                                                    .tag = TypeEvenPC ;
                                                (*ps).continuation.parts.data.u = function.parts.data.u;
                                                current_block = 5374579820246837908;
                                            } else {
                                                current_block = 9098253795494951964;
                                            }
                                        }
                                        _ => {
                                            current_block = 9098253795494951964;
                                        }
                                    }
                                    match current_block {
                                        5374579820246837908 => {}
                                        _ => {
                                            let mut InterpreterFunction: QWord = LispObj {
                                                parts: _LispObj {
                                                    tag: 0,
                                                    data: QData { u: 0 },
                                                },
                                            };
                                            MemoryReadInternal(
                                                (0xf8040000 )
                                                    .wrapping_add(
                                                        InterpreterFunctionVector,
                                                    )
                                                    .wrapping_add(
                                                        (*scratch).parts.tag
                                                            & (((1) << 6)
                                                                - 1) ,
                                                    ) ,
                                                &mut InterpreterFunction,
                                                (MemoryActionTable[CycleDataRead  ])
                                                    .as_mut_ptr(),
                                            );
                                            match InterpreterFunction.parts.tag
                                                & (((1) << 6)
                                                    - 1)
                                            {
                                                38 | 39 => {}
                                                _ => {
                                                    current_block = 4843221280033581897;
                                                    break;
                                                }
                                            }
                                            let mut tag_14: Tag = ((*ps).continuation.parts.tag
                                                | 0o300) as Tag;
                                            let mut data_14: isize = (*ps).continuation.parts.data.u
                                                ;
                                            (*sp.offset(1  ))
                                                .parts
                                                .tag = tag_14 ;
                                            (*sp.offset(1  ))
                                                .parts
                                                .data
                                                .u = data_14 ;
                                            sp = sp.offset(1);
                                            let mut tag_15: Tag = (TypeFixnum
                                                | 0o300) as Tag;
                                            let mut data_15: isize = (*ps).control;
                                            (*sp.offset(1  ))
                                                .parts
                                                .tag = tag_15 ;
                                            (*sp.offset(1  ))
                                                .parts
                                                .data
                                                .u = data_15 ;
                                            sp = sp.offset(1);
                                            (*sp.offset(1  ))
                                                .whole = (*scratch).whole & !ObjectCdrMask.whole;
                                            sp = sp.offset(1);
                                            (*ps)
                                                .control = (*ps).control
                                                | 0o20000000
                                                | 0o400;
                                            (*ps).continuation = InterpreterFunction;
                                        }
                                    }
                                }
                                8907700205828477361 => {
                                    if !(((*sp).parts.tag
                                        ^ TypeLocative)
                                        & (((1) << 6)
                                            - 1)
                                        == 0)
                                    {
                                        current_block = 17903399028313266107;
                                        break;
                                    }
                                    i = sp.offset_from(op2) ;
                                    op1 = &mut *((*ps).StackCache)
                                        .offset(
                                            ((*sp.offset(0  )).parts.data.u
                                              )
                                                .wrapping_sub((*ps).StackCacheBase) ,
                                        ) as *mut LispObj;
                                    if op1 > op2 || op1 < fp || op2 >= sp {
                                        current_block = 4843221280033581897;
                                        break;
                                    }
                                    loop {
                                        let fresh105 = i;
                                        i = i - 1;
                                        if !(fresh105 != 0) {
                                            break;
                                        }
                                        let fresh106 = op2;
                                        op2 = op2.offset(1);
                                        let fresh107 = op1;
                                        op1 = op1.offset(1);
                                        *fresh107 = *fresh106;
                                    }
                                    sp = op1.offset(-(1  ));
                                }
                                _ => {}
                            }
                            pc = (*cp).next_pc;
                            cp = (*cp).next_cp;
                        }
                        match current_block {
                            6276274620003476740 => {}
                            5731074241326334034 => {}
                            _ => {
                                match current_block {
                                    7861402116394276230 => {
                                        if !(((*op2).parts.tag
                                            ^ TypeFixnum)
                                            & (((1) << 6)
                                                - 1)
                                            == 0)
                                        {
                                            current_block = 4843221280033581897;
                                        } else {
                                            let mut count: u32 = (*op2).parts.data.s;
                                            let mut disp_0: IvoryValueDisposition = ValueDispositionEffect;
                                            let mut framesize: u32 = 0;
                                            let mut control_3: isize = 0;
                                            let mut valueblock: *mut LispObj = 0 as *mut LispObj;
                                            'c_21088: loop {
                                                disp_0 = ((*ps).control >> 18
                                                    & (((1) << 2)
                                                        - 1))
                                                    as IvoryValueDisposition;
                                                framesize = ((*ps).control >> 9
                                                    & (((1) << 8)
                                                        - 1));
                                                control_3 = (*fp.offset(1  ))
                                                    .parts
                                                    .data
                                                    .u ;
                                                valueblock = &mut *sp
                                                    .offset(-(count - 1) )
                                                    as *mut LispObj;
                                                if (disp_0
                                                    == ValueDispositionMultiple
                                                    || disp_0
                                                        == ValueDispositionReturn)
                                                    && framesize + count + 1  > 112
                                                {
                                                    current_block = 4843221280033581897;
                                                    break;
                                                }
                                                if ((*ps).control >> 24
                                                    & (((1) << 3)
                                                        - 1))  != 0
                                                {
                                                    while ((*ps).control >> 26
                                                        & (((1) << 1)
                                                            - 1))  != 0
                                                    {
                                                        let mut cbp_0: *mut LispObj = &mut *((*ps).StackCache)
                                                            .offset(
                                                                ((*ps).CatchBlockPointer.parts.data.u)
                                                                    .wrapping_sub((*ps).StackCacheBase) ,
                                                            ) as *mut LispObj;
                                                        let mut control_4: isize = (*ps).control;
                                                        if ((*cbp_0.offset(1  )).parts.tag
                                                            >> 6
                                                            & (((1) << 1)
                                                                - 1) )  != 0
                                                        {
                                                            current_block = 5062927037696308685;
                                                            break 'c_21088;
                                                        }
                                                        control_4 = ((((*cbp_0.offset(2  ))
                                                            .parts
                                                            .tag >> 7
                                                            & (((1) << 1)
                                                                - 1) )
                                                            & ((1) << 1)
                                                                - 1) << 8)
                                                            | control_4
                                                                & !((((1) << 1)
                                                                    - 1) << 8);
                                                        control_4 = ((((*cbp_0.offset(2  ))
                                                            .parts
                                                            .tag >> 6
                                                            & (((1) << 1)
                                                                - 1) )
                                                            & ((1) << 1)
                                                                - 1) << 26)
                                                            | control_4
                                                                & !((((1) << 1)
                                                                    - 1) << 26);
                                                        (*ps).control = control_4;
                                                        (*ps)
                                                            .CatchBlockPointer
                                                            .whole = (*cbp_0.offset(2  )).whole
                                                            & !ObjectCdrMask.whole;
                                                    }
                                                    if ((*ps).control >> 25
                                                        & (((1) << 1)
                                                            - 1))  != 0
                                                    {
                                                        if (*ps).DeepBoundP != 0 {
                                                            current_block = 18241021006505011791;
                                                            break;
                                                        }
                                                        while ((*ps).control >> 25
                                                            & (((1) << 1)
                                                                - 1))  != 0
                                                        {
                                                            Unbind();
                                                        }
                                                    }
                                                    if ((*ps).control >> 24
                                                        & (((1) << 1)
                                                            - 1))  != 0
                                                    {
                                                        current_block = 4843221280033581897;
                                                        break;
                                                    }
                                                }
                                                if disp_0
                                                    != ValueDispositionReturn
                                                {
                                                    pc = (*ps).continuation;
                                                }
                                                (*ps).continuation = *fp.offset(0  );
                                                sp = fp.offset(-(1  ));
                                                fp = fp.offset(-(framesize ));
                                                lp = fp
                                                    .offset(
                                                        (control_3 >> 0
                                                            & (((1) << 8)
                                                                - 1))
                                                            ,
                                                    );
                                                (*ps).control = control_3;
                                                match disp_0  {
                                                    1 => {
                                                        if count > 0  {
                                                            (*sp.offset(1  ))
                                                                .whole = (*valueblock).whole & !ObjectCdrMask.whole;
                                                            sp = sp.offset(1);
                                                        } else {
                                                            *sp.offset(1  ) = ObjectNIL;
                                                            sp = sp.offset(1);
                                                        }
                                                    }
                                                    3 => {
                                                        i = count;
                                                        loop {
                                                            let fresh147 = i;
                                                            i = i - 1;
                                                            if !(fresh147 != 0) {
                                                                break;
                                                            }
                                                            let fresh148 = valueblock;
                                                            valueblock = valueblock.offset(1);
                                                            sp = sp.offset(1);
                                                            (*sp).whole = (*fresh148).whole & !ObjectCdrMask.whole;
                                                        }
                                                        (*sp.offset(1  ))
                                                            .parts
                                                            .data
                                                            .s = count;
                                                        (*sp.offset(1  ))
                                                            .parts
                                                            .tag = TypeFixnum ;
                                                        sp = sp.offset(1);
                                                    }
                                                    2 => {
                                                        i = count;
                                                        loop {
                                                            let fresh149 = i;
                                                            i = i - 1;
                                                            if !(fresh149 != 0) {
                                                                break;
                                                            }
                                                            let fresh150 = valueblock;
                                                            valueblock = valueblock.offset(1);
                                                            sp = sp.offset(1);
                                                            *sp = *fresh150;
                                                        }
                                                    }
                                                    0 | _ => {}
                                                }
                                                if fp < (*ps).StackCache {
                                                    let ref mut fresh151 = (*ps).sp;
                                                    *fresh151 = sp;
                                                    let ref mut fresh152 = (*ps).restartsp;
                                                    *fresh152 = restartsp;
                                                    let ref mut fresh153 = (*ps).fp;
                                                    *fresh153 = fp;
                                                    let ref mut fresh154 = (*ps).lp;
                                                    *fresh154 = lp;
                                                    (*ps).pc = pc;
                                                    StackCacheScrollDown();
                                                    valueblock = valueblock
                                                        .offset(
                                                            ((*ps).sp).offset_from(sp)  ,
                                                        );
                                                    sp = (*ps).sp;
                                                    restartsp = (*ps).restartsp;
                                                    fp = (*ps).fp;
                                                    lp = (*ps).lp;
                                                    pc = (*ps).pc;
                                                }
                                                if !(disp_0
                                                    == ValueDispositionReturn)
                                                {
                                                    current_block = 13269259571821644417;
                                                    continue 'c_3562;
                                                }
                                                if suspend != 0 {
                                                    ProcessSuspend();
                                                }
                                            }
                                        }
                                    }
                                    4594643456678373142 => {
                                        let mut disp: IvoryValueDisposition = ValueDispositionEffect;
                                        let mut control_1: isize = 0;
                                        'c_22021: loop {
                                            disp = ((*ps).control >> 18
                                                & (((1) << 2)
                                                    - 1))
                                                as IvoryValueDisposition;
                                            control_1 = (*fp.offset(1  ))
                                                .parts
                                                .data
                                                .u ;
                                            if ((*ps).control >> 24
                                                & (((1) << 3)
                                                    - 1))  != 0
                                            {
                                                while ((*ps).control >> 26
                                                    & (((1) << 1)
                                                        - 1))  != 0
                                                {
                                                    let mut cbp: *mut LispObj = &mut *((*ps).StackCache)
                                                        .offset(
                                                            ((*ps).CatchBlockPointer.parts.data.u)
                                                                .wrapping_sub((*ps).StackCacheBase) ,
                                                        ) as *mut LispObj;
                                                    let mut control_2: isize = (*ps).control;
                                                    if ((*cbp.offset(1  )).parts.tag
                                                        >> 6
                                                        & (((1) << 1)
                                                            - 1) )  != 0
                                                    {
                                                        current_block = 5062927037696308685;
                                                        break 'c_22021;
                                                    }
                                                    control_2 = ((((*cbp.offset(2  ))
                                                        .parts
                                                        .tag >> 7
                                                        & (((1) << 1)
                                                            - 1) )
                                                        & ((1) << 1)
                                                            - 1) << 8)
                                                        | control_2
                                                            & !((((1) << 1)
                                                                - 1) << 8);
                                                    control_2 = ((((*cbp.offset(2  ))
                                                        .parts
                                                        .tag >> 6
                                                        & (((1) << 1)
                                                            - 1) )
                                                        & ((1) << 1)
                                                            - 1) << 26)
                                                        | control_2
                                                            & !((((1) << 1)
                                                                - 1) << 26);
                                                    (*ps).control = control_2;
                                                    (*ps)
                                                        .CatchBlockPointer
                                                        .whole = (*cbp.offset(2  )).whole
                                                        & !ObjectCdrMask.whole;
                                                }
                                                if ((*ps).control >> 25
                                                    & (((1) << 1)
                                                        - 1))  != 0
                                                {
                                                    if (*ps).DeepBoundP != 0 {
                                                        current_block = 18241021006505011791;
                                                        break;
                                                    }
                                                    while ((*ps).control >> 25
                                                        & (((1) << 1)
                                                            - 1))  != 0
                                                    {
                                                        Unbind();
                                                    }
                                                }
                                                if ((*ps).control >> 24
                                                    & (((1) << 1)
                                                        - 1))  != 0
                                                {
                                                    current_block = 4843221280033581897;
                                                    break;
                                                }
                                            }
                                            if disp
                                                != ValueDispositionReturn
                                            {
                                                pc = (*ps).continuation;
                                            }
                                            (*ps).continuation = *fp.offset(0  );
                                            sp = fp.offset(-(1  ));
                                            fp = fp
                                                .offset(
                                                    -(((*ps).control >> 9
                                                        & (((1) << 8)
                                                            - 1))
                                                        ),
                                                );
                                            lp = fp
                                                .offset(
                                                    (control_1 >> 0
                                                        & (((1) << 8)
                                                            - 1))
                                                        ,
                                                );
                                            (*ps).control = control_1;
                                            match disp  {
                                                1 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*scratch).whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                }
                                                3 => {
                                                    (*sp.offset(1  ))
                                                        .whole = (*scratch).whole & !ObjectCdrMask.whole;
                                                    sp = sp.offset(1);
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .s = 1;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = TypeFixnum ;
                                                    sp = sp.offset(1);
                                                }
                                                0 | 2 | _ => {}
                                            }
                                            if fp < (*ps).StackCache {
                                                let ref mut fresh142 = (*ps).sp;
                                                *fresh142 = sp;
                                                let ref mut fresh143 = (*ps).restartsp;
                                                *fresh143 = restartsp;
                                                let ref mut fresh144 = (*ps).fp;
                                                *fresh144 = fp;
                                                let ref mut fresh145 = (*ps).lp;
                                                *fresh145 = lp;
                                                (*ps).pc = pc;
                                                StackCacheScrollDown();
                                                sp = (*ps).sp;
                                                restartsp = (*ps).restartsp;
                                                fp = (*ps).fp;
                                                lp = (*ps).lp;
                                                pc = (*ps).pc;
                                            }
                                            if !(disp
                                                == ValueDispositionReturn)
                                            {
                                                current_block = 13269259571821644417;
                                                continue 'c_3562;
                                            }
                                            if suspend != 0 {
                                                ProcessSuspend();
                                            }
                                        }
                                    }
                                    18354039080828970347 => {
                                        if ((*op2).parts.tag
                                            ^ TypeFixnum)
                                            & (((1) << 6)
                                                - 1)
                                            == 0
                                        {
                                            let mut count_0: u32 = (*op2).parts.data.s;
                                            let mut framesize_0: u32 = ((*ps).control
                                                >> 9
                                                & (((1) << 8)
                                                    - 1));
                                            let mut control_5: isize = (*fp
                                                .offset(1  ))
                                                .parts
                                                .data
                                                .u ;
                                            let mut valueblock_0: *mut LispObj = &mut *sp
                                                .offset(-(count_0 - 1) )
                                                as *mut LispObj;
                                            if framesize_0 + count_0 + 1
                                                > 112
                                            {
                                                current_block = 4843221280033581897;
                                            } else {
                                                if ((*ps).control >> 24
                                                    & (((1) << 3)
                                                        - 1))  != 0
                                                {
                                                    loop {
                                                        if !(((*ps).control >> 26
                                                            & (((1) << 1)
                                                                - 1))  != 0)
                                                        {
                                                            current_block = 16582679326598761200;
                                                            break;
                                                        }
                                                        let mut cbp_1: *mut LispObj = &mut *((*ps).StackCache)
                                                            .offset(
                                                                ((*ps).CatchBlockPointer.parts.data.u)
                                                                    .wrapping_sub((*ps).StackCacheBase) ,
                                                            ) as *mut LispObj;
                                                        let mut control_6: isize = (*ps).control;
                                                        if ((*cbp_1.offset(1  )).parts.tag
                                                            >> 6
                                                            & (((1) << 1)
                                                                - 1) )  != 0
                                                        {
                                                            current_block = 5062927037696308685;
                                                            break;
                                                        }
                                                        control_6 = ((((*cbp_1.offset(2  ))
                                                            .parts
                                                            .tag >> 7
                                                            & (((1) << 1)
                                                                - 1) )
                                                            & ((1) << 1)
                                                                - 1) << 8)
                                                            | control_6
                                                                & !((((1) << 1)
                                                                    - 1) << 8);
                                                        control_6 = ((((*cbp_1.offset(2  ))
                                                            .parts
                                                            .tag >> 6
                                                            & (((1) << 1)
                                                                - 1) )
                                                            & ((1) << 1)
                                                                - 1) << 26)
                                                            | control_6
                                                                & !((((1) << 1)
                                                                    - 1) << 26);
                                                        (*ps).control = control_6;
                                                        (*ps)
                                                            .CatchBlockPointer
                                                            .whole = (*cbp_1.offset(2  )).whole
                                                            & !ObjectCdrMask.whole;
                                                    }
                                                    match current_block {
                                                        5062927037696308685 => {}
                                                        _ => {
                                                            if ((*ps).control >> 25
                                                                & (((1) << 1)
                                                                    - 1))  != 0
                                                            {
                                                                if (*ps).DeepBoundP != 0 {
                                                                    current_block = 18241021006505011791;
                                                                } else {
                                                                    while ((*ps).control >> 25
                                                                        & (((1) << 1)
                                                                            - 1))  != 0
                                                                    {
                                                                        Unbind();
                                                                    }
                                                                    current_block = 16552782296836463746;
                                                                }
                                                            } else {
                                                                current_block = 16552782296836463746;
                                                            }
                                                            match current_block {
                                                                18241021006505011791 => {}
                                                                _ => {
                                                                    if ((*ps).control >> 24
                                                                        & (((1) << 1)
                                                                            - 1))  != 0
                                                                    {
                                                                        current_block = 4843221280033581897;
                                                                    } else {
                                                                        current_block = 6413836429277579491;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    current_block = 6413836429277579491;
                                                }
                                                match current_block {
                                                    4843221280033581897 => {}
                                                    5062927037696308685 => {}
                                                    18241021006505011791 => {}
                                                    _ => {
                                                        pc = (*ps).continuation;
                                                        (*ps).continuation = *fp.offset(0  );
                                                        sp = fp.offset(-(1  ));
                                                        fp = fp.offset(-(framesize_0 ));
                                                        let ref mut fresh156 = (*ps).control;
                                                        *fresh156 = control_5;
                                                        lp = fp
                                                            .offset(
                                                                (*fresh156 >> 0
                                                                    & (((1) << 8)
                                                                        - 1))
                                                                    ,
                                                            );
                                                        i = count_0;
                                                        loop {
                                                            let fresh157 = i;
                                                            i = i - 1;
                                                            if !(fresh157 != 0) {
                                                                break;
                                                            }
                                                            let fresh158 = valueblock_0;
                                                            valueblock_0 = valueblock_0.offset(1);
                                                            sp = sp.offset(1);
                                                            *sp = *fresh158;
                                                        }
                                                        if fp < (*ps).StackCache {
                                                            let ref mut fresh159 = (*ps).sp;
                                                            *fresh159 = sp;
                                                            let ref mut fresh160 = (*ps).restartsp;
                                                            *fresh160 = restartsp;
                                                            let ref mut fresh161 = (*ps).fp;
                                                            *fresh161 = fp;
                                                            let ref mut fresh162 = (*ps).lp;
                                                            *fresh162 = lp;
                                                            (*ps).pc = pc;
                                                            StackCacheScrollDown();
                                                            valueblock_0 = valueblock_0
                                                                .offset(
                                                                    ((*ps).sp).offset_from(sp)  ,
                                                                );
                                                            sp = (*ps).sp;
                                                            restartsp = (*ps).restartsp;
                                                            fp = (*ps).fp;
                                                            lp = (*ps).lp;
                                                            pc = (*ps).pc;
                                                        }
                                                        current_block = 13269259571821644417;
                                                        continue;
                                                    }
                                                }
                                            }
                                        } else {
                                            current_block = 4843221280033581897;
                                        }
                                    }
                                    18376443059329140242 => {
                                        loop {
                                            supplied_0 = ((*ps).control >> 0
                                                & (((1) << 8)
                                                    - 1));
                                            minimum_0 = (*cp).operand >> 0
                                                & ((1) << 8)
                                                    - 1;
                                            maximum_0 = (*cp).operand >> 8
                                                & ((1) << 8)
                                                    - 1;
                                            if !(((*ps).control >> 17
                                                & (((1) << 1)
                                                    - 1))  != 0)
                                            {
                                                current_block = 4979724291599208512;
                                                break;
                                            }
                                            if ((*sp).parts.tag
                                                ^ TypeNIL)
                                                & (((1) << 6)
                                                    - 1)
                                                == 0
                                            {
                                                sp = sp.offset(-1);
                                                (*ps)
                                                    .control = ((0
                                                    & ((1) << 1)
                                                        - 1) << 17)
                                                    | (*ps).control
                                                        & !((((1) << 1)
                                                            - 1) << 17);
                                                current_block = 4979724291599208512;
                                                break;
                                            } else {
                                                if supplied_0 >= maximum_0 {
                                                    current_block = 4843221280033581897;
                                                    break;
                                                }
                                                if ((*sp).parts.tag
                                                    ^ TypeList)
                                                    & (((1) << 6)
                                                        - 1)
                                                    == 0
                                                {
                                                    i = maximum_0 - supplied_0;
                                                    if ((*sp.offset(0  )).parts.data.u
                                                      )
                                                        .wrapping_sub((*ps).StackCacheBase)
                                                        < (4  * 0x100)
                                                    {
                                                        let ref mut fresh138 = (*ps).sp;
                                                        *fresh138 = sp;
                                                        let ref mut fresh139 = (*ps).restartsp;
                                                        *fresh139 = restartsp;
                                                        let ref mut fresh140 = (*ps).fp;
                                                        *fresh140 = fp;
                                                        let ref mut fresh141 = (*ps).lp;
                                                        *fresh141 = lp;
                                                        (*ps).pc = pc;
                                                        i = PullApplyArgsQuickly(maximum_0 - supplied_0);
                                                        sp = (*ps).sp;
                                                        restartsp = (*ps).restartsp;
                                                        fp = (*ps).fp;
                                                        lp = (*ps).lp;
                                                        pc = (*ps).pc;
                                                    }
                                                    if i != 0 {
                                                        current_block = 8537654185434961812;
                                                        break;
                                                    }
                                                } else {
                                                    i = maximum_0 - supplied_0;
                                                    current_block = 8537654185434961812;
                                                    break;
                                                }
                                            }
                                        }
                                        match current_block {
                                            8537654185434961812 => {}
                                            4843221280033581897 => {}
                                            _ => {
                                                if minimum_0 <= supplied_0 && supplied_0 <= maximum_0 {
                                                    pc
                                                        .parts
                                                        .data
                                                        .u = (pc.parts.data.u )
                                                        .wrapping_add(
                                                            (supplied_0 - minimum_0 + 1) ,
                                                        )  ;
                                                    current_block = 13269259571821644417;
                                                    continue;
                                                } else {
                                                    current_block = 4843221280033581897;
                                                }
                                            }
                                        }
                                    }
                                    1516416590674582958 => {
                                        loop {
                                            supplied = 0;
                                            minimum = (*cp).operand >> 0
                                                & ((1) << 8)
                                                    - 1;
                                            maximum = (*cp).operand >> 8
                                                & ((1) << 8)
                                                    - 1;
                                            supplied = ((*ps).control >> 0
                                                & (((1) << 8)
                                                    - 1));
                                            if !(((*ps).control >> 17
                                                & (((1) << 1)
                                                    - 1))  != 0)
                                            {
                                                current_block = 12964998671468006942;
                                                break;
                                            }
                                            if ((*sp).parts.tag
                                                ^ TypeNIL)
                                                & (((1) << 6)
                                                    - 1)
                                                == 0
                                            {
                                                sp = sp.offset(-1);
                                                (*ps)
                                                    .control = ((0
                                                    & ((1) << 1)
                                                        - 1) << 17)
                                                    | (*ps).control
                                                        & !((((1) << 1)
                                                            - 1) << 17);
                                                current_block = 12964998671468006942;
                                                break;
                                            } else if supplied > maximum {
                                                (*sp.offset(0  ))
                                                    .parts
                                                    .tag = (*sp.offset(0  )).parts.tag
                                                    | ((CdrNil) << 6)
                                                        ;
                                                (*sp.offset(-(1) ))
                                                    .parts
                                                    .tag = (*sp.offset(-(1) )).parts.tag
                                                    | ((CdrNormal) << 6)
                                                        ;
                                                let mut tag_16: Tag = TypeList  as Tag;
                                                let mut data_16: isize = ((*ps).StackCacheBase)
                                                    .wrapping_add(
                                                        fp.offset_from((*ps).StackCache)
                                                          ,
                                                    )
                                                    .wrapping_add(maximum);
                                                (*sp.offset(1  ))
                                                    .parts
                                                    .tag = tag_16 ;
                                                (*sp.offset(1  ))
                                                    .parts
                                                    .data
                                                    .u = data_16 ;
                                                sp = sp.offset(1);
                                                lp = lp.offset(1);
                                                (*ps)
                                                    .control = ((1  + supplied
                                                    & ((1) << 8)
                                                        - 1) << 0)
                                                    | (*ps).control
                                                        & !((((1) << 8)
                                                            - 1) << 0);
                                                pc
                                                    .parts
                                                    .data
                                                    .u = (pc.parts.data.u )
                                                    .wrapping_add(
                                                        (maximum - minimum + 2) ,
                                                    )  ;
                                                current_block = 13269259571821644417;
                                                continue 'c_3562;
                                            } else if supplied < maximum {
                                                match (*sp.offset(0  )).parts.tag
                                                    & (((1) << 6)
                                                        - 1)
                                                {
                                                    20 => {
                                                        sp = sp.offset(-1);
                                                        (*ps)
                                                            .control = ((0
                                                            & ((1) << 1)
                                                                - 1) << 17)
                                                            | (*ps).control
                                                                & !((((1) << 1)
                                                                    - 1) << 17);
                                                        current_block = 12964998671468006942;
                                                        break;
                                                    }
                                                    21 => {
                                                        i = maximum - supplied;
                                                        if ((*sp.offset(0  )).parts.data.u
                                                          )
                                                            .wrapping_sub((*ps).StackCacheBase)
                                                            < (4  * 0x100)
                                                        {
                                                            let ref mut fresh134 = (*ps).sp;
                                                            *fresh134 = sp;
                                                            let ref mut fresh135 = (*ps).restartsp;
                                                            *fresh135 = restartsp;
                                                            let ref mut fresh136 = (*ps).fp;
                                                            *fresh136 = fp;
                                                            let ref mut fresh137 = (*ps).lp;
                                                            *fresh137 = lp;
                                                            (*ps).pc = pc;
                                                            i = PullApplyArgsQuickly(i);
                                                            sp = (*ps).sp;
                                                            restartsp = (*ps).restartsp;
                                                            fp = (*ps).fp;
                                                            lp = (*ps).lp;
                                                            pc = (*ps).pc;
                                                        }
                                                        if i != 0 {
                                                            current_block = 8537654185434961812;
                                                            break;
                                                        }
                                                    }
                                                    _ => {
                                                        i = maximum - supplied;
                                                        current_block = 8537654185434961812;
                                                        break;
                                                    }
                                                }
                                            } else {
                                                pc
                                                    .parts
                                                    .data
                                                    .u = (pc.parts.data.u )
                                                    .wrapping_add(
                                                        (supplied - minimum + 2) ,
                                                    )  ;
                                                current_block = 13269259571821644417;
                                                continue 'c_3562;
                                            }
                                        }
                                        match current_block {
                                            8537654185434961812 => {}
                                            _ => {
                                                if supplied > maximum {
                                                    (*sp.offset(0  ))
                                                        .parts
                                                        .tag = (*sp.offset(0  )).parts.tag
                                                        | ((CdrNil) << 6)
                                                            ;
                                                    let mut tag_17: Tag = TypeList  as Tag;
                                                    let mut data_17: isize = ((*ps).StackCacheBase)
                                                        .wrapping_add(
                                                            fp.offset_from((*ps).StackCache)
                                                              ,
                                                        )
                                                        .wrapping_add(maximum);
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .tag = tag_17 ;
                                                    (*sp.offset(1  ))
                                                        .parts
                                                        .data
                                                        .u = data_17 ;
                                                    sp = sp.offset(1);
                                                    pc
                                                        .parts
                                                        .data
                                                        .u = (pc.parts.data.u )
                                                        .wrapping_add(
                                                            (maximum - minimum + 2) ,
                                                        )  ;
                                                    current_block = 13269259571821644417;
                                                    continue;
                                                } else if !(supplied < minimum) {
                                                    pc
                                                        .parts
                                                        .data
                                                        .u = (pc.parts.data.u )
                                                        .wrapping_add(
                                                            (supplied - minimum + 1) ,
                                                        )  ;
                                                    current_block = 13269259571821644417;
                                                    continue;
                                                }
                                                current_block = 4843221280033581897;
                                            }
                                        }
                                    }
                                    17028499347507987478 => {
                                        fp = op1;
                                        lp = op2;
                                        pc = (*ps).continuation;
                                        (*ps).continuation = (*cp).next_pc;
                                        if fp > (*ps).StackCacheLimit {
                                            let ref mut fresh130 = (*ps).sp;
                                            *fresh130 = sp;
                                            let ref mut fresh131 = (*ps).restartsp;
                                            *fresh131 = restartsp;
                                            let ref mut fresh132 = (*ps).fp;
                                            *fresh132 = fp;
                                            let ref mut fresh133 = (*ps).lp;
                                            *fresh133 = lp;
                                            (*ps).pc = pc;
                                            StackCacheScrollUp();
                                            sp = (*ps).sp;
                                            restartsp = (*ps).restartsp;
                                            fp = (*ps).fp;
                                            lp = (*ps).lp;
                                            pc = (*ps).pc;
                                        }
                                        current_block = 13269259571821644417;
                                        continue;
                                    }
                                    2113209135408378170 => {
                                        match (*op2).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                        {
                                            38 | 39 => {
                                                pc = *op2;
                                                if ((*op2).parts.tag >> 7
                                                    & (((1) << 1)
                                                        - 1) )  != 0
                                                {
                                                    (*processor)
                                                        .control = ((((*op2).parts.tag >> 6
                                                        & (((1) << 1)
                                                            - 1) )
                                                        & ((1) << 1)
                                                            - 1) << 23)
                                                        | (*processor).control
                                                            & !((((1) << 1)
                                                                - 1) << 23);
                                                }
                                                current_block = 13269259571821644417;
                                                continue;
                                            }
                                            _ => {
                                                current_block = 5731074241326334034;
                                            }
                                        }
                                    }
                                    14904807116429336826 => {
                                        if ((*scratch).parts.tag
                                            ^ TypeListInstance)
                                            & (((1) << 6)
                                                - 1)
                                            == 0
                                        {
                                            current_block = 5731074241326334034;
                                        } else if (*scratch).parts.tag
                                            & 0o76
                                            == (TypeSparePointer1  & 0o76)

                                            || (*scratch).parts.tag
                                                & (((1) << 6)
                                                    - 1)
                                                == TypeSpareImmediate1
                                            || (*scratch).parts.tag
                                                & (((1) << 6)
                                                    - 1)
                                                == TypeSpareNumber
                                        {
                                            current_block = 5731074241326334034;
                                        } else {
                                            current_block = 4843221280033581897;
                                        }
                                    }
                                    8171028261534490456 => {
                                        if (*cp).operand == 0 {
                                            current_block = 4843221280033581897;
                                        } else {
                                            pc
                                                .parts
                                                .data
                                                .u = (pc.parts.data.u )
                                                .wrapping_add(
                                                    ((*cp).operand >> 1) ,
                                                )  ;
                                            if pc.parts.tag & 1 != 0 {
                                                if (*cp).operand & 1  != 0 {
                                                    pc.parts.tag = TypeEvenPC ;
                                                    pc.parts.data.u = (pc.parts.data.u).wrapping_add(1);
                                                } else {
                                                    pc.parts.tag = TypeOddPC ;
                                                }
                                            } else if (*cp).operand & 1  != 0 {
                                                pc.parts.tag = TypeOddPC ;
                                            } else {
                                                pc.parts.tag = TypeEvenPC ;
                                            }
                                            current_block = 13269259571821644417;
                                            continue;
                                        }
                                    }
                                    10652006131370760251 => {
                                        current_block = 14734397281083605686;
                                    }
                                    3345631096401374476 => {
                                        match (*sp).parts.tag
                                            & (((1) << 6)
                                                - 1)
                                        {
                                            18 | 19 => {
                                                current_block = 5731074241326334034;
                                            }
                                            _ => {
                                                current_block = 17903399028313266107;
                                            }
                                        }
                                    }
                                    964297686937777693 => {
                                        if (*op2).parts.tag & 0o70
                                            == 0o10
                                        {
                                            current_block = 5731074241326334034;
                                        } else {
                                            current_block = 4843221280033581897;
                                        }
                                    }
                                    15547512934408055944 => {
                                        if (*op2).parts.tag & 0o70
                                            == 0o10
                                            && (*sp).parts.tag & 0o70
                                                == 0o10
                                        {
                                            current_block = 5731074241326334034;
                                        } else {
                                            current_block = 4843221280033581897;
                                        }
                                    }
                                    16288314355679075311 => {
                                        if ((*sp).parts.tag
                                            ^ TypeListInstance)
                                            & (((1) << 6)
                                                - 1)
                                            == 0
                                        {
                                            current_block = 5731074241326334034;
                                        } else {
                                            current_block = 17903399028313266107;
                                        }
                                    }
                                    3219376467211849282 => {
                                        if ((*op2).parts.tag
                                            ^ TypeListInstance)
                                            & (((1) << 6)
                                                - 1)
                                            == 0
                                        {
                                            current_block = 5731074241326334034;
                                        } else {
                                            current_block = 5428624171862246401;
                                        }
                                    }
                                    _ => {}
                                }
                                match current_block {
                                    5731074241326334034 => {}
                                    _ => {
                                        match current_block {
                                            5062927037696308685 => {
                                                let mut cbp_3: *mut LispObj = &mut *((*ps).StackCache)
                                                    .offset(
                                                        ((*ps).CatchBlockPointer.parts.data.u)
                                                            .wrapping_sub((*ps).StackCacheBase) ,
                                                    ) as *mut LispObj;
                                                let mut control_8: isize = (*ps).control;
                                                sp = restartsp;
                                                if (*ps).BindingStackPointer
                                                    != (*cbp_3.offset(1  )).parts.data.u

                                                {
                                                    if (*ps).DeepBoundP != 0 {
                                                        current_block = 18241021006505011791;
                                                    } else {
                                                        loop {
                                                            if !((*ps).BindingStackPointer
                                                                > (*cbp_3.offset(1  )).parts.data.u
                                                                  )
                                                            {
                                                                current_block = 16622816466682350090;
                                                                break;
                                                            }
                                                            if Unbind() != 0 {
                                                                current_block = 4843221280033581897;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    current_block = 16622816466682350090;
                                                }
                                                match current_block {
                                                    4843221280033581897 => {}
                                                    18241021006505011791 => {}
                                                    _ => {
                                                        let mut tag_71: Tag = (pc.parts.tag
                                                            | ((((control_8 >> 23
                                                                & (((1) << 1)
                                                                    - 1))
                                                                & ((1) << 1)
                                                                    - 1) << 0
                                                                | 2
                                                                    & !((((1) << 1)
                                                                        - 1) << 0))
                                                                << 6) ) as Tag;
                                                        let mut data_71: isize = pc.parts.data.u ;
                                                        (*sp.offset(1  ))
                                                            .parts
                                                            .tag = tag_71 ;
                                                        (*sp.offset(1  ))
                                                            .parts
                                                            .data
                                                            .u = data_71 ;
                                                        sp = sp.offset(1);
                                                        control_8 = ((1
                                                            & ((1) << 1)
                                                                - 1) << 23)
                                                            | control_8
                                                                & !((((1) << 1)
                                                                    - 1) << 23);
                                                        control_8 = ((((*cbp_3.offset(2  ))
                                                            .parts
                                                            .tag >> 7
                                                            & (((1) << 1)
                                                                - 1) )
                                                            & ((1) << 1)
                                                                - 1) << 8)
                                                            | control_8
                                                                & !((((1) << 1)
                                                                    - 1) << 8);
                                                        control_8 = ((((*cbp_3.offset(2  ))
                                                            .parts
                                                            .tag >> 6
                                                            & (((1) << 1)
                                                                - 1) )
                                                            & ((1) << 1)
                                                                - 1) << 26)
                                                            | control_8
                                                                & !((((1) << 1)
                                                                    - 1) << 26);
                                                        (*ps).control = control_8;
                                                        (*ps)
                                                            .CatchBlockPointer
                                                            .whole = (*cbp_3.offset(2  )).whole
                                                            & !ObjectCdrMask.whole;
                                                        pc = *cbp_3.offset(0  );
                                                        current_block = 13269259571821644417;
                                                        continue;
                                                    }
                                                }
                                            }
                                            14734397281083605686 => {
                                                let mut next_pc: QWord = pc;
                                                IncrementPC(&mut next_pc, (*cp).operand);
                                                let ref mut fresh117 = (*ps).sp;
                                                *fresh117 = sp;
                                                let ref mut fresh118 = (*ps).restartsp;
                                                *fresh118 = restartsp;
                                                let ref mut fresh119 = (*ps).fp;
                                                *fresh119 = fp;
                                                let ref mut fresh120 = (*ps).lp;
                                                *fresh120 = lp;
                                                (*ps).pc = pc;
                                                if TakeInstructionException(
                                                    (*cp).instruction,
                                                    op2,
                                                    &mut next_pc,
                                                ) == 0
                                                {
                                                    current_block = 11218981141702897965;
                                                    continue;
                                                }
                                                sp = (*ps).sp;
                                                restartsp = (*ps).restartsp;
                                                fp = (*ps).fp;
                                                lp = (*ps).lp;
                                                pc = (*ps).pc;
                                                current_block = 13269259571821644417;
                                                continue;
                                            }
                                            8537654185434961812 => {
                                                let mut pull: QWord = LispObj {
                                                    parts: {
                                                        let mut init = _LispObj {
                                                            tag: TypeFixnum ,
                                                            data: QData {
                                                                u: 0 ,
                                                            },
                                                        };
                                                        init
                                                    },
                                                };
                                                let fresh204 = sp;
                                                sp = sp.offset(-1);
                                                let mut apply: QWord = *fresh204;
                                                restartsp = sp;
                                                pull.parts.data.s = i;
                                                let ref mut fresh205 = (*ps).sp;
                                                *fresh205 = sp;
                                                let ref mut fresh206 = (*ps).restartsp;
                                                *fresh206 = restartsp;
                                                let ref mut fresh207 = (*ps).fp;
                                                *fresh207 = fp;
                                                let ref mut fresh208 = (*ps).lp;
                                                *fresh208 = lp;
                                                (*ps).pc = pc;
                                                if TakePreTrap(
                                                    PullApplyArgsTrapVector  ,
                                                    &mut pull,
                                                    &mut apply,
                                                ) == 0
                                                {
                                                    current_block = 11218981141702897965;
                                                    continue;
                                                }
                                                sp = (*ps).sp;
                                                restartsp = (*ps).restartsp;
                                                fp = (*ps).fp;
                                                lp = (*ps).lp;
                                                pc = (*ps).pc;
                                                current_block = 13269259571821644417;
                                                continue;
                                            }
                                            17903399028313266107 => {
                                                if (*sp).parts.tag & 0o76
                                                    == (TypeSparePointer1  & 0o76)

                                                    || (*sp).parts.tag
                                                        & (((1) << 6)
                                                            - 1)
                                                        == TypeSpareImmediate1
                                                    || (*sp).parts.tag
                                                        & (((1) << 6)
                                                            - 1)
                                                        == TypeSpareNumber
                                                {
                                                    current_block = 5731074241326334034;
                                                } else {
                                                    current_block = 4843221280033581897;
                                                }
                                            }
                                            5428624171862246401 => {
                                                if (*op2).parts.tag & 0o76
                                                    == (TypeSparePointer1  & 0o76)

                                                    || (*op2).parts.tag
                                                        & (((1) << 6)
                                                            - 1)
                                                        == TypeSpareImmediate1
                                                    || (*op2).parts.tag
                                                        & (((1) << 6)
                                                            - 1)
                                                        == TypeSpareNumber
                                                {
                                                    current_block = 5731074241326334034;
                                                } else {
                                                    current_block = 4843221280033581897;
                                                }
                                            }
                                            _ => {}
                                        }
                                        match current_block {
                                            5731074241326334034 => {}
                                            _ => {
                                                match current_block {
                                                    4843221280033581897 => {
                                                        if Trace != 0 {
                                                            fprintf(
                                                                stderr,
                                                                b"Illegal operand at PC %08x, #%d\n\0"
                                                                    ,
                                                                pc.parts.data.u,
                                                                (*ps).instruction_count,
                                                            );
                                                        }
                                                        let mut microstate_0: QWord = LispObj {
                                                            parts: _LispObj {
                                                                tag: 0,
                                                                data: QData { u: 0 },
                                                            },
                                                        };
                                                        let mut vma_12: QWord = LispObj {
                                                            parts: _LispObj {
                                                                tag: 0,
                                                                data: QData { u: 0 },
                                                            },
                                                        };
                                                        microstate_0
                                                            .parts
                                                            .tag = TypeFixnum ;
                                                        microstate_0.parts.data.s = 0;
                                                        vma_12.parts.tag = TypeLocative ;
                                                        vma_12
                                                            .parts
                                                            .data
                                                            .u = ((*ps).StackCacheBase)
                                                            .wrapping_add(
                                                                op2.offset_from((*ps).StackCache)
                                                                  ,
                                                            ) ;
                                                        let ref mut fresh213 = (*ps).sp;
                                                        *fresh213 = sp;
                                                        let ref mut fresh214 = (*ps).restartsp;
                                                        *fresh214 = restartsp;
                                                        let ref mut fresh215 = (*ps).fp;
                                                        *fresh215 = fp;
                                                        let ref mut fresh216 = (*ps).lp;
                                                        *fresh216 = lp;
                                                        (*ps).pc = pc;
                                                        if TakePreTrap(
                                                            ErrorTrapVector  ,
                                                            &mut microstate_0,
                                                            &mut vma_12,
                                                        ) == 0
                                                        {
                                                            current_block = 11218981141702897965;
                                                            continue;
                                                        }
                                                        sp = (*ps).sp;
                                                        restartsp = (*ps).restartsp;
                                                        fp = (*ps).fp;
                                                        lp = (*ps).lp;
                                                        pc = (*ps).pc;
                                                        current_block = 13269259571821644417;
                                                        continue;
                                                    }
                                                    _ => {
                                                        if Trace != 0 {
                                                            fprintf(
                                                                stderr,
                                                                b"Unimplemented instruction at PC %08x, #%d\n\0"
                                                                     ,
                                                                pc.parts.data.u,
                                                                (*ps).instruction_count,
                                                            );
                                                        }
                                                        let mut microstate: QWord = LispObj {
                                                            parts: _LispObj {
                                                                tag: 0,
                                                                data: QData { u: 0 },
                                                            },
                                                        };
                                                        microstate
                                                            .parts
                                                            .tag = TypeFixnum ;
                                                        microstate.parts.data.s = 0;
                                                        let ref mut fresh209 = (*ps).sp;
                                                        *fresh209 = sp;
                                                        let ref mut fresh210 = (*ps).restartsp;
                                                        *fresh210 = restartsp;
                                                        let ref mut fresh211 = (*ps).fp;
                                                        *fresh211 = fp;
                                                        let ref mut fresh212 = (*ps).lp;
                                                        *fresh212 = lp;
                                                        (*ps).pc = pc;
                                                        if TakePreTrap(
                                                            ErrorTrapVector  ,
                                                            &mut microstate,
                                                            &mut pc,
                                                        ) == 0
                                                        {
                                                            current_block = 11218981141702897965;
                                                            continue;
                                                        }
                                                        sp = (*ps).sp;
                                                        restartsp = (*ps).restartsp;
                                                        fp = (*ps).fp;
                                                        lp = (*ps).lp;
                                                        pc = (*ps).pc;
                                                        current_block = 13269259571821644417;
                                                        continue;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    match current_block {
                        6276274620003476740 => {}
                        _ => {
                            if Trace != 0 {
                                fprintf(
                                    stderr,
                                    b"Instruction exception at PC %08x, #%d\n\0"
                                        ,
                                    pc.parts.data.u,
                                    (*ps).instruction_count,
                                );
                            }
                            let ref mut fresh217 = (*ps).sp;
                            *fresh217 = sp;
                            let ref mut fresh218 = (*ps).restartsp;
                            *fresh218 = restartsp;
                            let ref mut fresh219 = (*ps).fp;
                            *fresh219 = fp;
                            let ref mut fresh220 = (*ps).lp;
                            *fresh220 = lp;
                            (*ps).pc = pc;
                            if TakeInstructionException(
                                (*cp).instruction,
                                op2,
                                &mut (*cp).next_pc,
                            ) == 0
                            {
                                current_block = 11218981141702897965;
                                continue;
                            }
                            sp = (*ps).sp;
                            restartsp = (*ps).restartsp;
                            fp = (*ps).fp;
                            lp = (*ps).lp;
                            pc = (*ps).pc;
                            current_block = 13269259571821644417;
                            continue;
                        }
                    }
                }
                let ref mut fresh221 = (*ps).sp;
                *fresh221 = sp;
                let ref mut fresh222 = (*ps).restartsp;
                *fresh222 = restartsp;
                let ref mut fresh223 = (*ps).fp;
                *fresh223 = fp;
                let ref mut fresh224 = (*ps).lp;
                *fresh224 = lp;
                (*ps).pc = pc;
                current_block = 11218981141702897965;
            }
        }
    }
    signal(
        29,
        ::std::mem::transmute::<
            Option::<fn() -> ()>,
            __sighandler_t,
        >(old_io_handler),
    );
    signal(
        11,
        ::std::mem::transmute::<
            Option::<fn() -> ()>,
            __sighandler_t,
        >(old_segv_handler),
    );
    return 2;
}
