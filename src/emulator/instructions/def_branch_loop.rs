use crate::hardware::machine::VirtualMachine;

use super::common::{ Instruction, InstructionFamily, InstructionFormat };

pub fn make_instructions_branch_loop() -> Vec<Instruction> {
    return vec![
        Instruction::new()
            .set_name("branch".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o174)
            .set_exec(Some(VirtualMachine::cpu_branch)),
        Instruction::new()
            .set_name("branch-true".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o060)
            .set_exec(Some(VirtualMachine::cpu_branch_true)),
        Instruction::new()
            .set_name("branch-false".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o070)
            .set_exec(Some(VirtualMachine::cpu_branch_false)),
        Instruction::new()
            .set_name("branch-true-no-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o064)
            .set_exec(Some(VirtualMachine::cpu_branch_true_no_pop)),
        Instruction::new()
            .set_name("branch-false-no-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o074)
            .set_exec(Some(VirtualMachine::cpu_branch_false_no_pop)),
        Instruction::new()
            .set_name("branch-true-else-no-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o066)
            .set_exec(Some(VirtualMachine::cpu_branch_true_else_no_pop)),
        Instruction::new()
            .set_name("branch-false-else-no-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o076)
            .set_exec(Some(VirtualMachine::cpu_branch_false_else_no_pop)),
        Instruction::new()
            .set_name("branch-true-and-no-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o065)
            .set_exec(Some(VirtualMachine::cpu_branch_true_and_no_pop)),
        Instruction::new()
            .set_name("branch-false-and-no-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o075)
            .set_exec(Some(VirtualMachine::cpu_branch_false_and_no_pop)),
        Instruction::new()
            .set_name("branch-true-and-extra-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o062)
            .set_exec(Some(VirtualMachine::cpu_branch_true_and_extra_pop)),
        Instruction::new()
            .set_name("branch-false-and-extra-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o072)
            .set_exec(Some(VirtualMachine::cpu_branch_false_and_extra_pop)),
        Instruction::new()
            .set_name("branch-true-else-extra-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o061)
            .set_exec(Some(VirtualMachine::cpu_branch_true_else_extra_pop)),
        Instruction::new()
            .set_name("branch-false-else-extra-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o071)
            .set_exec(Some(VirtualMachine::cpu_branch_false_else_extra_pop)),
        Instruction::new()
            .set_name("branch-true-extra-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o063)
            .set_exec(Some(VirtualMachine::cpu_branch_true_extra_pop)),
        Instruction::new()
            .set_name("branch-false-extra-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o073)
            .set_exec(Some(VirtualMachine::cpu_branch_false_extra_pop)),
        Instruction::new()
            .set_name("branch-true-and-no-pop-else-no-pop-extra-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o067)
            .set_exec(Some(VirtualMachine::cpu_branch_true_and_no_pop_else_no_pop_extra_pop)),
        Instruction::new()
            .set_name("branch-false-and-no-pop-else-no-pop-extra-pop".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o077)
            .set_exec(Some(VirtualMachine::cpu_branch_false_and_no_pop_else_no_pop_extra_pop)),
        Instruction::new()
            .set_name("loop-decrement-tos".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o175)
            .set_exec(Some(VirtualMachine::cpu_loop_decrement_tos)),
        Instruction::new()
            .set_name("loop-decrement-tos-less-than".to_string())
            .set_family(InstructionFamily::BranchLoop)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(0o375)
            .set_exec(Some(VirtualMachine::cpu_loop_decrement_tos_less_than))
    ];
}
