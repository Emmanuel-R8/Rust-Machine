use crate::common::constants::OpCode;
use crate::hardware::machine::VirtualMachine;

use super::common::{ Instruction, InstructionFamily, InstructionFormat };

pub fn make_instructions_subprimitive() -> Vec<Instruction> {
    return vec![
        Instruction::new()
            .set_name("%ephemeralp".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Ephemeralp)
            .set_exec(Some(VirtualMachine::cpu_ephemeralp)),
        Instruction::new()
            .set_name("%unsigned-lessp".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::UnsignedLessp)
            .set_exec(Some(VirtualMachine::cpu_unsigned_lessp)),
        Instruction::new()
            .set_name("%unsigned-lessp-no-pop".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::UnsignedLesspNoPop)
            .set_exec(Some(VirtualMachine::cpu_unsigned_lessp_no_pop)),
        Instruction::new()
            .set_name("%allocate-list-block".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::AllocateListBlock)
            .set_exec(Some(VirtualMachine::cpu_allocate_list_block)),
        Instruction::new()
            .set_name("%allocate-structure-block".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::AllocateStructureBlock)
            .set_exec(Some(VirtualMachine::cpu_allocate_structure_block)),
        Instruction::new()
            .set_name("%pointer-plus".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::PointerPlus)
            .set_exec(Some(VirtualMachine::cpu_pointer_plus)),
        Instruction::new()
            .set_name("%pointer-difference".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::PointerDifference)
            .set_exec(Some(VirtualMachine::cpu_pointer_difference)),
        Instruction::new()
            .set_name("%pointer-increment".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::PointerIncrement)
            .set_exec(Some(VirtualMachine::cpu_pointer_increment)),
        Instruction::new()
            .set_name("%read-internal-register".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::ReadInternalRegister)
            .set_exec(Some(VirtualMachine::cpu_read_internal_register)),
        Instruction::new()
            .set_name("%write-internal-register".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::WriteInternalRegister)
            .set_exec(Some(VirtualMachine::cpu_write_internal_register)),
        Instruction::new()
            .set_name("no-op".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::NoOp)
            .set_exec(Some(VirtualMachine::cpu_no_op)),
        Instruction::new()
            .set_name("%coprocessor-read".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::CoprocessorRead)
            .set_exec(Some(VirtualMachine::cpu_coprocessor_read)),
        Instruction::new()
            .set_name("%coprocessor-write".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::CoprocessorWrite)
            .set_exec(Some(VirtualMachine::cpu_coprocessor_write)),
        Instruction::new()
            .set_name("%memory-read".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::MemoryRead)
            .set_exec(Some(VirtualMachine::cpu_memory_read)),
        Instruction::new()
            .set_name("%memory-read-address".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::MemoryReadAddress)
            .set_exec(Some(VirtualMachine::cpu_memory_read_address)),
        Instruction::new()
            .set_name("%tag".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Tag)
            .set_exec(Some(VirtualMachine::cpu_tag)),
        Instruction::new()
            .set_name("%set-tag".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::SetTag)
            .set_exec(Some(VirtualMachine::cpu_set_tag)),
        Instruction::new()
            .set_name("store-conditional".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::StoreConditional)
            .set_exec(Some(VirtualMachine::cpu_store_conditional)),
        Instruction::new()
            .set_name("%p-store-contents".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::PStoreContents)
            .set_exec(Some(VirtualMachine::cpu_p_store_contents)),
        Instruction::new()
            .set_name("%memory-write".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::MemoryWrite)
            .set_exec(Some(VirtualMachine::cpu_memory_write)),
        Instruction::new()
            .set_name("%set-cdr-code-1".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::SetCdrCode1)
            .set_exec(Some(VirtualMachine::cpu_set_cdr_code_1)),
        Instruction::new()
            .set_name("%set-cdr-code-2".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::SetCdrCode2)
            .set_exec(Some(VirtualMachine::cpu_set_cdr_code_2)),
        Instruction::new()
            .set_name("%merge-cdr-no-pop".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::MergeCdrNoPop)
            .set_exec(Some(VirtualMachine::cpu_merge_cdr_no_pop)),
        Instruction::new()
            .set_name("%generic-dispatch".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::GenericDispatch)
            .set_exec(Some(VirtualMachine::cpu_generic_dispatch)),
        Instruction::new()
            .set_name("%message-dispatch".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::MessageDispatch)
            .set_exec(Some(VirtualMachine::cpu_message_dispatch)),
        Instruction::new()
            .set_name("%jump".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Jump)
            .set_exec(Some(VirtualMachine::cpu_jump)),
        Instruction::new()
            .set_name("%check-preempt-request".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::CheckPreemptRequest)
            .set_exec(Some(VirtualMachine::cpu_check_preempt_request)),
        Instruction::new()
            .set_name("%halt".to_string())
            .set_family(InstructionFamily::Subprimitive)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Halt)
            .set_exec(Some(VirtualMachine::cpu_halt))
    ];
}
