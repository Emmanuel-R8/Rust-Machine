use crate::common::constants::OpCode;
use crate::hardware::machine::VirtualMachine;

use super::common::{Instruction, InstructionFamily, InstructionFormat};

pub fn make_instructions_predicate() -> Vec<Instruction> {
    return vec![
        Instruction::new()
            .set_name("eq".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Eq)
            .set_exec(Some(VirtualMachine::cpu_eq)),
        Instruction::new()
            .set_name("eq-no-pop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::EqNoPop)
            .set_exec(Some(VirtualMachine::cpu_eq_no_pop)),
        Instruction::new()
            .set_name("eql".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Eql)
            .set_exec(Some(VirtualMachine::cpu_eql)),
        Instruction::new()
            .set_name("eql-no-pop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::EqlNoPop)
            .set_exec(Some(VirtualMachine::cpu_eql_no_pop)),
        Instruction::new()
            .set_name("equal-number".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::EqualNumber)
            .set_exec(Some(VirtualMachine::cpu_equal_number)),
        Instruction::new()
            .set_name("equal-number-no-pop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::EqualNumberNoPop)
            .set_exec(Some(VirtualMachine::cpu_equal_number_no_pop)),
        Instruction::new()
            .set_name("greaterp".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Greaterp)
            .set_exec(Some(VirtualMachine::cpu_greaterp)),
        Instruction::new()
            .set_name("greaterp-no-pop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::GreaterpNoPop)
            .set_exec(Some(VirtualMachine::cpu_greaterp_no_pop)),
        Instruction::new()
            .set_name("lessp".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Lessp)
            .set_exec(Some(VirtualMachine::cpu_lessp)),
        Instruction::new()
            .set_name("lessp-no-pop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::LesspNoPop)
            .set_exec(Some(VirtualMachine::cpu_lessp_no_pop)),
        Instruction::new()
            .set_name("logtest".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Logtest)
            .set_exec(Some(VirtualMachine::cpu_logtest)),
        Instruction::new()
            .set_name("logtest-no-pop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::LogtestNoPop)
            .set_exec(Some(VirtualMachine::cpu_logtest_no_pop)),
        Instruction::new()
            .set_name("type-member-1".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::TypeMember1)
            .set_exec(Some(VirtualMachine::cpu_type_member_1)),
        Instruction::new()
            .set_name("type-member-2".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::TypeMember2)
            .set_exec(Some(VirtualMachine::cpu_type_member_2)),
        Instruction::new()
            .set_name("type-member-3".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::TypeMember3)
            .set_exec(Some(VirtualMachine::cpu_type_member_3)),
        Instruction::new()
            .set_name("type-member-4".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::TypeMember4)
            .set_exec(Some(VirtualMachine::cpu_type_member_4)),
        Instruction::new()
            .set_name("type-member-1-no-pop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::TypeMember1NoPop)
            .set_exec(Some(VirtualMachine::cpu_type_member_1_no_pop)),
        Instruction::new()
            .set_name("type-member-2-no-pop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::TypeMember2NoPop)
            .set_exec(Some(VirtualMachine::cpu_type_member_2_no_pop)),
        Instruction::new()
            .set_name("type-member-3-no-pop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::TypeMember3NoPop)
            .set_exec(Some(VirtualMachine::cpu_type_member_3_no_pop)),
        Instruction::new()
            .set_name("type-member-4-no-pop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::Immediate10Bits)
            .set_opcode(OpCode::TypeMember4NoPop)
            .set_exec(Some(VirtualMachine::cpu_type_member_4_no_pop)),
        Instruction::new()
            .set_name("endp".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Endp)
            .set_exec(Some(VirtualMachine::cpu_endp)),
        Instruction::new()
            .set_name("plusp".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Plusp)
            .set_exec(Some(VirtualMachine::cpu_plusp)),
        Instruction::new()
            .set_name("minusp".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Minusp)
            .set_exec(Some(VirtualMachine::cpu_minusp)),
        Instruction::new()
            .set_name("zerop".to_string())
            .set_family(InstructionFamily::Predicate)
            .set_format(InstructionFormat::OperandFromStack)
            .set_opcode(OpCode::Zerop)
            .set_exec(Some(VirtualMachine::cpu_zerop)),
    ];
}
