### Array Operations

aref-1, `aset-1`, `aloc-1`, `setup-1d-array`, setup-force-1d-array, `fast-aref-1`, `fast-aset-1`, `array-leader`, `store-array-leader`, `aloc-leader`

See the section".I-Machine Array Registers". page 36.

#### Instructions for Accessing One-Dimensional Arrays

Each of the next three instructions accesses. a one-dimensional array.

`aref-1` Instruction.

Format Operand from stack Value(s) Returned 1

Argument(s) 2: Opcode 312 argl `dtp-array`, `dtp-array-instance`,

`dtp-string`, or `dtp-string-instance`

arg2 `dtp-fixnum`

Immediate Argument Type Unsigned

Description Pushes the element of arg specified by arg2 on the stack.

Checks the array arg to insure it is a one-dimensional array, and also checks to insure that the index arg2 is a fixnum and falls within the bounds of the array.

Exception Conditions: Type of arg1 is `dtp-array-instance` or `dtp-string-instance`. arg\] is an array with array-long-prefix = 1. Arguments: arg, arg2 Values: 1

Memory Reference `header-read` , `data-read`

Register Effects TOS: Valid before, valid after DP Op register modified

aset-1

Instruction

Format Operand from stack Value(s) Returned 0

Argument(s) 3: Opcode 310 argl any Lisp data type (See description)

arg2. `dtp-array`, `dtp-array-instance`,

`dtp-string`, or `dtp-string-instance`

args `dtp-fixnum`

Immediate Argument' Type Unsigned

Description a Stores argl into the element of array arg2 specified by index arg3,/. a

Checks the array to insure it is a one-dimensional array, and also checks to insure that the index is a fixnum and falls within the bounds of the array.

When the array-clement-type is .`dtp-fixnum` or `dtp-character`, takes an error trap unless the data type of arg1 matches the array element type. When the array element-type is `dtp-character` and the array byte-packing is 8-bit bytes, the instruction takes an error trap if bits \<31:8\> of argl are nonzero, Similarly, the instruction takes an error trap if bits \<81:16\> are nonzero in the case of 16-bit characters. It does not check that fixnums are within range when storing into .a fixnum array. See the section".Revision 0 Aset-1". page 298.

Exception Conditions: Type of arg2 is `dtp-array-instance` or `dtp-string-instance`. arg2 is an array with array-long-prefix = 1. Arguments: arg1, arg2, arg3 Values: 0

Memory Reference `header-read` , `data-write`

Register Effects TOS: Valid before, invalid after DP Op register modified

aloc-1 Instruction

Format Operand from stack . Value(s) Returned 1

Argument(s) 2: Opcode 313 argl `dtp-array`, `dtp-array-instance`,

`dtp-string`, or `dtp-string-instance`

(array must contain full-word Lisp references);

arg2 `dtp-fixnum`

Immediate Argument Type Unsigned

Description Pushes a locative to the element of arg1 addressed by arg2 on the stack.

Checks the array arg1 to insure it isa one-dimensional array containing object references (that is, checks that the array-element-type- field of the array header is object reference), and also checks to insure that the index arg2 is a fixnum and falls within the bounds of the array.

Exception Conditions: Type of argl is `dtp-array-instance` or `dtp-string-instance`. arg1 is an array with array-long-prefix = 1. Arguments: arg1, arg2 . Values: i

Memory Reference Header-reai

Register Effects TOS: Valid before, valid after

#### Instructions for Creating Array Registers

Each of the next two instructions creates an array register describing a one- dimensional array.

156

setup-ld-array Instruction Format Operand from stack Value(s). Returned 4 Argument(s) 1: Opcode 3

arg `dtp-array`, `dtp-array-instance`, `dtp-string`, or `dtp-string-instance`

Immediate Argument Type Signed

Description

Creates an array register describing array arg. The array register will be four words pushed on top of the stack.-erg must be a one-dimensional array. See the section".I-Machine Array Registers". page 36.

' Exception a Conditions: Type of arg is `dtp-array-instance` or `dtp-string-instance`. arg is an array with array-long-prefix ='1. Arguments: arg Values: 4 (array register)

Memory Reference `header-read`

Register Effects TOS: Valid after

setup-force-ld-array . : Instruction Format Operand from stack Value(s) Returned 4 Argument(s) 1: Opcode 4

arg `dtp-array`, `dtp-array-instance`, `dtp-string`, or. `dtp-string-instance`

Immediate Argument Type Signed

Description

Creates an array register describing a unidimensional array. arg can be any array. The array register will be four words pushed on top of the stack. See the section".I-Machine Array Registers". page 36.

Causes multidimensional arrays.to be accessed as if they were unidimensional arrays, with the order of elements depending on row-major or column-major ordering.

Exception. Conditions: Type of arg is `dtp-array-instance` or `dtp-string-instance`. arg is an array with array-long-prefix = 1. Arguments: arg Values: 4 (array register)

Memory Reference `header-read`

Register Effects TOS: Valid after

#### Instructions for Fast Access of Arrays

The next two instructions access single dimensional arrays stored in array register variables.

fast-aref-1- Instruction

Format Operand from stack, Value(s) Returned 1 address-operand mode. (immediate and sp-pop addressing modes illegal)

Argument(s) 2: Opcode 350 arg dtp-fixmum : arg2 the address operand (address of control word of array register)

Immediate Argument Type Not. applicable

Description Pushes on the stack the element of arg2 specified by index argl.

Checks to insure. that the index is.a fixnum and falls within the bounds of the array; if the check fails,-the instruction takes an error. trap.

This instruction. takes an instruction exception if the current event. count does not equal the array-register event count. See the section \`\`I-Machine Array Registers". page 36.

Exception Conditions: Array register is obsolete (current

array-register-event-count does not equal that encached in the array register).

Arguments: arg1, arg2 (address operand as. locative) Values: 1

Memory Reference `data-read`

Register Effects TOS: Valid before, valid after DP Op register modified

fast-aset-1 Instruction

Format Operand from stack, Value(s) Returned 0 address-operand mode (immediate and sp-pop addressing modes illegal)

Argument(s) 3: Opcode 351

argl any Lisp data type (See description.)

arg2 `dtp-fixnum`

args the address operand (address of control word of array register)

Immediate Argument Type Not applicable

Description \_ Stores arg1 into the element of arg3 indexed by arg2.

en

Checks to insure that the index is a fixnum and falls within the bounds of the array. When the array-element-type is `dtp-fixnum` or `dtp-character`, checks the data type of the argument. Does not check that a fixnum is in range when the array-element-type is dtp-fiznum and the array-byte- packing field is nonzero. When the array element-type is `dtp-character` and the array byte-packing is 8-bit bytes, the instruction takes an error trap if bits \<31:8\> of the character are nonzero. Similarly, the instruction takes an error trap if bits \<31:16\> are nonzero in the case of 16-bit characters. See the section".Revision 0 Fast-aset-1". page 299.

This instruction takes an instruction exception if the current event count does not equal the array-register event count. See the section \`\`I-Machine Array Registers". page 36.

Exception Conditions: Array register is obsolete (current array-register-event-count does not equal that encached in the array register). Arguments: argl, arg2, arg3 (address operand as locative) Values: 0

Memory Reference `data-write`

Register Effects TOS; Valid before, invalid after DP Op register modified

#### Instructions for Accessing Array Leaders a

'Each of the next: three instructions accesses the array leader of. any type of. array, -

-array-leader co SC a a na Instruction - - \| Format Operand from stack Value(s) Returned 1 : Argument(s) 2: - Opcode 316 --- \|

arg\] `dtp-array`, `dtp-array-instance`, `dtp-string`, or `dtp-string-instance` - arg2 `dtp-fixnum` (See description.)

\_ Immediate Argument.Type Unsigned

Description Pushes on the stack the leader element of arg1 that is specified by arg2.

Checks the array arg1 to insure it has a leader, and checks the index. arg2 . . to insure it is a fixnum and falls within the -bounds of the array leader; if \| the checks fail, the instruction takes an error trap.

Exception Post Trap Conditions: Type of arg1 is dtp- -array-instance or \| `dtp-string-instance`. --- Arguments: argl, arg2--- ' Values: 1

\_ Memory Reference `header-read` , `data-read`

Register Effects TOS: Valid before, valid after

store-array-leader Instruction Format Operand from stack Value(s). Returned 0 Argument(s) 3: Opcode 314

argl any Lisp data. type

arg2 `dtp-array`, `dtp-array-instance`, `dtp-string`, or `dtp-string-instance` arg3 `dtp-fixnum`. (See description.)

Immediate Argument Type Unsigned

Description Stores arg1 into the element specified by arg3 of the leader of arg2. Returns no values. "Y\@@y i Cheep Er

Checks the array arg2 to insure it has a leader, and checks the index arg2 to insure it is a fixnum and falls within the bounds of the array leader; if the tests fail, the instruction takes an error trap.

Exception Conditions: Type of arg2 is `dtp-array-instance` or `dtp-string-instance`. Arguments: argl, arg2, arg3 Values: 0

Memory Reference `header-read` , `data-write`

Register Effects TOS: Valid before, invalid after

162aloc-leader

Format Operand from stack

Argument(: s) 2:

argl `dtp-array`, `dtp-array-instance`,

`dtp-string`, or `dtp-string-instance` arg2 `dtp-fixnum` (See description.)

Immediate Argument Type. Unsigned

Description

Instruction

Value(s) Returned 1Â°

Opcode 317

Pushes on the stack a locative to the leader element of arg1 indexed by arg2, Checks the array arg\] to insure it has a leader, and checks the index arg2 to insure it is a fixnum and falls within the bounds of the: array leader; if the checks fail, the instruction takes an error trap.

Exception .

Conditions: Type of arg1 is `dtp-array-instance`. or

`dtp-string-instance`. Arguments: arg1, arg2 Values: 1

Memory Reference `header-read`

Register Effects TOS: Valid before, valid after
