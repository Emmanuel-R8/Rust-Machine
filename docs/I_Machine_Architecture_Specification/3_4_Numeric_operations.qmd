### Numeric Operations

`add`, `sub`, `unary-minus`, `increment`, `decrement`, `multiply`, `quotient`, `ceiling`, `floor`, `truncate`, `round`, `remainder`, `rational-quotient`, `max`, `min`, `logand`, `logior`, `logxor`, `ash`, `rot`, `lsh`, `%32-bit-plus`, `%32-bit-difference`, `%multiply-double`, `%add-bignum-step`, `%sub-bignum-step`, `%divide-bignum-step`, `%lshc-bignum-step`, `%multiply-bignum-step`

Refer also to the following: `equal-number`, `greaterp`, `lessp`, `%unsigned-lessp`, `plusp`, `minusp`, `zerop`

If either argument to.a numeric instruction is a non-number, then the instruction will take an error pre-trap. Otherwise, if both arguments are hardware supported for the instruction, and no exceptions occur, then the instruction will perform the specified operation. If the arguments are numeric, but the data types of the arguments are not hardware supported or an exception occurs, then the instruction will take an instruction exception and let Lisp code decide whether the arguments, although numeric, are illegal for this instruction.

Note that, if there is no floating-point coprocessor, all the numeric operations will take an instruction exception on encountering operands of type `dtp-single-float`. This instruction exception is in addition to any mentioned in the instruction definitions, See the section @revision-0-numeric-operations page 299.


--------------------------------------

`add` / Instruction

Format Operand from stack Value(s) Returned 1

Argument(s) 2: Opcode 300 argl any numeric data type arg2 any numeric data type

Immediate Argument Type Unsigned

Description Pushes the sum of the two arguments on the stack.

See the section".Revision 0 Numeric Operations". page 299.

Exceptions

Type: Arithmetic dispatch

Conditions: Types of argl and arg2 are numeric, but not both `dtp-fixnum` or `dtp-single-float`. arg1 and arg2 are both `dtp-fixnum`, but result overflows. Floating point. exceptions.

Arguments: argl, arg2

Values: 1

Memory Reference None

\_ Register Effects TOS: Valid before, valid after


--------------------------------------

`sub`

Instruction

Format Operand from stack Value(s) Returned 1

Argument(s) 2: Opcode 301 argl any numeric data type arg2 any numeric data type

Immediate Argument Type Unsigned

Description:

Subtracts `arg2` from `arg1`, and pushes the result on the stack.

See the section".Revision 0 Numeric Operations". page 299.

Exceptions:

Type: Arithmetic dispatch

Conditions: Types of arg1 and arg2 are numeric, but not both `dtp-fixnum` or `dtp-single-float`. argl and arg2 are both `dtp-fixnum`, but result overflows. Floating point exceptions.

Arguments: arg, arg2

Values: 1

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`unary-minus` Instruction
Format Operand from stack Value(s) Returned 1 Argument(s) 1:
Opcode 114

arg any numeric data type

Immediate Argument Type Unsigned

Description:

Pushes the negation of `arg` on the stack: if the data type of `arg` is `dtp-fixnum`, subtracts `arg` from zero, and pushes the result, the two's complement of arg, on the stack. If `arg` is of `dtp-single-float`, complements the sign bit and pushes the result on the stack.

See the section".Revision 0 Numeric Operations". page 299.

Exceptions

Type: Arithmetic dispatch

Conditions: Type of `arg` is numeric, but not `dtp-fixmum` or `dtp-single-float`. Type of arg is `dtp-fixnum`, but result overflows. Floating point exceptions.

Arguments: arg

Values: 1

Memory Reference None

Register Effects TOS: Valid after


--------------------------------------

`increment` Instruction

Format Operand from stack, Value(s) Returned 0 address-operand mode (immediate and sp-pop addressing modes illegal)

Arguments) 1: Opcode 143 arg, the address operand, any numeric data type

Immediate Argument Type Not applicable

Description Adds 1 to arg and stores the result back into the operand.

See the section".Revision 0 Numeric Operations". page 299.

Exception Conditions: Type of erg is numeric, but not `dtp-fixnum` or `dtp-single-float`. Type of arg is `dtp-fixnum`, but result overflows. Floating. point exceptions. Arguments: arg (address operand as locative) Values: 0

Memory Reference None

Register Effects TOS: Unchanged


--------------------------------------

`decrement` Instruction

Format Operand from stack, Value(s) Returned 0 address-operand mode (immediate and sp-pop addressing modes illegal)

Argument(s). 1: Opcode 144 arg can be any numeric data type

Description Subtracts 1 from arg and stores the result back into the operand. See the section".Revision 0 Numeric Operations". page 299.

Exception Conditions: Type of arg is numeric, but not `dtp-fixnum`. or `dtp-single-float`. Type of arg is `dtp-fixnum`, but result overflows. Floating point exceptions. Arguments: arg (address operand as locative) Values: 0

Memory Reference None

Register Effects TOS: Unchanged


--------------------------------------

`multiply` Instruction Format. Operand from stack Value(s). Returned 1 Argumentt(s) 2:
Opcode 202

argl any numeric data. type arg2 any numeric data type

Immediate Argument Type Signed

Description Computes argl\*arg2 and pushes the result on the stack. See the section".Revision 0 Numeric Operations". page 299.

Exceptions

Type: Arithmetic dispatch

Conditions: Types of arg1 and arg2 are numeric, but not both dtp-fimmum or `dtp-single-float`. argl and arg2 are both `dtp-fixnum`, but result overflows. Floating point exceptions.

Arguments: arg1, arg2

Values: 1

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`quotient` Instruction

Format Operand from stack Value(s) Returned 1 Argument(s) 2: Opcode 203

argl any numeric data type arg2 any numeric data type; if `dtp-fixnum`, must not be zero

Immediate Argument Type Signed

Description

Divides arg1 by arg2, and pushes the quotient on the stack. If both operands are integers, the result is the integer obtained by truncating the quotient toward 0; otherwise, the result is a single-precision floating-point number. quotient implements the function zl:/ of two arguments. See the section".Revision 0 Numeric Operations". page 299.

Exceptions Type: Arithmetic dispatch Conditions: Types of arg and erg2 are numeric, but not both dtp-fixmum or `dtp-single-float`. argl and arg2 are both `dtp-fixnum`, but result overflows. Floating point exceptions. Arguments: arg1, arg2 Values: 1 Note: the only possible fixnum-fixnum overflow is -1_81. / -1 = 1_81.

Memory Reference None

Register Effects TOS: Valid before, valid after

#### Division Operations That Return Two Values

Note that, if only one of the two results is desired, the division instruction can be followed by an instruction to discard the unwanted result: to discard the first result (quotient), use set-sp-to-address-save-tos SP\|-1, to discard the second result (remainder), use set-sp-to-address SPj-l. Trap handlers for division operations, on encountering these particular instructions, can avoid computing results that are going to be discarded. ;


--------------------------------------

`ceiling` Instruction

Format Operand from stack Value(s) Returned 2

Arguments) 2:
Opcode 204 'arg1 any numeric data type (an integer) arg2 any numeric data type;

if `dtp-fixnum`, must not be zero

Immediate Argument Type Signed

Description .

Divides arg1 by arg2, pushes the quotient on. the stack, then pushes the remainder on the stack. If the remainder is not zero, the resulting quotient (NOS) is truncated toward positive infinity, and the remainder (TOS) is such that argl = arg2 \* NOS + TOS. See the section".Division Operations That Return Two Values". page 120. See the section \`\`Revision 0 Numeric Operations". page 299.

Exceptions Type: Arithmetic dispatch Conditions: Types of arg1 and arg2 are numeric, but not both `dtp-fixnum`. ; argl and arg2 are both `dtp-fixnum`, but result overflows. Arguments: argl, arg2 Values: 2 Note: the only possible fixnum-fixnum overflow is -1_81. / -1 = 1_31.

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`floor` Instruction \|

-   Format Operand from stack \_ : - Value(s) Returned 2

Argument(s) 2: . oe Opcode 205

-argl any numeric data type (an integer) arg2 any numeric data type;

if `dtp-fixnum`, must not be zero ---

-   Immediate Argument Type Signed

Description

. Divides arg1 by arg2, pushes the quotient on the stack, then pushes the

remainder on the stack. If the remainder is not zero, the resulting

-quotient (VOSS) is truncated toward negative infinity, and the remainder

(TOS) is such that arg\] = arg2 \* NOS + TOS, See the section".Division Operations That Return Two Values". page 120. See the section".Revision

0 Numeric Operations". page 299.

Exceptions

'Type: Arithmetic dispatch

Conditions: Types of ergi and arg2 are numeric, but not both `dtp-fixnum`. \| argl and arg2 are both `dtp-fixnum`, but result overflows.

Arguments: argl, arg2 ---

Values: 2 \| Note: the only possible fixnum-fixnum overflow is -1_81. / -l= 131 Memory Reference None -

Register Effects TOS: Valid before, valid after

--------------------------------------

`truncate` Instruction Format Operand from stack Value(s) Returned 2 Argument(s) 2: Opcode 206

argl any numeric data type (an integer) arg2 any numeric data type; if `dtp-fixnum`, must not be zero

Immediate Argument Type Signed

Description

Divides arg1 by arg2, pushes the quotient on. the stack, then. pushes the remainder on the. stack. If the remainder is not zero, the resulting quotient (NOS), is truncated toward zero, and the remainder (TOS) is. such that arg\] = arg2 \* NOS + TOS. See the section".Division Operations That Return Two Values". page 120. See the section".Revision 0 Numeric Operations". page 299. :

Exceptions Type: Arithmetic dispatch Conditions: Types of arg1 and arg2 are numeric, but not both `dtp-fixnum`. argl and arg2 are both `dtp-fixnum`, but result overflows. Arguments: argl, arg2 Values: .2 Note: the only possible fixnum-fixnum overflow is -1_31. / -1 = 1_81.

Memory Reference None

Register Effects TOS: Valid before, valid after

--------------------------------------

`round` Instruction

Format Operand from stack Value(s) Returned 2

Argument(s) 2: \_ Opcode 207 argl any numeric data type (an integer) arg2 any numeric data type;

if `dtp-fixnum`, must not be zero

Immediate Argument Type Signed

Description

Divides arg1 by arg2, pushes the quotient on the stack, then pushes the remainder on the stack. If the remainder is not zero, the resulting quotient (VOS) is rounded toward the nearest integer, and the remainder (TOS) is such that argl = arg2 \* NOS + TOS. If the resulting quotient (NOS) is exactly halfway between two integers, it is rounded to the one that is even. See the section".Division Operations That Return Two Values". page 120. See the section".Revision 0 Numeric Operations". page 299.

Exceptions Type: Arithmetic dispatch Conditions: Types of arg and arg2 are numeric, but not both `dtp-fixnum`. argl and arg2 are both `dtp-fixnum`, but result overflows. Arguments: argl, arg2 : Values: 2 : : Note: the only possible fixmum-fixnum overflow is -1_81. / -1 = 1,81.

Memory Reference None

Register Effects TOS: Valid before, valid after

--------------------------------------

`remainder` Instruction Format Operand from stack Value(s) Returned 1 Argument(s) 2: Opcode 210

argl any numeric data type arg2 any numeric data. type; if `dtp-fixnum`, must not be zero

Immediate. Argument Type Signed

Description

Divides argl by arg2, adjusts the remainder to have the same sign as the dividend, and pushes the remainder on the stack. See the section \`\`Revision 0 Numeric Operations". page 299.

Exceptions Type: Arithmetic dispatch Conditions: Types of arg1 and arg2 are numeric, but not both `dtp-fixnum`. " argl and arg2 are both `dtp-fixnum`, but result overflows. Arguments: .argl, arg2 Values: 1 Note: the only possible fixnum-fixnum overflow is -1_31. / -1 = 131. This overflow is only in an intermediate result, some implementations may in fact return 0 without trapping.

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`rational-quotient` Instruction Format Operand from stack Value(s). Returned 1 Argument(s) 2: Opcode 211

argl any numeric data type arg2 any numeric data type; if `dtp-fixnum`, must not be zero

Immediate Argument Type Signed

Description

Divides arg1 by arg2, and pushes the quotient on the stack. If both operands are integers and the remainder is not zero, the instruction traps to a routine that returns the ratio (`dtp-small-ratio` or `dtp-big-ratio`) of argllarg2 reduced to lowest terms. If the remainder is zero, the result is an integer if both arguments are integers, or the result type is dtp-single-fleat if either or both arguments are `dtp-single-float` types. See the section".Revision 0 Numeric Operations". page 299.

Exceptions Type: Arithmetic dispatch Conditions: Types of arg1 and arg2 are numeric, but. not both `dtp-fixnum` or `dtp-single-float`. arg and arg2 are both `dtp-fixnum`, but result overflows.

arg1 and arg2 are both `dtp-fixnum`, but remainder is non-zero. Floating point exceptions. Arguments: ergi, arg2 Values: 1 Note: the only possible fisnum-fixnum overflow is -1_81. / -1 = 1_81.

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`max`

Instruction

Format Operand from stack Value(s) Returned 1
Argument{(s) 2: Opcode 213

argl any numeric data type arg2 any numeric data type

Immediate Argument Type Signed

Description Pushes the greater of the two arguments on the stack.

If the arguments are a mixture of rationals and floating-point numbers, and the largest argument isa rational, then the implementation is free to produce either that rational or its floating-point approximation; if the largest argument is a floating-point number of a smaller format than the largest format of any floating-point argument, then the implementation is free-to return the argument in its given format or expanded to the larger format. (Note that all of these cases are implemented by trap-handlers, since they all involve data types that cause instruction exceptions.)

The implementation has a choice of returning the largest argument as is or applying the rules of floating-point contagion. If the arguments are equal, then either one of them may be returned.

Exception Type: Arithmetic dispatch Conditions: Types of arg1 and arg2 are numeric, but not both. `dtp-fixnum` or `dtp-single-float`. Floating point exceptions. Arguments: argl, arg2 Values: 1

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`min` Instruction

Format Operand from stack Value(s) Returned 1

Argument(s) 2: Opcode 212

argl any numeric data type arg2 any numeric data type

Immediate Argument Type Signed

Description Pushes the lesser of the two arguments on the stack,

If the arguments are a mixture of rationals and floating-point numbers, and the smallest argument is a rational, then the implementation is free to produce either that rational or its floating-point approximation; if the smallest argument is a floating-point number of a smaller format than the largest format of any floating-point argument, then the implementation is free: to return the argument in its given format or expanded to the larger format. (Note that all of these cases are implemented by trap-handlers, since they all involve data types that cause instruction exceptions.)

The implementation has a choice of returning the smallest argument as is or applying the rules of floating-point contagion. If the arguments are equal, then either one of them may be returned.

Exception Type: Arithmetic dispatch Conditions: Types of arg1 and arg2. are numeric, but not both `dtp-fixnum` or `dtp-single-float`. Floating point exceptions. Arguments: arg1, arg2 Values: 1

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`logand` : Instruction

Format Operand from stack Value(s) Returned 1

Argument{s) 2: Opcode 215 argl any numeric data type , arg2 any numeric data type

Immediate Argument Type Signed

Description Forms the. bit-by-bit logical AND of arg1 and arg2, and. pushes the result on the stack. .

Exception Type: Arithmetic dispatch Conditions: Types of arg1 and arg2 are numeric, but not both `dtp-fixnum`. Arguments: argl, arg2 Values: 1

Memory Reference None

Register Effects TOS:. Valid before, valid after


--------------------------------------

`logxor`. 7

.- Instruction -

Format Operand from stack a = Value(s) Returned 1 \| \| oo Arguments) 2: 7 Se \| Opcode 216

argl any numeric data type. arg2 any numeric data type ©

|                                |
|--------------------------------|
| Immediate Argument Type Signed |

-   Description :

Forms the bit-by-bit exclusive OR of argl and arg2, and pushes the: result \|

on the stack.

-   Exception

Type: Arithmetic dispatch Conditions: Types of arg and arg2 are numeric,

|                               |
|-------------------------------|
| but not both `dtp-fixnum`. \| |

Arguments: argl, (arg2 ---

' Values: 1

Memory Reference None

Register Effects TOS: Valid before, valid after

--------------------------------------

`logior`

Format Operand from stack

Argument(s) 2: argl any numeric data type arg2.any numeric data type

Immediate Argument Type Signed

Description

Value(s) Returned 1

Opcode 217

Instruction

Forms the bit-by-bit inclusive OR of arg1 and arg2, and pushes the result

on the stack.

Exception Type: Arithmetic dispatch

Conditions: Types of arg and arg2 are numeric,

but not both `dtp-fixnum`.

Arguments: arg1, arg2 Values: 1

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`ash`

Instruction

Format Operand from stack Value(s) Returned 1

Argument(s) 2: : Opcode 232 argl any numeric data type arg2 any numeric data type

Immediate Argument Type Signed

Description

Shifts argl left arg2 places when arg2 is positive, or right jarg2\| places when arg2 is negative, and pushes the result on the stack. Unused positions are filled by zeroes from the right or by copies of the sign bit from the left. This is Common Lisp ash.

Exception

Type: Arithmetic dispatch

Conditions: Types of arg1 and arg2 are numeric, but not both `dtp-fixnum`. argl and arg2 are both `dtp-fixnum`, but result overflows.

Arguments: arg1, arg2

Values: 1

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`rot` Instruction

Format Operand from: stack Value(s) Returned 1

Argument(s) 2: Opcode 220

argl `dtp-fixnum`

arg2 `dtp-fixnum`

Immediate Argument Type Signed

Description

Rotates arg! left arg2 bit positions. when arg2 is positive, or rotates arg!

right jarg2\| bit. positions when arg2.is negative, then pushes the result on the stack. Bits that are shifted out one side are shifted in the other side.

Exception. None Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`lsh` Instruction

Format Operand from stack Value(s) Returned 1

Argument(s) 2: - Opcode 221

argl `dtp-fixnum`

arg2 `dtp-fixnum`

Immediate Argument Type Signed

Description

Shifts arg1 left arg2 places when arg2 is positive, or shifts arg1 right Jarg2\| places when arg2 is negative. Unused positions are filled by zeroes. Exception None

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

DP Op register modified

:

%82-bit-plus Instruction Format Operand from stack Value(s) Returned 1 Argument(s) 2: Opcode 302

arg1 `dtp-fixnum` arg2 `dtp-fixnum`

Immediate Argument Type Unsigned

Description

Pushes arg1 + arg2 on the stack, ignoring overflow (addition uses signed 32-bit arithmetic).

Exception None

Memory Reference None

Register Effects TOS: Valid before, valid after

--------------------------------------


`%32-bit-difference` Instruction. Format Operand from stack - . Value(s) Returned 1 Argument(s) 2: Opcode 303

argl `dtp-fixnum` arg2 `dtp-fixnum`

Immediate Argument Type Unsigned.

Description. Pushes arg1 - arg2 on the stack, ignoring overflow.

Exception None Memory Reference None

Register Effects TOS: Valid before, valid after

--------------------------------------


`%umultiply-double` : Instruction Format Operand from stack Value(s) Returned 2 Argument(s) 2: Opcode 222

argl `dtp-fixnum` arg2 `dtp-fixnum`

Immediate Argument Type Signed

Description

Multiplies.arg1 \* arg2, and pushes the two-word result on the stack, low- order word first. Note that, unlike %multiply-bignum-step, this is a signed multiplication.

Exception None

Memory Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`%add-bignum-step` Instruction Format Operand from stack Value(s) Returned 2 'Argument(s) 3: Opcode 304

argl `dtp-fixnum`

arg2 `dtp-fixnum`

arg3 `dtp-fixnum`

Immediate Argument Type Unsigned

Description

Adds all three arguments, pushes the result on the stack, then pushes the carry (2, 1, or 0).on the stack.

Exception None

Memory Reference None

Register Effects TOS: Valid before, valid after

--------------------------------------


`%sub-bignum-step` . ; Instruction Format Operand from stack Value(s) Returned 2 Arguments) 8: Opcode 305

arg1 `dtp-fixnum`

arg2 `dtp-fixnum`

arg3 dtp-fixmum

Immediate Argument Type Unsigned

Deseription

Computes ((arg1 - arg2) - arg3), pushes this value on the stack, then pushes the value 1 on the stack if a".borro". was necessary or 2 if a double borrow was necessary; otherwises pushes a 0.

Exception None

Memory. Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`%multiply-bignum-step` Instruction Format Operand from stack ' Value(s) Returned 2 Argument(s) 2: Opcode 306.

argl `dtp-fixnum` arg2 dtp-fixmnum

Immediate Argument Type Unsigned

Description

Pushes the 2-word result. of multiplying 32-bit unsigned arg1 by 32-bit unsigned arg2 on the stack: first the least-significant word, then the most- significant word.

Exception. None

Memory. Reference None

Register Effects TOS: Valid before, valid after


--------------------------------------

`%divide-bignum-step`. : Instruction Format Operand from stack Value(s). Returned 2 arg1iment(s) 8: Opcode 307

argl `dtp-fixnum` arg2 `dtp-fixnum` arg3 `dtp-fixnum`, must not be 0

Immediate Argument Type Unsigned

Description

Performs an unsigned divide of the 64-bit number ¢ argl (ash.arg2 82.)) by arg3, pushes the quotient on the stack, then pushes the remainder on the stack. Only the low 32 bits of the quotient and remainder are pushed (implying that arg3 is expected to be greater than or equal to arg2 using an unsigned compare): If arg3 is 0, the instruction takes a divide-by-zero error pre-trap.

Exception None Memory Reference None

Register Effects TOS: Valid before, valid after

--------------------------------------


`%-bignum-step` Instruction Format Operand from stack Value(s) Returned 1 Argument(s) 3: Opcode 223

argl `dtp-fixnum`

arg2 `dtp-fixnum`

arg3 `dtp-fixnum` (Values not between 0 and 32. inclusive will cause undefined results.)

Immediate Argument Type Signed

Description

argl and arg2 are unsigned digits. Has the effect of pushing (db (byte 32. 82.) (ash G arg\] (ash arg2 32.)) arg3)) on the stack as a fixnum.

Exception None

Memory Reference None

Register Effects TOS: Valid before, valid after

--------------------------------------


DP Op register modified Rotate-latch modified -
